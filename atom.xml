<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>乘风破浪 披荆斩棘</title>
  
  <subtitle>码农的入门到全栈的学习记录</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2022-05-14T02:19:21.741Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>xiaoliuxuesheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>0802-Docker</title>
    <link href="http://yoursite.com/2008/02/01/0802-Docker/"/>
    <id>http://yoursite.com/2008/02/01/0802-Docker/</id>
    <published>2008-01-31T16:02:00.000Z</published>
    <updated>2022-05-14T02:19:21.741Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Docker基础"><a href="#第一章-Docker基础" class="headerlink" title="第一章 Docker基础"></a>第一章 Docker基础</h1><h2 id="1-1-Docker概述"><a href="#1-1-Docker概述" class="headerlink" title="1.1 Docker概述"></a>1.1 Docker概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Docker 是一个开源项目，诞生于 2013 年初，最初是 dotCloud 公司内部的一个业余项目。它基于 Google 公司推出的 Go 语言实现。 项目后来加入了 Linux 基金会，遵从了 Apache 2.0 协议，项目代码在 <a href="https://github.com/docker/docker">GitHub</a> 上进行维护。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Docker是一个开发、发布和运行应用程序的开放平台。Docker使您能够将应用程序与基础架构分离，以便快速交付软件。有了Docker，可以像管理应用程序一样管理你的基础设施（Docker是容器，容器里安装的是应用软件）。通过利用Docker快速发布、测试和部署代码的方法，可以显著减少编写代码和在生产环境中运行代码之间的延迟。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Docker容器可以将开发的应用程序和开发依赖的应用软件以及软件所在的系统环境直接打包在一起，并且将Docker容器打包的镜像可以在任何服务器中运行而且可以保障应用程序运行环境一致；  </p><h2 id="1-2-Docker架构"><a href="#1-2-Docker架构" class="headerlink" title="1.2 Docker架构"></a>1.2 Docker架构</h2><ol><li><p><strong>Docker架构</strong>：Docker使用C-S架构。Docker客户端与Docker守护进程通信，Docker守护进程负责构建、运行和分发Docker容器。Docker客户端和守护进程可以在同一个系统上运行，也可以将Docker客户端连接到远程Docker守护进程。Docker客户端和守护进程使用REST API，通过UNIX Socket(套接字)或网络接口进行通信，</p><img src="https://s1.ax1x.com/2020/08/22/daHOIS.jpg" alt="daHOIS.jpg" border="0" /></li><li><p><strong>Docker守护进程</strong>：Docker守护进程（dockerd）监听Docker API的请求并管理Docker对象，如镜像(images)、容器(containers)、网络(networks)和卷(volumes)。守护进程还可以与其他守护进程通信以管理Docker服务。</p></li><li><p><strong>Docker客户端（docker）</strong>：是许多Docker用户与Docker进行交互的主要方式。当您使用docker run等命令时，客户端会将这些命令发送给dockerd，dockerd会执行这些命令。docker命令使用docker API。Docker客户端可以与多个docker守护进程通信。</p></li><li><p><strong>Docker registry</strong>：用来存储Docker镜像。Docker Hub是任何人都可以使用的公共registry，Docker默认配置为在Docker Hub上查找镜像。您可以运行自己的私有registry。如果您使用Docker数据中心（DDC），它包括Docker Trusted Registry（DTR）。使用docker pull或docker run命令时，将从配置的registry中提取所需的镜像。使用docker push命令时，镜像将被推送到配置的registry中。</p></li><li><p><strong>Docker对象</strong>：当使用Docker时，您可能正在创建和使用镜像、容器、网络、卷、插件和其他对象。</p></li><li><p><strong>镜像(image)</strong>：是一个只读模板，包含了创建Docker容器的指导说明。通常，一个镜像基于另一个镜像，并带有一些额外的自定义项。例如，您可以构建一个镜像，它是基于ubuntu镜像，然后再安装Apache web服务器和您的应用程序，并做相关详细配置确保应用能运行。</p><ul><li>也可以创建自己的镜像，也可以只使用其他人创建并在docker hub registry中发布的镜像。要构建自己的镜像，需要创建一个Dockerfile，其中包含一些简单的语法，用于定义创建镜像并运行它所需的步骤。Dockerfile中的每条指令都会在镜像中创建一个层。更改Dockerfile并重新生成镜像时，仅重新生成已更改的层。与其他虚拟化技术相比，这是使镜像如此轻量级、小型和快速的原因之一。</li></ul></li><li><p><strong>容器(container)</strong>：是镜像的可运行实例。您可以使用Docker API或CLI创建、启动、停止、移动或删除容器。您可以将容器连接到一个或多个网络，将存储附加到该容器，甚至可以基于其当前状态创建新镜像。</p><ul><li><p>默认情况下，容器与其他容器及其主机隔离得相对较好。您可以控制容器的网络、存储或其他底层子系统与其他容器或主机的隔离程度。</p></li><li><p>容器由其镜像以及创建或启动时提供给它的任何配置选项定义。当容器被删除时，对其状态的任何未存储在持久性存储中的更改都将丢失，即创建容器时我们要先规划好确保有用数据是放在持久化的存储上。</p></li></ul></li><li><p><strong>联合文件系统(Union file systems)</strong>：是通过创建层来操作的文件系统，这使得它们非常轻量和快速。Docker引擎使用UnionFS为容器提供构建块。Docker引擎可以使用多个UnionFS变体，包括AUFS、btrfs、vfs和DeviceMapper。</p></li></ol><h2 id="1-3-Docker安装"><a href="#1-3-Docker安装" class="headerlink" title="1.3 Docker安装"></a>1.3 Docker安装</h2><h3 id="1-CentOS系统安装"><a href="#1-CentOS系统安装" class="headerlink" title="1. CentOS系统安装"></a>1. CentOS系统安装</h3><ol><li><p>下载CentOS7.5：<a href="https://vault.centos.org/">https://vault.centos.org/</a></p><ul><li>种子文件：7.5.1804/isos/x86_64/CentOS-7-x86_64-DVD-1804.torrent</li><li>完整版：Everything.iso 集成所有软件</li><li>桌面版：GnomeLive.iso</li><li>网络安装版：NetInstall-1804.iso</li><li>最小化版：Minimal-1804.iso</li></ul></li><li><p>配置CentOS固定IP</p><ul><li><p>查看网络配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/sysconfig/network-scripts</span><br></pre></td></tr></table></figure></li><li><p>查看当前网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure></li><li><p>编辑网络配置文件:ifcfg-[enp0网络名称]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">TYPE=Ethernet</span><br><span class="line">PROXY_METHOD=none</span><br><span class="line">BROWSER_ONLY=no</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV4_FAILURE_FATAL=no</span><br><span class="line">IPV6INIT=<span class="built_in">yes</span></span><br><span class="line">IPV6_AUTOCONF=<span class="built_in">yes</span></span><br><span class="line">IPV6_DEFROUTE=<span class="built_in">yes</span></span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=enp0s5</span><br><span class="line">UUID=628a5a09-999c-4667-9636-75340e6465ff</span><br><span class="line">DEVICE=enp0s5</span><br><span class="line">ONBOOT=<span class="built_in">yes</span></span><br><span class="line"></span><br><span class="line">IPADDR=10.211.55.201</span><br><span class="line">GATEWAY=10.211.55.1</span><br><span class="line">NETMASK=255.255.255.0</span><br></pre></td></tr></table></figure></li></ul></li><li><p>官网安装文档：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p></li><li><p>安装前准备</p><ul><li><p>检查CentOS 系统的内核版本（Docker 要求 CentOS 系统的内核版本高于 3.10 ）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">uname</span> -r</span><br></pre></td></tr></table></figure></li><li><p>使用 root 权限登录 Centos。确保 yum 包更新到最新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>CentOS 8的yum源已线下，需要添加如下配置</p><ol><li><p>运行以下命令备份之前的repo文件。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename <span class="string">&#x27;.repo&#x27;</span> <span class="string">&#x27;.repo.bak&#x27;</span> /etc/yum.repos.d/*.repo</span><br></pre></td></tr></table></figure></li><li><p>运行以下命令下载最新的repo文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.aliyun.com/repo/Centos-vault-8.5.2111.repo -O /etc/yum.repos.d/Centos-vault-8.5.2111.repo</span><br><span class="line">wget https://mirrors.aliyun.com/repo/epel-archive-8.repo -O /etc/yum.repos.d/epel-archive-8.repo</span><br></pre></td></tr></table></figure></li><li><p>运行以下命令替换repo文件中的链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/mirrors.cloud.aliyuncs.com/url_tmp/g&#x27;</span>  /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp;  sed -i <span class="string">&#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27;</span> /etc/yum.repos.d/Centos-vault-8.5.2111.repo &amp;&amp; sed -i <span class="string">&#x27;s/url_tmp/mirrors.aliyun.com/g&#x27;</span> /etc/yum.repos.d/Centos-vault-8.5.2111.repo</span><br><span class="line">sed -i <span class="string">&#x27;s/mirrors.aliyun.com/mirrors.cloud.aliyuncs.com/g&#x27;</span> /etc/yum.repos.d/epel-archive-8.repo</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://so.csdn.net/so/search?q=http&spm=1001.2101.3001.7020">http</a>://mirrors.cloud.aliyuncs.com需要替换为<a href="http://mirrors.aliyun.com，但是官方提供的命令没替换完，如果有执行官方提供的命令还是不行的话执行下面的命令：">http://mirrors.aliyun.com，但是官方提供的命令没替换完，如果有执行官方提供的命令还是不行的话执行下面的命令：</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/mirrors.cloud.aliyuncs.com/mirrors.aliyun.com/g&#x27;</span>  /etc/yum.repos.d/Centos-vault-8.5.2111.repo </span><br><span class="line">sed -i <span class="string">&#x27;s/mirrors.cloud.aliyuncs.com/mirrors.aliyun.com/g&#x27;</span>  /etc/yum.repos.d/epel-archive-8.repo</span><br></pre></td></tr></table></figure></blockquote></li><li><p>运行以下命令重新创建缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum clean all &amp;&amp; yum makecache</span><br></pre></td></tr></table></figure></li></ol></li></ul></blockquote></li><li><p>查看系统的Docker旧版信息，如果有旧版Docker，需要先卸载掉Docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看系统中已安装的Docker相关的yum包</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假设系统已安装Docker旧版,需要卸载掉旧版的安装新</span></span><br><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure></li><li><p>下载Docker安装的依赖环境：yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure></li><li><p>配置Docker的yum原为阿里云：默认镜像源网速慢</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li><li><p>我们在更新yum源或者出现配置yum源之后，通常都会使用yum makecache 生成缓存</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure></li></ul></li><li><p>安装Docker</p><ul><li><p>可以查看所有仓库中所有docker版本，并选择特定版本安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">yum list docker-ce --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line">yum list docker-ce.x86_64 --showduplicates | <span class="built_in">sort</span> -r</span><br><span class="line"></span><br><span class="line">已加载插件：fastestmirror, langpacks</span><br><span class="line">可安装的软件包</span><br><span class="line"> * updates: mirrors.aliyun.com</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * extras: mirrors.bfsu.edu.cn</span><br><span class="line">docker-ce.x86_64            18.06.2.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.1.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.06.0.ce-3.el7                    docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            18.03.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.12.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.09.0.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.2.ce-1.el7.centos             docker-ce-stable</span><br><span class="line">docker-ce.x86_64            17.06.1.ce-1.el7.centos             docker-ce-stable</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>安装Docker：若要安装指定版本，需要安装列表中版本信息中有centos标志的相关包，版本格式如下：中横线分开版本信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker-ce</span><br><span class="line">yum install -y docker-ce-18.03.1.ce-1.el7.centos</span><br></pre></td></tr></table></figure></li></ul></li><li><p>配置Docker容器镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">sudo <span class="built_in">tee</span> /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://84u6b78t.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure></li><li><p>修改配置后需要启动Docker并设置为开机启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-Windows系统安装"><a href="#2-Windows系统安装" class="headerlink" title="2. Windows系统安装"></a>2. Windows系统安装</h3><ul><li>官方安装文档下载安装包：<a href="https://docs.docker.com/desktop/windows/install/">https://docs.docker.com/desktop/windows/install/</a></li><li></li></ul><h3 id="3-Mac系统安装"><a href="#3-Mac系统安装" class="headerlink" title="3. Mac系统安装"></a>3. Mac系统安装</h3><ul><li>官网安装文档：<a href="https://docs.docker.com/docker-for-mac/install/">https://docs.docker.com/docker-for-mac/install/</a></li></ul><h3 id="4-Ubuntu系统安装"><a href="#4-Ubuntu系统安装" class="headerlink" title="4. Ubuntu系统安装"></a>4. Ubuntu系统安装</h3><ul><li>官网安装文档：<a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/">https://docs.docker.com/install/linux/docker-ce/ubuntu/</a></li></ul><h3 id="5-其他LInux系统"><a href="#5-其他LInux系统" class="headerlink" title="5 其他LInux系统"></a>5 其他LInux系统</h3><blockquote><p>Debian：<a href="https://docs.docker.com/install/linux/docker-ce/debian/">https://docs.docker.com/install/linux/docker-ce/debian/</a></p><p>Fedora：<a href="https://docs.docker.com/install/linux/docker-ce/fedora/">https://docs.docker.com/install/linux/docker-ce/fedora/</a></p><p>其他Linux 发行版：<a href="https://docs.docker.com/install/linux/docker-ce/binaries/">https://docs.docker.com/install/linux/docker-ce/binaries/</a></p></blockquote><h1 id="第二章-Docker基础指令"><a href="#第二章-Docker基础指令" class="headerlink" title="第二章 Docker基础指令"></a>第二章 Docker基础指令</h1><h2 id="2-1-DockerHub"><a href="#2-1-DockerHub" class="headerlink" title="2.1 DockerHub"></a>2.1 DockerHub</h2><ol><li><p>DockerHUB地址</p><ul><li>官网地址：<a href="https://registry.hub.docker.com/">https://registry.hub.docker.com/</a></li></ul></li><li><p>查看镜像并下载指定版本的软件镜像</p></li><li><p>Docker帮助启动指令</p><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>systemctl start docker</td><td>启动Docker服务</td></tr><tr><td>systemctl stop docker</td><td>停止Docker服务</td></tr><tr><td>systemctl restart docker</td><td>重启Docker服务</td></tr><tr><td>systemctl status docker</td><td>查看Docker服务状态</td></tr><tr><td>systemctl enable docker</td><td>设置Docker服务开机启动</td></tr><tr><td>docker info</td><td>查看Docker概要信息</td></tr><tr><td>docker –help</td><td>查看Docker帮助文档</td></tr><tr><td>docker 指令 –help</td><td>查看Docker指令帮助文档</td></tr></tbody></table></li></ol><h2 id="2-2-镜像"><a href="#2-2-镜像" class="headerlink" title="2.2 镜像"></a>2.2 镜像</h2><h3 id="1-镜像指令"><a href="#1-镜像指令" class="headerlink" title="1. 镜像指令"></a>1. 镜像指令</h3><blockquote><ul><li>虚悬镜像：仓库名、标签都是<code>&lt;none&gt;</code>的镜像</li></ul></blockquote><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>docker images</td><td>查看本地所有的镜像</td></tr><tr><td>docker search &lt;镜像名称&gt;</td><td>在Docker搜索镜像</td></tr><tr><td>docker pull 进行名称:版本号</td><td>从DockerHUB拉取镜像到本地</td></tr><tr><td>docker system df</td><td>查看镜像|容器|数据卷所占空间</td></tr><tr><td>docker rmi 镜像ID</td><td>删除镜像</td></tr></tbody></table><h3 id="2-docker-images"><a href="#2-docker-images" class="headerlink" title="2. docker images"></a>2. docker images</h3><ul><li><p>指令参数</p><table><thead><tr><th>指令选项</th><th>说明</th></tr></thead><tbody><tr><td>docker images -a</td><td>列出本地所有的镜像</td></tr><tr><td>docker images -q</td><td>只显示镜像ID</td></tr></tbody></table></li><li><p>指令结果说明</p><table><thead><tr><th>REPOSITORY</th><th>TAG</th><th>IMAGE ID</th><th>CREATED</th><th>SIZE</th></tr></thead><tbody><tr><td>仓库源</td><td>版本标签号:latest</td><td>镜像ID</td><td>镜像创建时间</td><td>镜像大小</td></tr></tbody></table></li></ul><h3 id="3-docker-search"><a href="#3-docker-search" class="headerlink" title="3. docker search"></a>3. docker search</h3><ul><li><p>指令参数</p><table><thead><tr><th>指令选项</th><th>说明</th></tr></thead><tbody><tr><td>docker search –limit 数量</td><td>指搜索关注数最多的前几个</td></tr></tbody></table></li><li><p>查询结果</p><table><thead><tr><th>NAME</th><th>DESCRIPTION</th><th>STARS</th><th>OFFICIAL</th><th>AUTOMATED</th></tr></thead><tbody><tr><td>名称</td><td>描述</td><td>被关注数</td><td>是否官方镜像</td><td>是否自动编译</td></tr></tbody></table></li></ul><h3 id="4-docker-system-df"><a href="#4-docker-system-df" class="headerlink" title="4. docker system df"></a>4. docker system df</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TYPE            TOTAL           ACTIVE          SIZE         RECLAIMABLE</span><br><span class="line">Images          1               0               112.7MB      112.7MB (100<span class="comment">%)</span></span><br><span class="line">Containers      0               0               0B           0B</span><br><span class="line">Local Volumes   0               0               0B           0B</span><br><span class="line">Build Cache                                     0B           0B</span><br></pre></td></tr></table></figure><h3 id="5-docker-rmi"><a href="#5-docker-rmi" class="headerlink" title="5. docker rmi"></a>5. docker rmi</h3><ul><li><p>指令参数</p><table><thead><tr><th>指令选项</th><th>说明</th></tr></thead><tbody><tr><td>docker rmi -f 镜像ID</td><td>强制删除</td></tr><tr><td>docker rmi 镜像ID</td><td>删除单个镜像</td></tr><tr><td>docker rmi 镜像A 镜像B</td><td>删除多个镜像</td></tr><tr><td>docker rmi $(docker images -qa)</td><td>在${}中执行命令,删除所有</td></tr></tbody></table></li><li><p>删除镜像注意事项</p><ul><li>正在运行容器的进行需要强制删除</li></ul></li></ul><h2 id="2-2-容器"><a href="#2-2-容器" class="headerlink" title="2.2 容器"></a>2.2 容器</h2><h3 id="1-容器指令"><a href="#1-容器指令" class="headerlink" title="1. 容器指令"></a>1. 容器指令</h3><table><thead><tr><th>指令</th><th>说明</th></tr></thead><tbody><tr><td>docker run 镜像标识</td><td>根据镜像名称、ID运行一个容器</td></tr><tr><td>docker ps</td><td>查看运行的容器信息</td></tr><tr><td>docker rm 容器ID</td><td>删除容器</td></tr><tr><td>docker start 容器ID</td><td>启动容器</td></tr><tr><td>docker stop 容器ID</td><td>停止容器</td></tr><tr><td>docker restart 容器ID</td><td>重启容器</td></tr><tr><td>docker inspect 容器ID</td><td>查看容器内部运行的进程</td></tr><tr><td>docker top 容器ID</td><td>查看容器内运行的进程</td></tr><tr><td>docker log 容器ID</td><td>查看容器的运行日志</td></tr><tr><td>docker exec  -it 容器ID /bin/bash</td><td>以交互的方式进入容器内部</td></tr></tbody></table><h3 id="2-docker-run"><a href="#2-docker-run" class="headerlink" title="2. docker run"></a>2. docker run</h3><ul><li><p>指令参数 </p><table><thead><tr><th>指令选项</th><th>说明</th></tr></thead><tbody><tr><td>docker run –name</td><td>为容器指定新的名称</td></tr><tr><td>docker run -d</td><td>后台运行容器并返回容器ID，即启动守护式容器</td></tr><tr><td>docker run -i</td><td>以交互式模式运行容器，一般与-t同时使用</td></tr><tr><td>docker run -t</td><td>为容器分配一个伪输入终端，一般与-t同时使用</td></tr><tr><td>docker run -P</td><td>（大写P）随机端口映射</td></tr><tr><td>docker run -p 宿主机端口:容器端口</td><td>指定端口映射</td></tr><tr><td>docker run -v 宿主机文件目录:容器文件目录</td><td>映射容器数据卷</td></tr></tbody></table></li><li><p>指令案例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行一个CentOS容器,并且交互式操作,/bin/bassh是指交互式的shell</span></span><br><span class="line">docker run -it centos /bin/bash</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-docker-ps"><a href="#3-docker-ps" class="headerlink" title="3. docker ps"></a>3. docker ps</h3><ul><li><p>指令选项</p><table><thead><tr><th>指令选项</th><th>说明</th></tr></thead><tbody><tr><td>docker ps -a</td><td>显示所有容器,包含已停止的容器</td></tr><tr><td>docker ps -l</td><td>显示最近创建的容器</td></tr><tr><td>docker ps -n</td><td>显示最近n个创建的容器</td></tr><tr><td>docker ps -q</td><td>静默模式：只显示容器ID</td></tr></tbody></table></li><li><p>显示结果</p><table><thead><tr><th>CONTAINER ID</th><th>IMAGE</th><th>COMMAND</th><th>CREATED</th><th>STATUS</th><th>PORTS</th><th>NAMES</th></tr></thead><tbody><tr><td>容器ID</td><td>所属镜像</td><td></td><td>创建时间</td><td>状态</td><td>端口</td><td>名称</td></tr></tbody></table></li></ul><h3 id="4-docker-inspect"><a href="#4-docker-inspect" class="headerlink" title="4. docker inspect"></a>4. docker inspect</h3><h3 id="5-docker-exec"><a href="#5-docker-exec" class="headerlink" title="5. docker exec"></a>5. docker exec</h3><h3 id="6-docker-log"><a href="#6-docker-log" class="headerlink" title="6. docker log"></a>6. docker log</h3><h1 id="第三章-容器数据卷"><a href="#第三章-容器数据卷" class="headerlink" title="第三章 容器数据卷"></a>第三章 容器数据卷</h1><h2 id="3-1-容器卷概述"><a href="#3-1-容器卷概述" class="headerlink" title="3.1 容器卷概述"></a>3.1 容器卷概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在Docker容器中产生的数据默认是保存在容器内部中，如果希望容器产生的数据实现持久化，需要将容器内的数据保存在宿主机中，否则删除容器也会将容器内的数据一并删除；目前Docker提供三种不同的方式将容器内数据挂载到宿主机中：</p><ul><li>volumes：数据卷，Docker挂历宿主机文件系统的一部分，默认位于<code>/var/lib/docker/volumes</code>，默认所有的Container数据都存在真个目录下下面，创建是时候没有指定卷，Docker会默认创建匿名卷；（<strong>常用方式</strong>）</li><li>bind mounts：意味着可以存储在宿主机系统的任意位置；但是bind moun在不同的宿主机时不可移植，比如Linux和WIndows的目录结构不同，bind mount所指向的host目录也不同；（<strong>不能出现在DockerFiles中</strong>）</li><li>tempfs：挂载存储在宿主机系统的内从中，通过<code>docker cp</code>命令复制到宿主机中，而不会直接写入宿主机的文件系统（<strong>一般不会使用</strong>）</li></ul><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>前提知识：CentOS安全模式版本被加强，目录挂载默认为不安全的，添加了数据权限保护，添加参数使容器拥有了root权限：需要添加参数<code>--privileged=true</code></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>容器数据卷：实现数据容器内数据的持久化，数据卷将宿主机的目录映射到容器内的目录中；默认创建的数据容器卷在宿主机的<code>/var/lib/docker/volumes/数据卷名称/_data</code>目录中，如果数据容器卷绑定容器目录后自动将容器内的文件复制出来：①数据卷可以在容器之间共享或重用数据②卷中更改可以直接实时生效③数据卷中更改不会包含在镜像的更新中④数据卷的生命周期移植持续到没有容器使用它为止</p><h2 id="3-2-数据卷管理"><a href="#3-2-数据卷管理" class="headerlink" title="3.2 数据卷管理"></a>3.2 数据卷管理</h2><ol><li><p>查看所以容器卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">ls</span></span><br></pre></td></tr></table></figure></li><li><p>创建一个自定义容器卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create edc-nginx-vol</span><br></pre></td></tr></table></figure></li><li><p>差点指定容器卷详情</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect edc-nginx-vol</span><br></pre></td></tr></table></figure></li><li><p>清理卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume <span class="built_in">rm</span> edc-nginx-vol </span><br></pre></td></tr></table></figure></li></ol><h2 id="3-3-数据卷挂载"><a href="#3-3-数据卷挂载" class="headerlink" title="3.3 数据卷挂载"></a>3.3 数据卷挂载</h2><ol><li><p>创建容器使用指定卷</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --name=edc-nginx -p 8800:80 -v edc-nginx-vol:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure></li><li><p>使用卷创建一个容器,如果没有会自动创建</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -it --name=edc-nginx -v /app/wwwroot:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure></li></ol><h1 id="第四章-Docker-File"><a href="#第四章-Docker-File" class="headerlink" title="第四章 Docker File"></a>第四章 Docker File</h1><h2 id="4-1-Dockfile介绍"><a href="#4-1-Dockfile介绍" class="headerlink" title="4.1 Dockfile介绍"></a>4.1 Dockfile介绍</h2><ol><li>什么是DockerFile<ul><li>是用来构建Docker镜像的文本文件，是由一条条构建镜像所需要的指令和参数构成的脚步；</li><li>DockerFiles的使用步骤：①编写DockerFIle文件②使用docker build指令将DockerFile构建为镜像③执行docker run指令将镜像运行为容器</li></ul></li><li>DockerFile构建<ul><li>DockerFile基本格式说明<ul><li>每条DockerFile保留字指令必须大写，并且后面最少跟一个参数</li><li>DockerFIle中指令是从上到下执行</li><li>DockerFile中的#表示单行注释</li><li>每条指令都会创建一个新的镜像层并对镜像进行commit</li></ul></li><li>通过DockerFile构建镜像的流程<ul><li>Docker从基础镜像运行（run）一个容器</li><li>执行RUN指令对容器进行修改</li><li>修改成功后执行类似commit的操作提交形成一个新的镜像</li><li>Docker在基于刚提交的镜像形成一个新的容器，然后继续执行后续指令，直到DockerFile执行完成</li></ul></li></ul></li><li>DockerFile的作用<ul><li>镜像的描述文件，可以用来帮助我们自己构建一个自定义镜像</li><li>可以将自己的应用打包为镜像，将应用使用容器的方式运行</li><li>Dockerfile构建镜像的原理：<strong>①</strong>在操作系统中定义一个目录<strong>②</strong>在目录中定义名称为Dockerfile的文件<strong>③</strong>执行docker build命令，Docker服务（Server）会将Dockerfile所在目录作为这次镜像的上下文目录，并且将上下文目录中的所有文件进行打包，Docker服务（Server）收到打包文件后会解析Dockerfile，根据Dockerfile中的指令构建镜像，每执行一条指令构建一个镜像（用户缓存正确的指令结果），执行完成后构成成最终镜像<strong>④</strong>使用–no-cache参数不使用缓存；</li></ul></li></ol><h2 id="4-2-Dockerfile保留字"><a href="#4-2-Dockerfile保留字" class="headerlink" title="4.2 Dockerfile保留字"></a>4.2 Dockerfile保留字</h2><table><thead><tr><th>指令</th><th>作用</th></tr></thead><tbody><tr><td>FROM</td><td>当前镜像是基于哪个镜像的，<strong>第一个指令必须指定</strong></td></tr><tr><td>MAINTAINER</td><td>镜像维护着的姓名和邮箱地址</td></tr><tr><td>RUN</td><td>构建镜像时需要运行的指令,有两种格式<br /> - shell格式：shell命令<br /> - exec格式：参数格式,如:RUN [“可执行文件”,”参数1”,”参数2”…]</td></tr><tr><td>EXPOST</td><td>当前容器对外暴露的端口号</td></tr><tr><td>WORKDIR</td><td>构建后的镜像运行为容器时候的登陆的工作目录</td></tr><tr><td>USER</td><td>指定该镜像用哪个用户执行，如果不指定，默认是root，一般不指定</td></tr><tr><td>ENV</td><td>用来构建镜像过程中设置环境变量</td></tr><tr><td>ADD</td><td>将宿主机加的文件拷贝进镜像且会自动处理URL和解压包</td></tr><tr><td>COPY</td><td>类似add，从构建上下文目录中的文件复制到新的一层镜像的目录位置</td></tr><tr><td>VOLUME</td><td>容器数据卷，用户数据保存和持久化</td></tr><tr><td>CMD</td><td>指定一个容器启动时需要运行的名<br />Dockerfile中可以定义多个CMD指令，但是只要最后一个会生效</td></tr><tr><td>ENTRYPOINT</td><td>记得一个容器启动时要运行的命令</td></tr></tbody></table><ol><li><p>FROM：构建自己的镜像是基于哪个镜像的，在构建时候回自动从docker hub拉取这个镜像作为base镜像，所以必须是Dockerfile的第一行指令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> Centos<span class="comment"># 默认会拉取最信版本的镜像</span></span><br><span class="line"><span class="keyword">FROM</span> Centos:<span class="number">7</span><span class="comment"># 拉取指定版本的镜像</span></span><br><span class="line"><span class="keyword">FROM</span> Centos@degst<span class="comment"># 使用镜像摘要</span></span><br></pre></td></tr></table></figure></li><li><p>RUN：构建镜像时候需要执行的命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y vim<span class="comment"># 运行安装vim编辑器</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> [<span class="string">&quot;yum&quot;</span>,<span class="string">&quot;install&quot;</span>,<span class="string">&quot;-y&quot;</span>,<span class="string">&quot;vim&quot;</span>]<span class="comment"># 命令的属性格式</span></span></span><br></pre></td></tr></table></figure></li><li><p>EXPOST：镜像运行时需要暴露的端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">EXPOST <span class="number">3306</span></span><br><span class="line">EXPOST </span><br></pre></td></tr></table></figure></li><li><p>WORKDIR：用来为Dockerfile值的任何RUN、CMD、ENDPOINT、COPY、ADD指令设置工作目录，如果WORKDIR不存在，即时它没有任何后续Dockerfile指令中使用，它也会被创建</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/workdir<span class="comment"># 如果不存在会自定创建</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> workdir<span class="comment"># 如果是相对路径,则改路径与先前WORKDIR指令的路径相对</span></span></span><br></pre></td></tr></table></figure></li><li><p>ADD：从上下文赋值新文件、目录或远程文件url，并将它们添加到指令路径的镜像文件系统中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> home/*/workdir<span class="comment"># 通配符添加多个文件</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> home-?.txt /workdir<span class="comment"># 通配符添加文件</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> home.txt workdir<span class="comment"># 拷贝文件到相对目录</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> home.tar workdir<span class="comment"># 拷贝文件到相对目录,并减压</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> url /workdir<span class="comment"># 远程下载文件到指定目录 </span></span></span><br></pre></td></tr></table></figure></li><li><p>COPY：用来将上下文中目录中指定文件复制到镜像的指定目录中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> home/*/workdir<span class="comment"># 通配符添加多个文件</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> home-?.txt /workdir<span class="comment"># 通配符添加文件</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> home.txt workdir<span class="comment"># 拷贝文件到相对目录</span></span></span><br></pre></td></tr></table></figure></li><li><p>VOLUME：定义容器运行时可以挂在到宿主机的目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/data&quot;</span>]</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /data/tomcat/webapps</span></span><br></pre></td></tr></table></figure></li><li><p>ENV：用来设置构建的环境变量，这个值将在构建阶段中所有后续指令的环境中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENV</span> key value<span class="comment"># 定义变量</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$KEY</span><span class="comment"># 使用变量</span></span></span><br></pre></td></tr></table></figure></li><li><p>ENTRYPOINT：运行容器后会执行的指令，如果docker指令需要覆盖ENTRYPOINT配置的命令，需要指定参数–entrypoint参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> <span class="built_in">ls</span> <span class="variable">$key</span>/webapps</span></span><br><span class="line">docker --<span class="keyword">entrypoint</span><span class="language-bash"> <span class="built_in">ls</span> /data<span class="comment"># 覆盖Dockerfile中的ls 并执行ls /data</span></span></span><br></pre></td></tr></table></figure></li><li><p>CMD：在docker run指令后执行的cmd指令会覆盖Dockerfile中的cmd指令，主要作用是配合ENTRYPOINT,必须使用过json格式的参数</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">ls</span> <span class="variable">$key</span>/webapp<span class="comment"># 执行指令</span></span></span><br><span class="line">docker ls /data<span class="comment"># docker命令后的ls会覆盖Dockerfile内的ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配合ENTRYPOINT使用，必须使用过json格式的参数</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;ls&quot;</span>]<span class="comment"># ENTRYPOINT 只需要指令命令或为命令指定默认参数，</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash">  [<span class="string">&quot;/data/bb&quot;</span>]<span class="comment"># cmd指令覆盖ENTRYPOINT参数，然后docker指令后覆盖CMD的命令，如果不覆盖会执行CMD命令</span></span></span><br></pre></td></tr></table></figure></li></ol><ul><li><p>构建镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t 自定义镜像名称:镜像版本 .(表示当前目录)</span><br></pre></td></tr></table></figure></li><li><p>案例：①开发SpringBoot应用②定义Dockerfile和jar在同一目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span>-jdk</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> x.jar app.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8081</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-DockerFile实战"><a href="#4-3-DockerFile实战" class="headerlink" title="4.3 DockerFile实战"></a>4.3 DockerFile实战</h2><h1 id="第五章-Docker-Compose"><a href="#第五章-Docker-Compose" class="headerlink" title="第五章 Docker Compose"></a>第五章 Docker Compose</h1><h2 id="5-1-Docker-Compose概述"><a href="#5-1-Docker-Compose概述" class="headerlink" title="5.1 Docker Compose概述"></a>5.1 Docker Compose概述</h2><ul><li>Compose项目上Docker官方的开源项目：负责实现对Docker集群的快速编排；（解释一下为什么需要容器编排：使用dokerfile可以额方便的定义一饿单独的应用容器，但是在日常工作中，经常是多个容器相互配合，并且有时候还需要容器间按顺序启动，使用docker compose就可以满足这样的需求）</li><li>Compose定位：定义和运行多个Docker容器的应用，允许用户通过单独的docker-compose.yml模版文件来定义一组相关联的容器作为一个项目。但是Compose做不到特别复杂的工作：如容器的资源调度，由k8s解决；</li><li>Compose中有两个重要概念<ol><li>服务（Service）：一个应用的容器，服务可以存在多个；</li><li>项目（Project）：由一组关联应用容器组成的一个完整的业务单元，在docker-copose.yml中定义（可以理解为一个配置文件代表一个项目）</li></ol></li></ul><h2 id="5-2-Docker-Compose安装"><a href="#5-2-Docker-Compose安装" class="headerlink" title="5.2 Docker Compose安装"></a>5.2 Docker Compose安装</h2><h3 id="1-Windows系统"><a href="#1-Windows系统" class="headerlink" title="1. Windows系统"></a>1. Windows系统</h3><ul><li>DockerDesktop自带docker-compose</li></ul><h3 id="2-Mac系统"><a href="#2-Mac系统" class="headerlink" title="2. Mac系统"></a>2. Mac系统</h3><ul><li>DockerDesktop自带docker-compose</li></ul><h3 id="3-Linux系统"><a href="#3-Linux系统" class="headerlink" title="3. Linux系统"></a>3. Linux系统</h3><ul><li><p><strong>安装compose方式一</strong></p><ol><li><p>下载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Github官网</span></span><br><span class="line">sudo curl -L https://github.com/docker/compose/releases/download/。。。 /docker-compose-`<span class="built_in">uname</span> -s`-`<span class="built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内下载地址</span></span><br><span class="line">https://get.daocloud.io/<span class="comment">#install-compose</span></span><br></pre></td></tr></table></figure></li><li><p>安装：是个shell脚本，需要修改下载的文件的执行权限s</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>安装compose方式二</strong></p><ol><li><p>安装pip</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum -y install python-pip</span><br><span class="line"></span><br><span class="line">pip --version</span><br></pre></td></tr></table></figure></li><li><p>更新pip</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip</span><br></pre></td></tr></table></figure></li><li><p>安装docker-compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install docker-compose </span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="5-3-Docker-Compose语法"><a href="#5-3-Docker-Compose语法" class="headerlink" title="5.3 Docker Compose语法"></a>5.3 Docker Compose语法</h2><ol><li><p>docker-compose使用方式：由于一个docker-compose.yml是一个项目，约定文件名称固定，便于区分，需要将配置文件定义在单独的目录中，将这个文件作为项目；</p></li><li><p>基本语法</p><ul><li><p>version：必须指定，说明项目的版本</p></li><li><p>services：一个配置文件中可以定义多个服务（service），是在这个services的配置项之下；</p></li><li><p>services.&lt;服务名&gt;：服务名称不能重复</p></li><li><p>services.&lt;服务名&gt;.container_name：相当于<code>run --name</code>；容器之间通信可以使用这个名称进行通信</p></li><li><p>services.&lt;服务名&gt;.image：当前服务所要使用的镜像，如果镜像不存在会从docker hub拉取，说明镜像和版本</p></li><li><p>services.&lt;服务名&gt;.ports：数组，用于映射端口，host与容器的端口映射，建议使用字符串</p></li><li><p>services.&lt;服务名&gt;.volumes：数组，宿主机和容器数据卷映射，或者容器卷名和容器路径 ；</p></li><li><p>services.&lt;服务名&gt;. networks：指定当前服务使用的网络桥，同一个网络桥的服务可以相互通信</p></li><li><p>services.&lt;服务名&gt;.environment：设置环境变量，可以使用数组可字典两种形式</p></li><li><p>services.&lt;服务名&gt;.env_file：用于替换environment，可以是相对路径或绝对路径；环境变量可以定义再指定配置文件中，配置文件必须是<code>.env</code>文件，配置文件中配置格式：key=value；</p></li><li><p>services.&lt;服务名&gt;：</p><ul><li>build：启动服务时，先将build命令中指定的docker-file打包为镜像然后运行该镜像<ul><li>context：指定上下文目录，是指docker-file所在的目录，相对于yaml文件的目录或绝对路径；</li><li>dockerfile：指定dockerfile文件名称；</li></ul></li></ul></li><li><p>services.&lt;服务名&gt;.command：覆盖容器启动后默认执行的命令</p></li><li><p>services.&lt;服务名&gt;.depends_on：解决容器依赖的顺序，代表这个容器的启动必须依赖其他容器，在其他容器启动到一定程度后就会启动，是个数组，可以指定多个服务名；</p></li><li><p>services.&lt;服务名&gt;.healthcheck：检测容器是否允许健康</p><ul><li>test：[“CMD”， “curl”， “-f”， “检查的URL”]</li><li>interval：检查间隔时间</li><li>timeout：超时时间</li><li>retries：重试次数</li></ul></li><li><p>services.&lt;服务名&gt;.sysctls：修改容器内核参数</p></li><li><p>services.&lt;服务名&gt;.ulimts：指定容器的ulimits限制值，修改容器系统内部进程最大限制</p><ul><li>nproc：进程数 </li><li>nofile：<ul><li>soft：</li><li>hard：</li></ul></li></ul></li><li><p>volumes：用于声明容器卷，<code>run -v</code></p></li><li><p>volumes.&lt;容器卷名称&gt;：定义服务中使用到的容器卷名称</p></li><li><p>volumes.&lt;容器卷名称&gt;.external.true|false：否使用指定的容器卷，如果没有需要提前创建好</p></li><li><p>network：定义服务中用到的网桥，默认创建的是bridge，同一个网桥的服务可以相互通信  </p></li><li><p>network.&lt;网桥名称&gt;：同一个网桥名称服务可以相互通信</p></li><li><p>network.&lt;网桥名称&gt;.external.true|false：否使用外部指定的网桥，如果没有需要提前创建好</p></li><li><p>使用docker-compose命令执行配置文件：要求执行命令的目录必须要有一个docker-compose.yml文件</p><table><thead><tr><th>docker-compose选项</th><th>说明</th></tr></thead><tbody><tr><td>-f、–file</td><td>默认启动文件名称docker-compose.yaml<br />-f &lt;文件名&gt;：指定启动文件</td></tr><tr><td>-p</td><td>指定项目的名称，默认用目录名当作项目名称</td></tr><tr><td>-v</td><td>显示版本信息</td></tr><tr><td><strong>docker-compose参数</strong></td><td><strong>说明</strong></td></tr><tr><td>images</td><td>列出镜像列表</td></tr><tr><td>top</td><td>查看项目中进程信息</td></tr><tr><td>logs</td><td>查看项目中日志信息</td></tr><tr><td>ps</td><td>列出项目中目前所有容器</td></tr><tr><td>up [serviceId]</td><td>创建并启动所有容器或指定容器<br />-d：容器后台运行</td></tr><tr><td>exec [serviceId] bash</td><td>进入到项目中指定容器，并使用bash命令</td></tr><tr><td>down</td><td>停止up命令所启动的容器，并移除网络</td></tr><tr><td>stop [serviceId]</td><td>停止项目中的服务，不会移除网络</td></tr><tr><td>start [serviceId]</td><td>启动项目中的服务</td></tr><tr><td>restart [serviceId]</td><td>重启项目中的服务</td></tr><tr><td>rm [serviceId]</td><td>删除项目中的某个服务<br /> -f：强制删除<br /> -v：删除服务并删除数据卷</td></tr><tr><td>pause [serviceId]</td><td>暂停项目中的服务</td></tr><tr><td>unpause [serviceId]</td><td>恢复项目中暂停的服务</td></tr></tbody></table></li></ul></li></ol><h2 id="5-4-Docker-Compose案例"><a href="#5-4-Docker-Compose案例" class="headerlink" title="5.4 Docker Compose案例"></a>5.4 Docker Compose案例</h2><ul><li><p>案例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="string">&lt;服务名：如tomcat&gt;:</span> </span><br><span class="line"><span class="attr">image:</span> <span class="string">tomcat:8.0-jre8</span></span><br><span class="line"><span class="attr">ports:</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">宿主机路径:容器路径</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">容器卷名称（必须在容器中声明容器卷名称）:容器路径</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="attr">ENV:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">ENV=DEV</span></span><br><span class="line"><span class="attr">command:</span> <span class="string">&quot;redis-server --appendonly yes&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="string">容器卷名称:</span> <span class="string">&lt;宿主机路径&gt;声明指定的卷名，compose自动创建容器卷但是会新增项目名称</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">    <span class="attr">false:</span> <span class="string">是否使用指定的容器卷，如果没有需要提前创建好</span></span><br></pre></td></tr></table></figure><blockquote><ol><li>version：</li><li>services：表示可以定义多个服务</li><li>services.服务名称：表示定义再服务下的一个服务，服务名唯一</li><li>services.服务名称.image：表示这个服务所需要的镜像</li><li>services.服务名称.ports：端口映射数组，服务内可能有多个端口，可以配置多个端口映射，每个映射项使用双引号，防止数字可冒号解析异常</li><li>services.服务名称.volumes：容器数据卷配置</li><li>volumes：容器卷数组，每个配置项的key是容器卷名称，value是宿主机路径</li></ol></blockquote></li></ul><h1 id="第六章-镜像发布"><a href="#第六章-镜像发布" class="headerlink" title="第六章 镜像发布"></a>第六章 镜像发布</h1><ul><li><p>Compose项目上Docker官方的开源项目，负责实现对Docker容器集群的快速编排。</p></li><li><p>运行一个Docker镜像,需要大量的参数,可以通过Docker-Compose编写这些参数,可以批量管理容器,只需要通过docker-compose.yml文件维护</p><ol><li><p>下载docker-compose:github - docker/compose</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/docker/compose/releases</span><br></pre></td></tr></table></figure></li><li><p>文件名称和权限修改为可执行文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 777 xxx</span><br></pre></td></tr></table></figure></li><li><p>docker-compose.yml文件说明</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="attr">mysql:</span> <span class="comment"># 自定义的名称,要管理的服务</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">aways</span> <span class="comment"># Docker启动,容器随着启动</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment"># 镜像位置</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="comment"># docker ps看到的容器名称</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">        <span class="attr">environment:</span><span class="comment"># 指定环境变量</span></span><br><span class="line">        <span class="string">属性名:</span> <span class="string">属性值</span></span><br><span class="line">        <span class="string">属性名:</span> <span class="string">属性值</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">宿主机路径:容器路径</span></span><br></pre></td></tr></table></figure></li><li><p>命令说明:在当前目录中寻找docker-compose.yml文件</p><ul><li>基于docker-compose.yml启动管理的容器:docker-compose up -d</li><li>关闭并删除容器:docker-compose down</li><li>docker-compose start | stop | restart</li><li>docker-compose ps</li><li>docker-compose logs -f</li></ul></li></ol></li></ul><h2 id="7-3-compose-amp-file"><a href="#7-3-compose-amp-file" class="headerlink" title="7.3 compose&amp;file"></a>7.3 compose&amp;file</h2><ul><li><p>使用docker-compose.yml文件以及dockerFile文件在生成自定义镜像的同时启动当前镜像并由docker-compose管理容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.1&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line"><span class="attr">mysql:</span> <span class="comment"># 自定义的名称,要管理的服务</span></span><br><span class="line"><span class="attr">restart:</span> <span class="string">aways</span> <span class="comment"># Docker启动,容器随着启动</span></span><br><span class="line">        <span class="attr">build:</span> <span class="comment"># 构建自定义镜像</span></span><br><span class="line">        <span class="attr">context:</span> <span class="comment"># dockerFile文件路径</span></span><br><span class="line">        <span class="attr">dockerfile:</span> <span class="comment"># 指定DockerFile名称</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="comment"># docker ps看到的容器名称</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">镜像名:[tag]</span>  <span class="comment"># build的镜像的名称</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="number">3306</span><span class="string">:3306</span></span><br><span class="line">        <span class="attr">environment:</span><span class="comment"># 指定环境变量</span></span><br><span class="line">        <span class="string">属性名:</span> <span class="string">属性值</span></span><br><span class="line">        <span class="string">属性名:</span> <span class="string">属性值</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">宿主机路径:容器路径</span></span><br></pre></td></tr></table></figure></li><li><p>使用docker-copose 执行yml:如果镜像不存在会构建镜像, docker-compose build 构建镜像</p></li><li><p>运行钱重新构建:docker-compose up -d build</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Docker基础&quot;&gt;&lt;a href=&quot;#第一章-Docker基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 Docker基础&quot;&gt;&lt;/a&gt;第一章 Docker基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-Docker概述&quot;&gt;&lt;a href=&quot;#1
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>0801-ElasticStack</title>
    <link href="http://yoursite.com/2008/01/01/0801-ElasticStack/"/>
    <id>http://yoursite.com/2008/01/01/0801-ElasticStack/</id>
    <published>2007-12-31T16:01:00.000Z</published>
    <updated>2022-05-16T14:09:42.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ElasticSearch是基于ApacheLucene的开源搜索引擎，Lucene可以被认为迄今为止最先进、性能最好、功能最全的搜索引擎库；但是Lucene是Java语法开发，并且非常复杂，需要对其工作原理要有深入理解；ElasticSearch也使用Java开发并使用Lucene来实现核心功能：分布式索引和搜索功能；ElasticSearch通过RESTful API来隐藏Lucene的复杂性，实现搜索引擎的高可用。</p><h2 id="ELK"><a href="#ELK" class="headerlink" title="ELK"></a>ELK</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ELK是Elasticsearch、Kibana、Logstash三个技术的组合，组合使用可以解决大部分软件开发中的日志分析与处理工作，能够安全可靠地获取任何来源、任何格式的数据，并且能够实时地对数据进行搜索、分析和可视化；其中，Logstash负责数据的收集，Kibana负责结果数据的可视化展现，Elasticsearch作为核心部分用于数据的分布式存储以及索引。</p><h2 id="ElasticStack"><a href="#ElasticStack" class="headerlink" title="ElasticStack"></a>ElasticStack</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ElasticStack表示ES技术栈，在ELK的基础设基础上新增了Beats技术成员，所以ELK重新改名为ElasticStack；ElasticStack的基本工作流程如下图:</p><ol><li>Beats将采集的各种数据发送到ElasticSearch或交给LogStash进行数据处理</li><li>Logstash的主要作用是做数据处理工作</li><li>ElasticSearch主要是保存数据</li><li>最终Kibana连接ElasticSearch将数据可视化展示</li></ol><p><img src="https://s1.ax1x.com/2020/04/08/GfcENQ.png" alt="GfcENQ.png"></p><ol><li><strong>ElasticSearch</strong>：是使用Java语言编写的并且基于Lucene编写的搜索引擎框架，主要特点是：分布式，零配置，自动发现，索引自动分片，索引副本机制，RESTful风格接口，多数据源，自动搜索负载等。核心技术是倒排索引：在ElasticSrearch中数据存储在索引中，ElasticSearch会根据索引中的数据进行分词保存在分词库中；当需要检索数据时候，首先会根据检索关键字在分词库中检索出索引ID，再根据检索的索引ID去索引中直接查找对应的数据；<ul><li>Lucene：本身就是一个搜索引擎的底层；</li><li>Slor：查询死数据时候，速度相对ES而言Slor更快一些，如果数据实时改变的，Slor速度会受很大影响；ES集群更容易搭建；</li><li>分布式：主要是体现在横向扩展能力；</li></ul></li><li><strong>LogStash</strong>：基于Java，是一个开源的用于收集、分析和储存日志的工具</li><li><strong>Kibana</strong>：基于Node，Kibna可以为LogStash和ElasticSearch提供友好的web界面，可以汇总，分析，搜索重要数据</li><li><strong>Beats</strong>：是elastic公司开源的一款采集系统监控数据的agent，是在被监控的服务器上以客户端的形式运行的数据收集器统称，可以直接把数据发送给ElasticSearch或者通过LogStash发送给ElasticSearch，然后进行后续的数据分析活动。Beat主要的组成：<ul><li><strong>Packetbeat</strong>：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器直接的流量，解析应用层协议，并关联到消息的处理，支持ICMP（IPV4 and IPV6）、DNS、HTTP、MySql、Redis、PostgrpreSQL、MongoDB等协议</li><li><strong>Filebeat</strong>：用于监控收集服务器日志文件，以取代logstash forwarder</li><li><strong>Metricbeat</strong>：可定期获取外部系统监控指标信息，其可以监控收集Apache、HAProxy、MongoDB、MySql、Nginx、Redis、PostgrpreSQL、Redis、System、ZooKeeper等服务</li><li><strong>Winlogbeat</strong>：用于监控收集Windows的日志信息。</li></ul></li></ol><h1 id="第一部分-ElasticSearch"><a href="#第一部分-ElasticSearch" class="headerlink" title="第一部分 ElasticSearch"></a>第一部分 ElasticSearch</h1><h2 id="第一章-ES入门"><a href="#第一章-ES入门" class="headerlink" title="第一章 ES入门"></a>第一章 ES入门</h2><h3 id="1-1-单机版安装"><a href="#1-1-单机版安装" class="headerlink" title="1.1 单机版安装"></a>1.1 单机版安装</h3><h4 id="1-Windows系统"><a href="#1-Windows系统" class="headerlink" title="1. Windows系统"></a>1. Windows系统</h4><ul><li>下载ElasticSearch：<code>https://www.elastic.co/cn/downloads/elasticsearch</code></li><li>解压下载安装包到指定目录</li><li>执行es软件包中进入/bin目录：启动elasticsearch.bat脚本文件</li><li>测试访问：<code>http://localhost:9200/</code></li></ul><h4 id="2-Mac系统"><a href="#2-Mac系统" class="headerlink" title="2. Mac系统"></a>2. Mac系统</h4><h4 id="3-Linux系统"><a href="#3-Linux系统" class="headerlink" title="3. Linux系统"></a>3. Linux系统</h4><ul><li><p>下载Elastic安装包并解压到软件目录：<code>https://www.elastic.co/cn/downloads/elasticsearch</code></p></li><li><p><strong>环境准备</strong></p><ul><li><p>删除CentOS中预安装的Java</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep java</span><br><span class="line">rpm -e --nodeps xxx</span><br></pre></td></tr></table></figure></li><li><p>安装ElasticSearch对应的JDK</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/opt/jdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar </span><br></pre></td></tr></table></figure></li><li><p>创建ElasticSearch用户：因为ElasticSearch默认不支持root用于运行，所以ElasticSearch需要单独创建用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd elsearch</span><br></pre></td></tr></table></figure></li><li><p>新建ElasticSearch的安装目录，安装目录自定义，这里是安装在opt中是search目录中，并上传ElasticSearch的安装包并解压到search目录中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line"><span class="built_in">mkdir</span> search</span><br><span class="line"><span class="built_in">chown</span> elsearch:elsearch search/ -R</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>修改系统配置</strong></p><ul><li><p>配置系统的内存一个进程在VMAS（虚拟内存）创建内存映射的最大数量：<strong>需要使用root用户进行操作</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf<span class="comment"># 编辑配置文件,修改此文件需要重启Linux服务器</span></span><br><span class="line">vm.max_map_count=655360<span class="comment"># 修改内存最大映射数量</span></span><br><span class="line">sysctl -p <span class="comment"># 查看配置后的信息</span></span><br></pre></td></tr></table></figure></li><li><p>修改最大文件描述以满足ELasticSearch：max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]；*号的位置标示支持的用户名称，*号匹配所有用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.conf</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;&gt;追加 * 号表示所有用户</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft <span class="built_in">nproc</span> 2048</span><br><span class="line">* hard <span class="built_in">nproc</span> 4096</span><br></pre></td></tr></table></figure></li><li><p>默认进程中的线程数2014太低 最少是4096：max number of threads [3756] for user [elsearch] is too low, increase to at least [4096]</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.d/20-nproc.conf</span><br><span class="line"><span class="comment"># &gt;&gt;&gt;&gt;修改</span></span><br><span class="line">*          soft    <span class="built_in">nproc</span>     4096</span><br></pre></td></tr></table></figure></li><li><p>开启ElasticSearch端口：9200</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=9200/tcp --permanent </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>修改ElasticSearch的安装的用户所属并切换到elsearch用户：在启动后ElasticSearch生成的日志相关文件所属也是root用户，需要将这些文件也修改为新建的elsearch（非root用户）的所属；</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> elsearch:elsearch -R /opt/search</span><br><span class="line">su - elsearch</span><br></pre></td></tr></table></figure></li><li><p>用elsearch（非root用户）用户启动ElasticSearch服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /bin</span><br><span class="line">./elasticsearch<span class="comment"># 前台启动</span></span><br><span class="line">./elasticsearch &amp;  <span class="comment"># 后台启动</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>ElasticSearch配置文件说明</strong>：在/opt/search/config/目录中的相关文件</p><ul><li><p><strong>elasticsearch.yml</strong>：ElasticSearch的启动配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line"><span class="comment">#cluster.name: my-application</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment"># 节点名称:</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment"># 节点自定义属性:</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment"># 存储数据的目录,多个路径用逗号分隔:</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment"># 日志文件目录:</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment"># 启动时是否锁定内存:</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment"># 将绑定地址设置为特定的IP (IPv4或IPv6) 0 任意端口可以访问</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 为HTTP设置自定义端口:</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#当这个节点启动时，传递一个初始的主机列表来执行发现: 默认的主机列表是[&quot;127.0.0.1&quot;，&quot;[::1]&quot;]</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span></span><br><span class="line"><span class="comment"># 使用主节点的初始集合引导集群:</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;node-1&quot;</span>]</span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment"># 在整个集群重新启动后阻塞初始恢复，直到N个节点启动:</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment"># 删除索引时要求显式名称:</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br></pre></td></tr></table></figure></li><li><p><strong>jvm.options</strong>：ElasticSearch是基于Java开发，jvm.options用于设置ElasticSearch运行时jvm环境相关配置；ElasticSearch中的host配置不是localhost或127.0.0.1会被认为是生产环境，会多ElasticSearch启动要求比较高；</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Xms 表示总的堆空间的初始大小</span></span><br><span class="line"><span class="comment"># Xmx 表示堆空间的最大大小</span></span><br><span class="line"><span class="attr">-Xms128m</span></span><br><span class="line"><span class="attr">-Xmx128m</span></span><br></pre></td></tr></table></figure></li><li><p>log4j2.properties</p></li></ul></li><li><p>启动ElasticSearch：安装包/bin目录中执行启动脚本，测试ES服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:9200</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-Docker命令行"><a href="#4-Docker命令行" class="headerlink" title="4. Docker命令行"></a>4. Docker命令行</h4><ul><li><p>使用Docker命令行安装</p><ul><li><p>下载ElasticSearch镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:8.0.1</span><br></pre></td></tr></table></figure></li><li><p>将镜像中的配置文件备份到宿主机中的config目录中</p></li><li><p>使用命令行安装docker：①需要准备好宿主机中config中的配置文件②修改下面命令行中的数据集容器卷路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name es801 \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-v ~/source_docker/es/data:/usr/share/elasticsearch/data \</span><br><span class="line">-v ~/source_docker/es/config:/usr/share/elasticsearch/config \</span><br><span class="line">-v ~/source_docker/es/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">-v ~/source_docker/es/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">-e ES_JAVA_OPTS=<span class="string">&quot;-Xms64m -Xmx512m&quot;</span> \</span><br><span class="line">-e <span class="string">&quot;discovery.type=single-node&quot;</span> elasticsearch:8.0.1</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="5-DockerFile安装"><a href="#5-DockerFile安装" class="headerlink" title="5. DockerFile安装"></a>5. DockerFile安装</h4><h4 id="6-DockerCompose安装"><a href="#6-DockerCompose安装" class="headerlink" title="6. DockerCompose安装"></a>6. DockerCompose安装</h4><ul><li><p>使用Docker命令下载镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull elasticsearch:8.2.0</span><br><span class="line">docker pull kibana:8.2.0</span><br><span class="line">docker pull elasticsearch:7.17.3</span><br><span class="line">docker pull kibana:7.17.3</span><br></pre></td></tr></table></figure></li><li><p>初始化DockerCompose安装目录</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ElasticSearch8/</span><br><span class="line">es8/</span><br><span class="line">/data/</span><br><span class="line">/logs/</span><br><span class="line">/config/</span><br><span class="line">/elasticsearch.yml</span><br><span class="line">/jvm.options</span><br><span class="line">/log4j2.properties</span><br><span class="line">kibana/</span><br><span class="line">config/kibana.yml</span><br></pre></td></tr></table></figure></li><li><p>准备配置文件：elasticsearch.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment"># 集群名称</span></span><br><span class="line"><span class="comment">#cluster.name: my-application</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment"># 节点名称:</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node-1</span></span><br><span class="line"><span class="comment"># 节点自定义属性:</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment"># 存储数据的目录,多个路径用逗号分隔:</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment"># 日志文件目录:</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment"># 启动时是否锁定内存:</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment"># 将绑定地址设置为特定的IP (IPv4或IPv6) 0 任意端口可以访问</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># 为HTTP设置自定义端口:</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#当这个节点启动时，传递一个初始的主机列表来执行发现: 默认的主机列表是[&quot;127.0.0.1&quot;，&quot;[::1]&quot;]</span></span><br><span class="line"><span class="comment">#discovery.seed_hosts: [&quot;host1&quot;, &quot;host2&quot;]</span></span><br><span class="line"><span class="comment"># 使用主节点的初始集合引导集群:</span></span><br><span class="line"><span class="comment"># cluster.initial_master_nodes: [&quot;node-1&quot;]</span></span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment"># 在整个集群重新启动后阻塞初始恢复，直到N个节点启动:</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment"># 删除索引时要求显式名称:</span></span><br><span class="line"><span class="comment">#action.destructive_requires_name: true</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>启动需要JVM配置文件：jvm.options</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## GC configuration</span></span><br><span class="line"><span class="attr">8-13</span>:<span class="string">-XX:+UseConcMarkSweepGC</span></span><br><span class="line"><span class="attr">8-13</span>:<span class="string">-XX:CMSInitiatingOccupancyFraction=75</span></span><br><span class="line"><span class="attr">8-13</span>:<span class="string">-XX:+UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## G1GC Configuration</span></span><br><span class="line"><span class="comment"># to use G1GC, uncomment the next two lines and update the version on the</span></span><br><span class="line"><span class="comment"># following three lines to your version of the JDK</span></span><br><span class="line"><span class="comment"># 8-13:-XX:-UseConcMarkSweepGC</span></span><br><span class="line"><span class="comment"># 8-13:-XX:-UseCMSInitiatingOccupancyOnly</span></span><br><span class="line"><span class="attr">14-</span>:<span class="string">-XX:+UseG1GC</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## JVM temporary directory</span></span><br><span class="line"><span class="attr">-Djava.io.tmpdir</span>=<span class="string">$&#123;ES_TMPDIR&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## heap dumps</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># generate a heap dump when an allocation from the Java heap fails; heap dumps</span></span><br><span class="line"><span class="comment"># are created in the working directory of the JVM unless an alternative path is</span></span><br><span class="line"><span class="comment"># specified</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">+HeapDumpOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># exit right after heap dump on out of memory error. Recommended to also use</span></span><br><span class="line"><span class="comment"># on java 8 for supported versions (8u92+).</span></span><br><span class="line"><span class="attr">9-</span>:<span class="string">-XX:+ExitOnOutOfMemoryError</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># specify an alternative path for heap dumps; ensure the directory exists and</span></span><br><span class="line"><span class="comment"># has sufficient space</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">HeapDumpPath=data</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># specify an alternative path for JVM fatal error logs</span></span><br><span class="line"><span class="attr">-XX</span>:<span class="string">ErrorFile=logs/hs_err_pid%p.log</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## GC logging</span></span><br><span class="line"><span class="attr">-Xlog</span>:<span class="string">gc*,gc+age=trace,safepoint:file=logs/gc.log:utctime,pid,tags:filecount=32,filesize=64m</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>log4j2.properties：安装包默认的log4j2日志文件</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">status</span> = <span class="string">error</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.console.type</span> = <span class="string">Console</span></span><br><span class="line"><span class="attr">appender.console.name</span> = <span class="string">console</span></span><br><span class="line"><span class="attr">appender.console.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"><span class="attr">appender.console.layout.pattern</span> = <span class="string">[%d&#123;ISO8601&#125;][%-5p][%-25c&#123;1.&#125;] [%node_name]%marker %m%n</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######## Server JSON ############################</span></span><br><span class="line"><span class="attr">appender.rolling.type</span> = <span class="string">RollingFile</span></span><br><span class="line"><span class="attr">appender.rolling.name</span> = <span class="string">rolling</span></span><br><span class="line"><span class="attr">appender.rolling.fileName</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_server.json</span></span><br><span class="line"><span class="attr">appender.rolling.layout.type</span> = <span class="string">ECSJsonLayout</span></span><br><span class="line"><span class="attr">appender.rolling.layout.dataset</span> = <span class="string">elasticsearch.server</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.rolling.filePattern</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.json.gz</span></span><br><span class="line"><span class="attr">appender.rolling.policies.type</span> = <span class="string">Policies</span></span><br><span class="line"><span class="attr">appender.rolling.policies.time.type</span> = <span class="string">TimeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.rolling.policies.time.interval</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">appender.rolling.policies.time.modulate</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">appender.rolling.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.rolling.policies.size.size</span> = <span class="string">128MB</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.fileIndex</span> = <span class="string">nomax</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.action.type</span> = <span class="string">Delete</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.action.basepath</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.action.condition.type</span> = <span class="string">IfFileName</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.action.condition.glob</span> = <span class="string">$&#123;sys:es.logs.cluster_name&#125;-*</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.action.condition.nested_condition.type</span> = <span class="string">IfAccumulatedFileSize</span></span><br><span class="line"><span class="attr">appender.rolling.strategy.action.condition.nested_condition.exceeds</span> = <span class="string">2GB</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"><span class="comment">######## Server -  old style pattern ###########</span></span><br><span class="line"><span class="attr">appender.rolling_old.type</span> = <span class="string">RollingFile</span></span><br><span class="line"><span class="attr">appender.rolling_old.name</span> = <span class="string">rolling_old</span></span><br><span class="line"><span class="attr">appender.rolling_old.fileName</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;.log</span></span><br><span class="line"><span class="attr">appender.rolling_old.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"><span class="attr">appender.rolling_old.layout.pattern</span> = <span class="string">[%d&#123;ISO8601&#125;][%-5p][%-25c&#123;1.&#125;] [%node_name]%marker %m%n</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.rolling_old.filePattern</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log.gz</span></span><br><span class="line"><span class="attr">appender.rolling_old.policies.type</span> = <span class="string">Policies</span></span><br><span class="line"><span class="attr">appender.rolling_old.policies.time.type</span> = <span class="string">TimeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.rolling_old.policies.time.interval</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">appender.rolling_old.policies.time.modulate</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">appender.rolling_old.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.rolling_old.policies.size.size</span> = <span class="string">128MB</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.fileIndex</span> = <span class="string">nomax</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.action.type</span> = <span class="string">Delete</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.action.basepath</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.action.condition.type</span> = <span class="string">IfFileName</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.action.condition.glob</span> = <span class="string">$&#123;sys:es.logs.cluster_name&#125;-*</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.action.condition.nested_condition.type</span> = <span class="string">IfAccumulatedFileSize</span></span><br><span class="line"><span class="attr">appender.rolling_old.strategy.action.condition.nested_condition.exceeds</span> = <span class="string">2GB</span></span><br><span class="line"><span class="comment">################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">rootLogger.level</span> = <span class="string">info</span></span><br><span class="line"><span class="attr">rootLogger.appenderRef.console.ref</span> = <span class="string">console</span></span><br><span class="line"><span class="attr">rootLogger.appenderRef.rolling.ref</span> = <span class="string">rolling</span></span><br><span class="line"><span class="attr">rootLogger.appenderRef.rolling_old.ref</span> = <span class="string">rolling_old</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######## Deprecation JSON #######################</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.type</span> = <span class="string">RollingFile</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.name</span> = <span class="string">deprecation_rolling</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.fileName</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_deprecation.json</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.layout.type</span> = <span class="string">ECSJsonLayout</span></span><br><span class="line"><span class="comment"># Intentionally follows a different pattern to above</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.layout.dataset</span> = <span class="string">deprecation.elasticsearch</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.filter.rate_limit.type</span> = <span class="string">RateLimitingFilter</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.deprecation_rolling.filePattern</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_deprecation-%i.json.gz</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.policies.type</span> = <span class="string">Policies</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.policies.size.size</span> = <span class="string">1GB</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line"><span class="attr">appender.deprecation_rolling.strategy.max</span> = <span class="string">4</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.header_warning.type</span> = <span class="string">HeaderWarningAppender</span></span><br><span class="line"><span class="attr">appender.header_warning.name</span> = <span class="string">header_warning</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.deprecation.name</span> = <span class="string">org.elasticsearch.deprecation</span></span><br><span class="line"><span class="attr">logger.deprecation.level</span> = <span class="string">WARN</span></span><br><span class="line"><span class="attr">logger.deprecation.appenderRef.deprecation_rolling.ref</span> = <span class="string">deprecation_rolling</span></span><br><span class="line"><span class="attr">logger.deprecation.appenderRef.header_warning.ref</span> = <span class="string">header_warning</span></span><br><span class="line"><span class="attr">logger.deprecation.additivity</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######## Search slowlog JSON ####################</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.type</span> = <span class="string">RollingFile</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.name</span> = <span class="string">index_search_slowlog_rolling</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.fileName</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs\</span></span><br><span class="line"><span class="string">  .cluster_name&#125;_index_search_slowlog.json</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.layout.type</span> = <span class="string">ECSJsonLayout</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.layout.dataset</span> = <span class="string">elasticsearch.index_search_slowlog</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.filePattern</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs\</span></span><br><span class="line"><span class="string">  .cluster_name&#125;_index_search_slowlog-%i.json.gz</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.policies.type</span> = <span class="string">Policies</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.policies.size.size</span> = <span class="string">1GB</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line"><span class="attr">appender.index_search_slowlog_rolling.strategy.max</span> = <span class="string">4</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.name</span> = <span class="string">index.search.slowlog</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.level</span> = <span class="string">trace</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.appenderRef.index_search_slowlog_rolling.ref</span> = <span class="string">index_search_slowlog_rolling</span></span><br><span class="line"><span class="attr">logger.index_search_slowlog_rolling.additivity</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">######## Indexing slowlog JSON ##################</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.type</span> = <span class="string">RollingFile</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.name</span> = <span class="string">index_indexing_slowlog_rolling</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.fileName</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;\</span></span><br><span class="line"><span class="string">  _index_indexing_slowlog.json</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.layout.type</span> = <span class="string">ECSJsonLayout</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.layout.dataset</span> = <span class="string">elasticsearch.index_indexing_slowlog</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.filePattern</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;\</span></span><br><span class="line"><span class="string">  _index_indexing_slowlog-%i.json.gz</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.policies.type</span> = <span class="string">Policies</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.policies.size.size</span> = <span class="string">1GB</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line"><span class="attr">appender.index_indexing_slowlog_rolling.strategy.max</span> = <span class="string">4</span></span><br><span class="line"><span class="comment">#################################################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.name</span> = <span class="string">index.indexing.slowlog.index</span></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.level</span> = <span class="string">trace</span></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.appenderRef.index_indexing_slowlog_rolling.ref</span> = <span class="string">index_indexing_slowlog_rolling</span></span><br><span class="line"><span class="attr">logger.index_indexing_slowlog.additivity</span> = <span class="string">false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.com_amazonaws.name</span> = <span class="string">com.amazonaws</span></span><br><span class="line"><span class="attr">logger.com_amazonaws.level</span> = <span class="string">warn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.com_amazonaws_jmx_SdkMBeanRegistrySupport.name</span> = <span class="string">com.amazonaws.jmx.SdkMBeanRegistrySupport</span></span><br><span class="line"><span class="attr">logger.com_amazonaws_jmx_SdkMBeanRegistrySupport.level</span> = <span class="string">error</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.com_amazonaws_metrics_AwsSdkMetrics.name</span> = <span class="string">com.amazonaws.metrics.AwsSdkMetrics</span></span><br><span class="line"><span class="attr">logger.com_amazonaws_metrics_AwsSdkMetrics.level</span> = <span class="string">error</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.com_amazonaws_auth_profile_internal_BasicProfileConfigFileLoader.name</span> = <span class="string">com.amazonaws.auth.profile.internal.BasicProfileConfigFileLoader</span></span><br><span class="line"><span class="attr">logger.com_amazonaws_auth_profile_internal_BasicProfileConfigFileLoader.level</span> = <span class="string">error</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.com_amazonaws_services_s3_internal_UseArnRegionResolver.name</span> = <span class="string">com.amazonaws.services.s3.internal.UseArnRegionResolver</span></span><br><span class="line"><span class="attr">logger.com_amazonaws_services_s3_internal_UseArnRegionResolver.level</span> = <span class="string">error</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.audit_rolling.type</span> = <span class="string">RollingFile</span></span><br><span class="line"><span class="attr">appender.audit_rolling.name</span> = <span class="string">audit_rolling</span></span><br><span class="line"><span class="attr">appender.audit_rolling.fileName</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_audit.json</span></span><br><span class="line"><span class="attr">appender.audit_rolling.layout.type</span> = <span class="string">PatternLayout</span></span><br><span class="line"><span class="attr">appender.audit_rolling.layout.pattern</span> = <span class="string">&#123;\</span></span><br><span class="line"><span class="string">                &quot;type&quot;:&quot;audit&quot;, \</span></span><br><span class="line"><span class="string">                &quot;timestamp&quot;:&quot;%d&#123;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss,SSSZ&#125;&quot;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;cluster.name&quot;:&quot;%enc&#123;%map&#123;cluster.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;cluster.uuid&quot;:&quot;%enc&#123;%map&#123;cluster.uuid&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;node.name&quot;:&quot;%enc&#123;%map&#123;node.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;node.id&quot;:&quot;%enc&#123;%map&#123;node.id&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;host.name&quot;:&quot;%enc&#123;%map&#123;host.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;host.ip&quot;:&quot;%enc&#123;%map&#123;host.ip&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;event.type&quot;:&quot;%enc&#123;%map&#123;event.type&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;event.action&quot;:&quot;%enc&#123;%map&#123;event.action&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;authentication.type&quot;:&quot;%enc&#123;%map&#123;authentication.type&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.name&quot;:&quot;%enc&#123;%map&#123;user.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.run_by.name&quot;:&quot;%enc&#123;%map&#123;user.run_by.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.run_as.name&quot;:&quot;%enc&#123;%map&#123;user.run_as.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.realm&quot;:&quot;%enc&#123;%map&#123;user.realm&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.run_by.realm&quot;:&quot;%enc&#123;%map&#123;user.run_by.realm&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.run_as.realm&quot;:&quot;%enc&#123;%map&#123;user.run_as.realm&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;user.roles&quot;:%map&#123;user.roles&#125;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;apikey.id&quot;:&quot;%enc&#123;%map&#123;apikey.id&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;apikey.name&quot;:&quot;%enc&#123;%map&#123;apikey.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;authentication.token.name&quot;:&quot;%enc&#123;%map&#123;authentication.token.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;authentication.token.type&quot;:&quot;%enc&#123;%map&#123;authentication.token.type&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;origin.type&quot;:&quot;%enc&#123;%map&#123;origin.type&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;origin.address&quot;:&quot;%enc&#123;%map&#123;origin.address&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;realm&quot;:&quot;%enc&#123;%map&#123;realm&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;url.path&quot;:&quot;%enc&#123;%map&#123;url.path&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;url.query&quot;:&quot;%enc&#123;%map&#123;url.query&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;request.method&quot;:&quot;%enc&#123;%map&#123;request.method&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;request.body&quot;:&quot;%enc&#123;%map&#123;request.body&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;request.id&quot;:&quot;%enc&#123;%map&#123;request.id&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;action&quot;:&quot;%enc&#123;%map&#123;action&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;request.name&quot;:&quot;%enc&#123;%map&#123;request.name&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;indices&quot;:%map&#123;indices&#125;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;opaque_id&quot;:&quot;%enc&#123;%map&#123;opaque_id&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;trace.id&quot;:&quot;%enc&#123;%map&#123;trace.id&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;x_forwarded_for&quot;:&quot;%enc&#123;%map&#123;x_forwarded_for&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;transport.profile&quot;:&quot;%enc&#123;%map&#123;transport.profile&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;rule&quot;:&quot;%enc&#123;%map&#123;rule&#125;&#125;&#123;JSON&#125;&quot;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;put&quot;:%map&#123;put&#125;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;delete&quot;:%map&#123;delete&#125;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;change&quot;:%map&#123;change&#125;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;create&quot;:%map&#123;create&#125;&#125;\</span></span><br><span class="line"><span class="string">                %varsNotEmpty&#123;, &quot;invalidate&quot;:%map&#123;invalidate&#125;&#125;\</span></span><br><span class="line"><span class="string">                &#125;%n</span></span><br><span class="line"><span class="comment"># &quot;node.name&quot; node name from the `elasticsearch.yml` settings</span></span><br><span class="line"><span class="comment"># &quot;node.id&quot; node id which should not change between cluster restarts</span></span><br><span class="line"><span class="comment"># &quot;host.name&quot; unresolved hostname of the local node</span></span><br><span class="line"><span class="comment"># &quot;host.ip&quot; the local bound ip (i.e. the ip listening for connections)</span></span><br><span class="line"><span class="comment"># &quot;origin.type&quot; a received REST request is translated into one or more transport requests. This indicates which processing layer generated the event &quot;rest&quot; or &quot;transport&quot; (internal)</span></span><br><span class="line"><span class="comment"># &quot;event.action&quot; the name of the audited event, eg. &quot;authentication_failed&quot;, &quot;access_granted&quot;, &quot;run_as_granted&quot;, etc.</span></span><br><span class="line"><span class="comment"># &quot;authentication.type&quot; one of &quot;realm&quot;, &quot;api_key&quot;, &quot;token&quot;, &quot;anonymous&quot; or &quot;internal&quot;</span></span><br><span class="line"><span class="comment"># &quot;user.name&quot; the subject name as authenticated by a realm</span></span><br><span class="line"><span class="comment"># &quot;user.run_by.name&quot; the original authenticated subject name that is impersonating another one.</span></span><br><span class="line"><span class="comment"># &quot;user.run_as.name&quot; if this &quot;event.action&quot; is of a run_as type, this is the subject name to be impersonated as.</span></span><br><span class="line"><span class="comment"># &quot;user.realm&quot; the name of the realm that authenticated &quot;user.name&quot;</span></span><br><span class="line"><span class="comment"># &quot;user.run_by.realm&quot; the realm name of the impersonating subject (&quot;user.run_by.name&quot;)</span></span><br><span class="line"><span class="comment"># &quot;user.run_as.realm&quot; if this &quot;event.action&quot; is of a run_as type, this is the realm name the impersonated user is looked up from</span></span><br><span class="line"><span class="comment"># &quot;user.roles&quot; the roles array of the user; these are the roles that are granting privileges</span></span><br><span class="line"><span class="comment"># &quot;apikey.id&quot; this field is present if and only if the &quot;authentication.type&quot; is &quot;api_key&quot;</span></span><br><span class="line"><span class="comment"># &quot;apikey.name&quot; this field is present if and only if the &quot;authentication.type&quot; is &quot;api_key&quot;</span></span><br><span class="line"><span class="comment"># &quot;authentication.token.name&quot; this field is present if and only if the authenticating credential is a service account token</span></span><br><span class="line"><span class="comment"># &quot;authentication.token.type&quot; this field is present if and only if the authenticating credential is a service account token</span></span><br><span class="line"><span class="comment"># &quot;event.type&quot; informs about what internal system generated the event; possible values are &quot;rest&quot;, &quot;transport&quot;, &quot;ip_filter&quot; and &quot;security_config_change&quot;</span></span><br><span class="line"><span class="comment"># &quot;origin.address&quot; the remote address and port of the first network hop, i.e. a REST proxy or another cluster node</span></span><br><span class="line"><span class="comment"># &quot;realm&quot; name of a realm that has generated an &quot;authentication_failed&quot; or an &quot;authentication_successful&quot;; the subject is not yet authenticated</span></span><br><span class="line"><span class="comment"># &quot;url.path&quot; the URI component between the port and the query string; it is percent (URL) encoded</span></span><br><span class="line"><span class="comment"># &quot;url.query&quot; the URI component after the path and before the fragment; it is percent (URL) encoded</span></span><br><span class="line"><span class="comment"># &quot;request.method&quot; the method of the HTTP request, i.e. one of GET, POST, PUT, DELETE, OPTIONS, HEAD, PATCH, TRACE, CONNECT</span></span><br><span class="line"><span class="comment"># &quot;request.body&quot; the content of the request body entity, JSON escaped</span></span><br><span class="line"><span class="comment"># &quot;request.id&quot; a synthetic identifier for the incoming request, this is unique per incoming request, and consistent across all audit events generated by that request</span></span><br><span class="line"><span class="comment"># &quot;action&quot; an action is the most granular operation that is authorized and this identifies it in a namespaced way (internal)</span></span><br><span class="line"><span class="comment"># &quot;request.name&quot; if the event is in connection to a transport message this is the name of the request class, similar to how rest requests are identified by the url path (internal)</span></span><br><span class="line"><span class="comment"># &quot;indices&quot; the array of indices that the &quot;action&quot; is acting upon</span></span><br><span class="line"><span class="comment"># &quot;opaque_id&quot; opaque value conveyed by the &quot;X-Opaque-Id&quot; request header</span></span><br><span class="line"><span class="comment"># &quot;trace_id&quot; an identifier conveyed by the part of &quot;traceparent&quot; request header</span></span><br><span class="line"><span class="comment"># &quot;x_forwarded_for&quot; the addresses from the &quot;X-Forwarded-For&quot; request header, as a verbatim string value (not an array)</span></span><br><span class="line"><span class="comment"># &quot;transport.profile&quot; name of the transport profile in case this is a &quot;connection_granted&quot; or &quot;connection_denied&quot; event</span></span><br><span class="line"><span class="comment"># &quot;rule&quot; name of the applied rule if the &quot;origin.type&quot; is &quot;ip_filter&quot;</span></span><br><span class="line"><span class="comment"># the &quot;put&quot;, &quot;delete&quot;, &quot;change&quot;, &quot;create&quot;, &quot;invalidate&quot; fields are only present</span></span><br><span class="line"><span class="comment"># when the &quot;event.type&quot; is &quot;security_config_change&quot; and contain the security config change (as an object) taking effect</span></span><br><span class="line"></span><br><span class="line"><span class="attr">appender.audit_rolling.filePattern</span> = <span class="string">$&#123;sys:es.logs.base_path&#125;$&#123;sys:file.separator&#125;$&#123;sys:es.logs.cluster_name&#125;_audit-%d&#123;yyyy-MM-dd&#125;-%i.json.gz</span></span><br><span class="line"><span class="attr">appender.audit_rolling.policies.type</span> = <span class="string">Policies</span></span><br><span class="line"><span class="attr">appender.audit_rolling.policies.time.type</span> = <span class="string">TimeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.audit_rolling.policies.time.interval</span> = <span class="string">1</span></span><br><span class="line"><span class="attr">appender.audit_rolling.policies.time.modulate</span> = <span class="string">true</span></span><br><span class="line"><span class="attr">appender.audit_rolling.policies.size.type</span> = <span class="string">SizeBasedTriggeringPolicy</span></span><br><span class="line"><span class="attr">appender.audit_rolling.policies.size.size</span> = <span class="string">1GB</span></span><br><span class="line"><span class="attr">appender.audit_rolling.strategy.type</span> = <span class="string">DefaultRolloverStrategy</span></span><br><span class="line"><span class="attr">appender.audit_rolling.strategy.fileIndex</span> = <span class="string">nomax</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.xpack_security_audit_logfile.name</span> = <span class="string">org.elasticsearch.xpack.security.audit.logfile.LoggingAuditTrail</span></span><br><span class="line"><span class="attr">logger.xpack_security_audit_logfile.level</span> = <span class="string">info</span></span><br><span class="line"><span class="attr">logger.xpack_security_audit_logfile.appenderRef.audit_rolling.ref</span> = <span class="string">audit_rolling</span></span><br><span class="line"><span class="attr">logger.xpack_security_audit_logfile.additivity</span> = <span class="string">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logger.xmlsig.name</span> = <span class="string">org.apache.xml.security.signature.XMLSignature</span></span><br><span class="line"><span class="attr">logger.xmlsig.level</span> = <span class="string">error</span></span><br><span class="line"><span class="attr">logger.samlxml_decrypt.name</span> = <span class="string">org.opensaml.xmlsec.encryption.support.Decrypter</span></span><br><span class="line"><span class="attr">logger.samlxml_decrypt.level</span> = <span class="string">fatal</span></span><br><span class="line"><span class="attr">logger.saml2_decrypt.name</span> = <span class="string">org.opensaml.saml.saml2.encryption.Decrypter</span></span><br><span class="line"><span class="attr">logger.saml2_decrypt.level</span> = <span class="string">fatal</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>docker-compose.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker network create elk</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es8:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:8.2.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/config:/usr/share/elasticsearch/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">  <span class="attr">kibana8:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:8.2.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kibana8/config:/usr/share/kibana/config</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://es8:9200</span></span><br><span class="line">      <span class="attr">I18N_LOCALE:</span> <span class="string">zh-CN</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es8</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">default:</span></span><br><span class="line">    <span class="attr">external:</span></span><br><span class="line">      <span class="comment">## 此处名称与上面创建的网络名称一致</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">elk</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-术语"><a href="#1-2-术语" class="headerlink" title="1.2 术语"></a>1.2 术语</h3><ol><li><p><strong>集群（Cluster）</strong>：包含多个节点，每个节点属于哪个集群是通过一个配置（集群名称，默认是elasticsearch）来决定的，集群的目的为了提供高可用和海量数据的存储以及更快的跨节点查询能力。</p></li><li><p><strong>节点（Node）</strong>：集群中的一个节点，节点也有一个名称（默认是随机分配的），节点名称很重要（在执行运维管理操作的时候），默认节点会去加入一个名称为“elasticsearch”的集群，如果直接启动一堆节点，那么它们会自动组成一个elasticsearch集群，当然一个节点也可以组成一个elasticsearch集群</p></li><li><p><strong>索引（Index）</strong>：包含一堆有相似结构的文档数据，一个index包含很多document。在关系型数据库中的概念类似于数据库；</p></li><li><p><strong>类型（type）</strong>：在ElasticSearch版本7以后废除了type概念，但是保留的type代表的意义，ElasticSearch7以后Type默认值是<code>_doc</code>；而Type的这个概念任然保持一致，都是用来表示索引中文档的基本模型，在关系型数据库中的概念类似数据表，意思是你个索引（数据库）中包含多个Type（数据表），但是在版本7以后一个索引中只包含一个Type（_doc）</p></li><li><p><strong>文档（Document）</strong>：是ElasticSearch中最小数据单元，一个document代表一条数据，可以理解为关系型数据库中一行数据；</p></li><li><p><strong>字段（field）</strong>：一个document里面有多个field，每个field就是一个数据字段，可以理解为关系型数据库中一行数据中的每一列；</p></li><li><p><strong>映射（mapping）</strong>：非常类似于静态语言中的数据类型或者关系型数据库的表结构。mapping还有一些其他的含义，mapping不仅告诉ES一个field中是什么类型的值， 它还告诉ES如何索引数据以及数据是否能被搜索到。</p></li><li><p><strong>分片（shard）</strong>：也称 Primary Shard，单台机器无法存储大量数据，es可以将一个索引中的数据切分为多个shard，分布在多台服务器上存储。有了shard就可以横向扩展，存储更多数据，让搜索和分析等操作分布到多台服务器上去执行，提升吞吐量和性能。每个shard都是一个lucene index。primary shard（建立索引时一次设置，不能修改，默认5个）。</p></li><li><p><strong>副本（Replica）</strong>：任何一个服务器随时可能故障或宕机，此时shard可能就会丢失，因此可以为每个shard创建多个replica副本。replica可以在shard故障时提供备用服务，保证数据不丢失，多个replica还可以提升搜索操作的吞吐量和性能。replica shard（随时修改数量，默认1个）。</p></li><li><p><strong>正向索引和倒排索引</strong>：索引的最终目的都是通过搜索的关键字检索到关键字对应的完整数据；</p><ul><li><p>正向索引：正向索引的检索过程首先将完整数据的关键数据进行分词，然后通过搜索关键字判断哪些分词中包含有搜索关键字，然后将搜索关键字对应的数据唯一值返回，最后通过这个唯一值查找到完整数据；</p><table><thead><tr><th>document的唯一值</th><th>对数据进行分词，并且使用“中国”查询数据</th></tr></thead><tbody><tr><td>1001</td><td>我爱中国 -》 我、爱、中国</td></tr><tr><td>1002</td><td>我是中国人-》我、是、中国、中国人</td></tr><tr><td>1003</td><td>发展中的国家-》发展、发展中、国家</td></tr></tbody></table></li><li><p>倒排索引：倒排索引的索引方式做了改变，也是将数据中的关键数据进行分词，不同的是倒排索引将分词对应的数据的唯一值做映射，如果使用搜索关键字查询时候，如果匹配到分词也就可以得到对应的数据唯一值，然后通过这个唯一值查找到完整数据；比如用上面的三句话用倒排索引生成的结构如下：</p><table><thead><tr><th>分词信息</th><th><span title='使用假数据演示分词对应的数据的唯一ID值'>数据唯一值</span></th></tr></thead><tbody><tr><td>我</td><td>1001、1002</td></tr><tr><td>爱</td><td>1001</td></tr><tr><td>中国</td><td>1001、1002</td></tr><tr><td>中国人</td><td>1002</td></tr><tr><td>发展</td><td>1003</td></tr><tr><td>发展中</td><td>1003</td></tr></tbody></table></li></ul></li><li><p><strong>RestFul风格</strong></p><ul><li>GET 请求：获取服务器中的对象，</li><li>POST 请求：在服务器上更新对象，</li><li>PUT 请求：在服务器上创建对象，PUT是幂等操，有些接口重复执行不会影响结果，有些接口重复操作会抛出异常</li><li>DELETE 请求：删除服务器中的对象</li><li>HEAD 请求：仅仅用于获取对象的基础信息</li></ul></li></ol><h3 id="1-3-分词器"><a href="#1-3-分词器" class="headerlink" title="1.3 分词器"></a>1.3 分词器</h3><h4 id="1-分词器概述"><a href="#1-分词器概述" class="headerlink" title="1. 分词器概述"></a>1. 分词器概述</h4><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ElasticSearch是基于Lucene构建的分布式搜索引擎，而分词是词Search是一个构建于Lucene之上的优秀的分布式全文检索引擎（服务器）；ElasticSearch倒排索引的第一步需要将需要被全文检索的内容拆分为可检索的关键字，不同的分词器就会有不同的拆分结果，会直接影响ElasticSearch的检索效率和精确度；总结来说：分词就是<strong>把全文本转换成一系列单词（term/token）的过程</strong>，也叫<strong>文本分析</strong>。在 ES 中，Analysis 是通过<strong>分词器（Analyzer）</strong> 来实现的，可使用 ES 内置的分析器或者按需定制化分析器。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>分词器主要有三部分组成，三个部分是有顺序的，从上到下依次经过 <code>Character Filters</code>，<code>Tokenizer</code> 以及 <code>Token Filters</code>，这个顺序比较好理解，一个文本进来肯定要先对文本数据进行处理，再去分词，最后对分词的结果进行过滤。</p><ul><li>Character Filters：针对原始文本处理，比如去除 html 标签</li><li>Tokenizer：按照规则切分为单词，比如按照空格切分</li><li>Token Filters：将切分的单词进行加工，比如大写转小写，删除 stopwords，增加同义语</li></ul><h4 id="2-常用分词器"><a href="#2-常用分词器" class="headerlink" title="2. 常用分词器"></a>2. 常用分词器</h4><blockquote><ul><li><p>分词关键关键字</p><ul><li><code>analyzer</code>指定需要的分词器;</li><li><code>text</code>指定要拆分的文本</li></ul></li><li><p>分词结果关键字</p><ul><li><code>token</code> 为分词结果；</li><li><code>start_offset</code> 为起始偏移；</li><li><code>end_offset</code> 为结束偏移；</li><li><code>position</code> 为分词位置</li></ul></li></ul></blockquote><ul><li><p><strong>standard</strong>：默认分词器，按词切分，小写处理，默认的 stopwords 是关闭的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I bought a computer，8761元&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 分词结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bought&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;computer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;ALPHANUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8761&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;NUM&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;元&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&lt;IDEOGRAPHIC&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>simple</strong>：按照非字母切分（符号被过滤），小写处理</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;simple&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I bought a computer，8761元&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 分词结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;i&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bought&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;computer&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">19</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;元&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">24</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>whitespace</strong>：按照空格切分，不转小写</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;whitespace&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I bought a computer，8761元&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 分词结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;I&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bought&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;a&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;computer，8761元&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">25</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;word&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ik_smart</strong>： 会根据词库进行标准分词，<a href="https://github.com/medcl/elasticsearch-analysis-ik">下载地址</a>：下载解压到plugins目录并重启es</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我买了一台计算机&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 分词结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;买了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一台&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>ik_max_word</strong>：会根据词库列表所有的分词结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我买了一台计算机&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 分词结果</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tokens&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;我&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_CHAR&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;买了&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一台&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;一&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;TYPE_CNUM&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;台&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;COUNT&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">6</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;token&quot;</span><span class="punctuation">:</span> <span class="string">&quot;算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;start_offset&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;end_offset&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CN_WORD&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;position&quot;</span><span class="punctuation">:</span> <span class="number">7</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-分词器使用"><a href="#3-分词器使用" class="headerlink" title="3. 分词器使用"></a>3. 分词器使用</h4><ul><li><p>分词器有索引时的分词器及搜索时的分词器，可以在mapping中设置，索引分词器采用analyzer进行设置，搜索分词器采用search_analyzer设置，如果没有设置分词器，则索引和搜索分词器都用默认的standard分词器，如果只是设置索引分词器没有设置搜索分词器，则搜索分词器也采用索引分词器，如果analyzer和search_analyzer都设置则使用各自设置的分词器。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置mapping - 定义analyzer索引分词，和搜索分词器使用同一个</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 设置mapping - 分别定义analyzer索引分词 和 search_analyzer搜索分词器</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;english&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span><span class="string">&quot;standard&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 查询时候指定分词器</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;query&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;洗衣液&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-扩展IK词库"><a href="#3-扩展IK词库" class="headerlink" title="3. 扩展IK词库"></a>3. 扩展IK词库</h4><ul><li>下载并解压ik分词器到ElasticSearch的home下的plugins文件夹：</li><li>在ES的安装路径下找到配置目录custom(如果没有就mkdir),创建用户自定义的词典myTest.dic</li><li>ES词典的配置文件为IKAnalyzer.cfg.xml。编辑该文件,加入我们自定义的词典</li><li>重启ES</li></ul><h2 id="第二章-ES数据类型"><a href="#第二章-ES数据类型" class="headerlink" title="第二章 ES数据类型"></a>第二章 ES数据类型</h2><p><img src="https://z3.ax1x.com/2021/10/18/5aRcLT.png" alt="5aRcLT.png"></p><h3 id="2-1-基本类型"><a href="#2-1-基本类型" class="headerlink" title="2.1 基本类型"></a>2.1 基本类型</h3><ol><li><p><strong>基本类型概述</strong>：分为字符串类型、数字类型、日期类型、布尔类型、基于 BASE64 的二进制类型、范围类型</p><ul><li>string类型再ES7.0以后就不再支持了，字符串只有两种字符串类型：text 和 keyword</li><li>text 类型适用于需要被全文检索的字段，但是<strong>不能被用于排序</strong>如果需要使用该类型的字段只需要在定义映射时指定 JSON 中对应字段的 type 为 text。</li><li>keyword 适合简短、结构化字符串，例如主机名、姓名、商品名称等，<strong>可以用于过滤、排序、聚合检索，也可以用于精确查询</strong>。</li><li>数字类型：尽量选择范围较小的数据类型，字段长度越短，搜索效率越高，对于浮点数，可以优先考虑使用 scaled_float 类型，该类型可以通过缩放因子来精确浮点数，例如 12.34 可以转换为 1234 来存储。</li><li>日期类型：格式化的日期字符串，例如 2020-03-17 00:00、2020/03/17</li><li>布尔类型：JSON 字符串类型也可以被 ES 转换为布尔类型存储，前提是字符串的取值为 true 或者 false</li><li>二进制类型：二进制类型 binary 接受 BASE64 编码的字符串，默认 store 属性为 false，并且不可以被搜索。</li><li>范围类型：用来表达一个数据的区间，可以分为5种：integer_range、float_range、long_range、double_range 以及 date_range。</li></ul></li><li><p>基本类型使用案例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PUT /user02</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>text</strong>：类型适用于需要被全文检索的字段，<code>text</code> 类型会被 Lucene 分词器（Analyzer）处理为一个个词项，并使用 Lucene 倒排索引存储，<strong>text 字段不能被用于排序</strong>，</li><li><strong>keyword</strong>：用于过滤、排序、聚合检索，也可以用于精确查询。</li></ul></blockquote></li></ol><h3 id="2-2-复杂类型"><a href="#2-2-复杂类型" class="headerlink" title="2.2 复杂类型"></a>2.2 复杂类型</h3><ol><li><p>复杂类型概述：主要有对象类型（object）和嵌套类型（nested）</p><ul><li><p>对象类型：JSON 字符串允许嵌套对象，一个文档可以嵌套多个、多层对象。可以通过对象类型来存储二级文档，不过由于 Lucene 并没有内部对象的概念，ES 会将原 JSON 文档扁平化，如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;first&quot;</span><span class="punctuation">:</span><span class="string">&quot;fn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;last&quot;</span><span class="punctuation">:</span><span class="string">&quot;ln&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 会被扁平化处理</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name.first&quot;</span><span class="punctuation">:</span><span class="string">&quot;fn&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name.last&quot;</span><span class="punctuation">:</span><span class="string">&quot;ln&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>嵌套类型：可以看成是一个特殊的对象类型，可以让对象数组独立检索，嵌套类型将数组中的每个 JSON 对象作为独立的隐藏文档来存储，每个嵌套的对象都能够独立地被搜索，所以下面案例中虽然表面上只有 1 个文档，但实际上是存储了2个文档。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;users&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;first&quot;</span><span class="punctuation">:</span><span class="string">&quot;fa&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;last&quot;</span><span class="punctuation">:</span><span class="string">&quot;la&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;first&quot;</span><span class="punctuation">:</span><span class="string">&quot;fb&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;last&quot;</span><span class="punctuation">:</span><span class="string">&quot;lb&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>复杂类型使用案例</p></li></ol><h3 id="2-3-地理类型"><a href="#2-3-地理类型" class="headerlink" title="2.3 地理类型"></a>2.3 地理类型</h3><ol><li>地理类型概述：分为经纬度类型和地理区域类型<ul><li>经纬度类型字段（geo_point）：可以存储经纬度相关信息，通过地理类型的字段，可以用来实现诸如查找在指定地理区域内相关的文档、根据距离排序、根据地理位置修改评分规则等需求。</li><li>经纬度类型：可以表达一个点，而 geo_shape 类型可以表达一块地理区域，区域的形状可以是任意多边形，也可以是点、线、面、多点、多线、多面等几何类型。</li></ul></li><li>地理类型使用案例</li></ol><h3 id="2-4-特殊类型"><a href="#2-4-特殊类型" class="headerlink" title="2.4 特殊类型"></a>2.4 特殊类型</h3><ol><li><p>特殊类型概述：包括 IP 类型、过滤器类型、Join 类型、别名类型等</p><ul><li><p>IP 类型：可以用来存储 IPv4 或者 IPv6 地址，如果需要存储 IP 类型的字段，需要手动定义映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;work_ip&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;ip&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Join 类型是 ES 6.x 引入的类型，以取代淘汰的 <code>_parent</code> 元字段，用来实现文档的一对一、一对多的关系，主要用来做父子查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例如:my_join_field 为 Join 类型字段的名称；relations 指定关系：question 是 answer 的父类。</span></span><br><span class="line">PUT my_index</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;my_join_field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;join&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;relations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;question&quot;</span><span class="punctuation">:</span> <span class="string">&quot;answer&quot;</span> </span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例如定义一个 ID 为 1 的父文档：</span></span><br><span class="line">PUT my_join_index/<span class="number">1</span>?refresh</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is a question&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;my_join_field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;question&quot;</span> </span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 接下来定义一个子文档，该文档指定了父文档 ID 为 1：</span></span><br><span class="line">PUT my_join_index/_doc/<span class="number">2</span>?routing=<span class="number">1</span>&amp;refresh </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;This is an answer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;my_join_field&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;answer&quot;</span><span class="punctuation">,</span> </span><br><span class="line">        <span class="attr">&quot;parent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li>特殊类型使用案例</li></ol><h2 id="第三章-ES-Mapping"><a href="#第三章-ES-Mapping" class="headerlink" title="第三章 ES Mapping"></a>第三章 ES Mapping</h2><h3 id="3-1-Mapping映射"><a href="#3-1-Mapping映射" class="headerlink" title="3.1 Mapping映射"></a>3.1 Mapping映射</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ElasticSearch中的数据是以JSON文档的格式存储在索引中，ES中文档的格式称为Type；为提高ES检索性能，Type中字段对应的值会处理成特定的数据类型，这些数据类型与文档的对应关系就是Type的Mapping；在早期的版本中一个索引下可以添加多个Type类型的文档；从7.0开始，一个索引只有一个Type，也可以说一个 Type 有一个 Mapping 定义（可以理解为MySQL的表结构，用来约束字段的数据类型）；ES中Mapping的作用如下：</p><ul><li>定义索引中的字段的名称以及字段对应的数据类型，日期的格式等等；</li><li>字段的倒排索引的方式，或者设置是否可以被索引；</li><li>自定义规则，用于控制动态添加字段的映射</li></ul><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>mapping有三种不同的特性，即设置mapping的dynamic属性的三种取值：①当 dynamic 设置为 <code>true</code> 时，这个文档可以被索引进 ES，这个字段也可以被索引，也就是这个字段可以被搜索，Mapping 也同时被更新；②当 dynamic 被设置为 <code>false</code> 时候，存在新增字段的数据写入，该数据可以被索引，但是新增字段被丢弃；③当设置成 <code>strict</code> 模式时候，数据写入直接出错。</p><table><thead><tr><th></th><th>true</th><th>false</th><th>strict</th></tr></thead><tbody><tr><td>文档可索引</td><td>✅</td><td>✅</td><td>❎</td></tr><tr><td>字段可索引</td><td>✅</td><td>❎</td><td>❎</td></tr><tr><td>mapping可更新</td><td>✅</td><td>❎</td><td>❎</td></tr></tbody></table><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ES的Type映射方式有两中：①mapping：类似于数据库的schema的定义，mapping会把文档映射成lucene需要的扁平格式，一个mapping属于一个索引的type，一个type中有一个mapping定义；②dynamic mapping：写入文档的时候，索引不存在，会自动创建索引， 无需手动创建，ES会根据内容推断字段的类型，推断会不准确，可能造成某些功能无法使用，例如 范围查询。</p><h3 id="3-2-动态映射"><a href="#3-2-动态映射" class="headerlink" title="3.2 动态映射"></a>3.2 动态映射</h3><ul><li><p>类型的自动识别关系</p><table><thead><tr><th align="center">JSON类型</th><th>ElasticSearch dynamic mapping</th></tr></thead><tbody><tr><td align="center">字符串</td><td>匹配日期格式，设置为date<br />匹配数字，设置为float或者long，功能默认关闭<br />设置为text，并增加keyword子字段</td></tr><tr><td align="center">布尔值</td><td>boolean</td></tr><tr><td align="center">浮点数</td><td>float</td></tr><tr><td align="center">整数</td><td>long</td></tr><tr><td align="center">对象</td><td>object</td></tr><tr><td align="center">数组</td><td>由第一个非空数值的类型决定</td></tr><tr><td align="center">空值</td><td>忽略</td></tr></tbody></table></li><li><p>查看索引的映射</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://ip:port/索引名称/_mapping</span><br></pre></td></tr></table></figure></li><li><p>关闭动态映射</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PUT /_settings </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;index.mapper.dynamic&quot;</span><span class="punctuation">:</span><span class="keyword">false</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li></li></ul><h3 id="3-3-映射"><a href="#3-3-映射" class="headerlink" title="3.3 映射"></a>3.3 映射</h3><ul><li><p>每个索引都拥有唯一的 <code>mapping type</code>，用来决定文档将如何被索引。<code>mapping type</code>由下面两部分组成</p><ul><li>Meta-fields：元字段用于自定义如何处理文档的相关元数据。 元字段的示例包括文档的<code>_index</code>，<code>_type</code>，<code>_id</code>和<code>_source</code>字段。</li><li>Fields or properties：映射类型包含与文档相关的字段或属性的列表。</li></ul></li><li><p>mapping</p><ul><li><p><strong>初始化mapping</strong>：在新增索引的时候添加mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /twitter</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>新增字段</strong>：为索引增加新的mapping，对fields的映射进行设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /twitter/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改字段：mapping在建好之后不可以更改字段类型</strong>，但是可以通过重建索引和索引别名完成索引的字段重建</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 原索引</span><br><span class="line">PUT my_index</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;create_date&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;date&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;format&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yyyy-MM-dd ||yyyy/MM/dd&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 创建新索引<span class="punctuation">,</span>重置原索引的字段</span><br><span class="line">PUT my_index2</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;create_date&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;text&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 同步数据</span><br><span class="line">POST _reindex                   </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index2&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"># 删除原索引</span><br><span class="line">DELETE my_index</span><br><span class="line"># 设置新索引别名</span><br><span class="line">POST /_aliases</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;actions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span><span class="attr">&quot;add&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index2&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_index&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第四章-ES基础操作"><a href="#第四章-ES基础操作" class="headerlink" title="第四章 ES基础操作"></a>第四章 ES基础操作</h2><h3 id="4-1-ES服务查询"><a href="#4-1-ES服务查询" class="headerlink" title="4.1 ES服务查询"></a>4.1 ES服务查询</h3><ol><li><p><strong>查询ES服务信息</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">GET /</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8eaa5a50b54d&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker-cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;cyhnwUkJR7eCj2Hb01r88Q&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;801d9ccc7c2ee0f2cb121bbe22ab5af77a902372&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2022-02-24T13:55:40.601285296Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;9.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.17.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.0.0&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>_cat指令</strong></p><ul><li><p>指令说明：&amp;是参数连接符，可以多个参数一起使用</p><table><thead><tr><th>参数</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td>v（verbose）</td><td>显示指令的详细信息</td><td><strong>GET _cat/health?v</strong></td></tr><tr><td>help</td><td>示指令返回参数的说明</td><td><strong>GET _cat/health?help</strong></td></tr><tr><td>h（header）</td><td>选择要显示的列</td><td><strong>GET _cat/count?h=timestamp,count</strong></td></tr><tr><td>format</td><td>设置返回内容的格式</td><td><strong>GET _cat/master?format=json<br /></strong> - 支持json,yaml,text,smile,cbor</td></tr><tr><td>s（sort）</td><td>排序</td><td><strong>GET _cat/indices?s=store.size:desc</strong></td></tr></tbody></table></li><li><p><strong>_cat指令结果说明</strong></p><table><thead><tr><th>指令</th><th>说明</th><th>案例</th></tr></thead><tbody><tr><td><strong>indices</strong></td><td>查看索引信息</td><td><strong>GET _cat/indices?v</strong> <br />  -  health：索引的健康状态<br/> - status：索引的开启状态<br/> - index：索引名字<br/> - uuid：索引的uuid<br/> - pri：索引的主分片数量<br/> - rep：索引的复制分片数量<br/> - docs.count：索引下的文档总数<br/> - docs.deleted：索引下删除状态的文档数<br/> - store.size：主分片+复制分片的大小<br/> - pri.store.size：主分片的大小</td></tr><tr><td><strong>plugins</strong></td><td>显示每个运行插件节点的视图</td><td><strong>GET _cat/plugins?v</strong> <br /> - name：节点名称<br/> - component：插件名称<br/> - version：插件版本</td></tr><tr><td><strong>shards</strong></td><td>查看分片信息</td><td><strong>GET _cat/shards?v</strong> <br />- index：索引名称<br/> - shard：分片序号<br/> - prirep：分片类型，p主，r复<br/> - state：分片状态<br/> - docs：该分片存放的文档数量<br/> - store：该分片占用的存储空间大小<br/> - ip：该分片所在的服务器ip<br/> - node：该分片所在的节点名称</td></tr><tr><td><strong>allocation</strong></td><td>显示每个节点分片数量、占用空间</td><td><strong>GET _cat/allocation?v</strong><br /> - shards：节点承载的分片数量<br /> - disk.indices：索引占用的空间大小<br /> - disk.used：已使用的磁盘空间大小<br /> - disk.avail：节点可用空间大小<br /> - disk.total：节点总空间大小<br /> - disk.percent：节点磁盘占用百分比<br /> - host：节点的host地址<br /> - ip：节点的ip地址<br /> - node：节点名称</td></tr><tr><td><strong>thread_pool</strong></td><td>查看线程池信息</td><td><strong>GET _cat/thread_pool?v</strong><br /> - node_name：节点名称<br/> - name：线程池名称<br/> - active：活跃线程数量<br/> - queue：当前队列中的任务数<br/> - rejected：被拒绝的任务数</td></tr><tr><td>aliases</td><td>显示别名、过滤器、路由信息</td><td><strong>GET _cat/aliases?v</strong><br /> - alias：别名<br /> - iindex：索引别名指向<br /> - filter：过滤规则<br /> - routing.index：索引路由<br /> - routing.search：搜索路由</td></tr><tr><td>count</td><td>显示索引文档数量</td><td><strong>GET _cat/count?v</strong><br /> - epoch：自标准时间以来的秒数 <br />- timestamp：时间<br /> - count：文档总数</td></tr><tr><td><strong>health</strong></td><td>查看集群健康状况</td><td><strong>GET _cat/health?v</strong><br /> - epoch：自标准时间以来的秒数 <br /> - timestamp：时间<br /> - cluster：集群名称<br /> - status：集群状态<br /> - node.total：节点总数<br /> - node.data：数据节点总数<br /> - shards：分片总数<br /> - pri：主分片总数<br /> - repo：复制节点的数量<br /> - init： 初始化节点的数量<br /> - unassign：未分配分片的数量<br /> - pending_tasks：待定任务数<br /> - max_task_wait_time：最长任务等待时间<br /> - active_shards_percent：活动分片百分比</td></tr><tr><td><strong>master</strong></td><td>显示master节点信息</td><td><strong>GET _cat/master?v</strong><br /> - id：节点ID<br/> - host：主机名称<br/> - ip：主机IP<br/> - node：节点名称</td></tr><tr><td>nodeattrs</td><td>显示node节点属性</td><td><strong>GET _cat/nodeattrs?v</strong><br /> - node：节点名称<br/> - host：主机地址<br/> - ip：主机ip<br/> - attr：属性描述<br/> - value：属性值</td></tr><tr><td>nodes</td><td>显示node节点信息</td><td><strong>GET _cat/nodes?v</strong> <br /> - ip：node节点的IP<br/> - heap.percent：堆内存占用百分比<br/> - ram.percent：内存占用百分比<br/> - cpu：CPU占用百分比<br/> - load_1m：1分钟的系统负载<br/> - load_5m：5分钟的系统负载<br/> - load_15m：15分钟的系统负载<br/> - node.role：node节点的角色<br/> - master：是否是master节点<br/> - name：节点名称</td></tr><tr><td>pending_tasks</td><td>显示正在等待的任务</td><td><strong>GET _cat/pending_tasks?v</strong> <br /> - insertOrder：任务插入顺序<br/> - timeInQueue：任务排队了多长时间<br/> - priority：任务优先级<br/> - source：任务源</td></tr><tr><td>recovery</td><td>显示索引碎片恢复的视图</td><td><strong>GET _cat/recovery?v</strong><br /> - index：索引名称<br/> - shard：分片名称<br/> - time：恢复时间<br/> - type：恢复类型<br/> - stage：恢复阶段<br/> - source_host：源主机<br/> - source_node：源节点名称<br/> - target_host：目标主机<br/> - target_node：目标节点名称<br/> - repository：仓库<br/> - snapshot：快照<br/> - files：要恢复的文件数<br/> - files_recovered：已恢复的文件数<br/> - files_percent：恢复文件百分比<br/> - files_total：文件总数<br/> - bytes：要恢复的字节数<br/> - bytes_recovered：已恢复的字节数<br/> - bytes_percent：恢复字节百分比<br/> - bytes_total：字节总数<br/> - translog_ops：要恢复的数<br/> - translog_ops_recovered：已恢复的数<br/> - translog_ops_percent：恢复的百分比</td></tr><tr><td>segments</td><td>显示碎片中的分段信息</td><td><strong>GET _cat/segments?v</strong><br /> - index：索引名称<br/> - shard：分片名称<br/> - prirep：主分片还是副本分片<br/> - ip：所在节点IP<br/> - segment：segments段名<br/> - generation：分段生成<br/> - docs.count：段中的文档树<br/> - docs.deleted：段中删除的文档数<br/> - size：段大小，以字节为单位<br/> - size.memory：段内存字节大小<br /> - committed：段是否已提交<br/> - searchable：段是否可搜索<br/> - version：版本<br/> - compound：compound模式</td></tr></tbody></table></li></ul></li></ol><h3 id="4-2-索引操作"><a href="#4-2-索引操作" class="headerlink" title="4.2 索引操作"></a>4.2 索引操作</h3><h4 id="1-新建索引"><a href="#1-新建索引" class="headerlink" title="1. 新建索引"></a>1. 新建索引</h4><ul><li><p><strong>创建索引</strong>：使用PUT方式请求表示该请求具有幂等性，同样的请求只有发送一次，否则会报错</p></li><li><p>创建空索引：索引配置使用默认的配置值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引名称</span><br></pre></td></tr></table></figure></li><li><p>禁止自动创建索引：在全局配置文件 elasticsearch.yml 中</p><blockquote><ul><li>如果直接执行新增文档的操作，默认会直接创建这个索引；并且type字段也会自动创建。也就是说，ES并不需要像传统的数据库事先定义表的结构。</li><li>每个索引中的类型都有一个mapping映射，这个映射是动态生成的，因此当增加新的字段时，会自动增加mapping的设置。</li><li>通过在配置文件中设置action.auto_create_index为false，可以关闭自动创建index这个功能。</li><li>也可以设置黑名单或者白名单，比如：设置action.auto_create_index为<code>+aaa*,-bbb*</code>，<code>+</code>号意味着允许创建aaa开头的索引，<code>-</code>号意味着不允许创建bbb开头的索引。</li></ul></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">action.auto_create_index:false</span></span><br></pre></td></tr></table></figure></li><li><p>创建索引并设置分片和副本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number_of_shards&quot;</span><span class="punctuation">:</span> 分片数量<span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;number_of_replicas&quot;</span><span class="punctuation">:</span> 副本数量</span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>创建指定名称的索引并设置索引mapping：详细用法参考mapping</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT /索引名称</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;mapping&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;&lt;字段&gt;&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;字段的数据类型&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="2-查询索引"><a href="#2-查询索引" class="headerlink" title="2. 查询索引"></a>2. 查询索引</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看所有索引</span></span><br><span class="line">GET /_cat/indices</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有索引完整信息</span></span><br><span class="line">GET /_all</span><br><span class="line"><span class="comment"># 查看单个索引完整信息</span></span><br><span class="line">GET /user_empty</span><br><span class="line"><span class="comment"># 查看多个索引完整信息</span></span><br><span class="line">GET /user_empty,user_setting</span><br><span class="line"><span class="comment"># 查看集群中所有索引的setting信息</span></span><br><span class="line">GET /_all/_settings</span><br><span class="line"><span class="comment"># 查看集群中所有索引的mapping信息</span></span><br><span class="line">GET /_all/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看索引的setting信息</span></span><br><span class="line">GET /user_setting/_settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看索引的mapping信息</span></span><br><span class="line">GET /user_mapping/_mapping</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看多个索引的settings信息</span></span><br><span class="line">GET /user_empty,user_mapping/_settings</span><br><span class="line"><span class="comment"># 查看多个索引的mapping信息</span></span><br><span class="line">GET /user_empty,user_mapping/_mapping</span><br></pre></td></tr></table></figure><h4 id="3-编辑索引"><a href="#3-编辑索引" class="headerlink" title="3. 编辑索引"></a>3. 编辑索引</h4><ul><li><p><strong>修改索引的副本数</strong>：分片数据创建后不能修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /&lt;索引名称&gt;/_settings</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;settings&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;number_of_replicas&quot;</span>: 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>增加索引字段</strong>：已定义好的字段不允许被修改</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /&lt;索引名称&gt;/_mapping</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;properties&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;字段名称&quot;</span>:&#123;</span><br><span class="line">      <span class="string">&quot;type&quot;</span>:<span class="string">&quot;自动类型&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="4-删除索引"><a href="#4-删除索引" class="headerlink" title="4.删除索引"></a>4.删除索引</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DELETE /&lt;索引名称&gt;</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;acknowledged&quot;</span> <span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-索引打开和关闭"><a href="#5-索引打开和关闭" class="headerlink" title="5. 索引打开和关闭"></a>5. 索引打开和关闭</h4><blockquote><p>索引关闭以后就几乎不会占用系统资源</p></blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 关闭单个索引</span><br><span class="line">POST /索引名称/_close</span><br><span class="line"></span><br><span class="line"># 关闭多个索引</span><br><span class="line">POST /索引名称1,索引名称2/_close</span><br><span class="line"></span><br><span class="line"># 关闭所以并添加ignore_unavailable参数:如果关闭不存在索引,设置是否抛异常</span><br><span class="line">POST /索引名称1,索引名称2/_close?ignore_unavailable=true</span><br><span class="line"></span><br><span class="line"># 关闭集群中所有索引</span><br><span class="line">POST /_all/_close</span><br><span class="line"></span><br><span class="line"># 使用通配符关闭索引</span><br><span class="line">POST /test*/_close</span><br></pre></td></tr></table></figure><h4 id="6-索引别名"><a href="#6-索引别名" class="headerlink" title="6. 索引别名"></a>6. 索引别名</h4><ul><li><p>创建索引别名</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">  &quot;actions&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;add&quot;: &#123;</span><br><span class="line">        &quot;index&quot;: &quot;索引名称&quot;,</span><br><span class="line">        &quot;alias&quot;: &quot;索引名称对应的别名&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移除索引别名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">POST /_aliases</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;actions&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;remove&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;index&quot;</span>: <span class="string">&quot;索引名称&quot;</span>,</span><br><span class="line">        <span class="string">&quot;alias&quot;</span>: <span class="string">&quot;索引名称对应的别名&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看索引的别名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引名称/_aliases</span><br></pre></td></tr></table></figure></li><li><p>查看一个别名所对应的索引</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /索引别名/_aliases</span><br></pre></td></tr></table></figure></li><li><p>查看集群中所有可用别名</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET /_all/_aliases</span><br><span class="line">或</span><br><span class="line">GET /_aliases</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-3-文档操作"><a href="#4-3-文档操作" class="headerlink" title="4.3 文档操作"></a>4.3 文档操作</h3><h4 id="1-document详解"><a href="#1-document详解" class="headerlink" title="1. document详解"></a>1. document详解</h4><ul><li><p>document核心元数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;music&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;children&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><em>index元数据：代表这个document存放在哪个index中，名称小写，**`不能以’</em>‘, ‘-‘, 或 ‘+’开头`**。</li><li>_type元数据：ES 6.0.0之后一个index下面只能有一个type，高版本ES没有这个字段了；</li><li>_id元数据：document的唯一标识，与index一起唯一标识和定位一个document，可以手动指定，也可以由ES自动创建。</li><li>_version元数据：ES内部使用乐观锁对document的写操作进行控制，version版本号最初是1，更新操作成功后自动+1。</li><li>_source元数据：真正的ES需要存储的数据；</li></ol></blockquote></li></ul><h4 id="2-新建文档"><a href="#2-新建文档" class="headerlink" title="2. 新建文档"></a>2. 新建文档</h4><ul><li><p>添加数据并指定ID</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># </span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li>新版es中索引中type默认为_doc</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加文档,返回的内置信息中会包含随机生成的id,POST新增请求不是幂等性,每次都是一个新请求,PUT请求要求是幂等性,每次请求要求唯一</span></span><br><span class="line">POST http://localhost:9200/索引名称/_doc</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span>,</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 添加文档并设置自定义ID,带唯一ID后POST请求是具有幂等性,此时新增请求方式也可以是PUT</span></span><br><span class="line">POST http://localhost:9200/索引名称/_doc/唯一ID</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span>,</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编辑文档"><a href="#2-编辑文档" class="headerlink" title="2. 编辑文档"></a>2. 编辑文档</h4><blockquote><ul><li>put 整个文档的更新</li><li>put 只更新单个字段</li><li>put 增量字段</li><li>put 基于乐观锁的更新</li></ul></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">完全修改,覆盖元数据</span><br><span class="line">PUT http://localhost:9200/索引名称/_doc/覆盖的ID</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;key&quot;</span>:<span class="string">&quot;value&quot;</span>,</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">局部数据更新,修改请求不是幂等性,必须使用post,局部修改需要说明修改doc中的某个字段</span><br><span class="line">POST http://localhost:9200/索引名称/_doc/修改的文档ID</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;doc&quot;</span>:&#123;</span><br><span class="line"><span class="string">&quot;修改的属性&quot;</span>:<span class="string">&quot;修改的值&quot;</span>,</span><br><span class="line">... ...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-删除文档"><a href="#3-删除文档" class="headerlink" title="3. 删除文档"></a>3. 删除文档</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELET http://localhost:9200/索引名称/_doc/删除ID</span><br></pre></td></tr></table></figure><h2 id="第五章-ES检索分析"><a href="#第五章-ES检索分析" class="headerlink" title="第五章 ES检索分析"></a>第五章 ES检索分析</h2><h3 id="5-1-检索"><a href="#5-1-检索" class="headerlink" title="5.1 检索"></a>5.1 检索</h3><ol><li><p>主键查询</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http<span class="punctuation">:</span><span class="comment">//localhost:9200/索引名称/_doc/查询ID</span></span><br></pre></td></tr></table></figure></li><li><p>query查询</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/_search?q=key:查询的值&amp;... ...</span><br></pre></td></tr></table></figure></li><li><p>match_all</p></li><li><p>match</p></li><li><p>term</p></li><li><p>区间检索</p></li><li><p>_source检索需要的字段、过滤字段</p></li><li><p>range区间查</p></li><li><p>复合查询bool</p></li><li><p>filter与match</p></li><li><p>fuzzy近似查询</p></li><li><p>match_phrase断句匹配,查询的是整个断句</p></li><li><p>multi_match:多字段查询,一个只从多个字段匹配</p></li><li><p>terms</p></li><li><p>should</p></li><li><p>must_not</p></li><li><p>post_filter</p></li><li><p>HEAD /索引/_doc/ID:判断文档是否存在</p></li><li><p>用ID批量差:<code>_doc/_mget</code></p></li><li><p>批量操作:_bulk,新增,修改,删除</p></li><li><p>分页查询</p></li><li><p>排序</p></li><li><p>高亮</p></li><li><p>主键查询</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/<span class="built_in">_</span>doc/查询ID</span><br></pre></td></tr></table></figure></li><li><p>查询所有:_search</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/<span class="built_in">_</span>search</span><br></pre></td></tr></table></figure></li><li><p>条件查询1- 使用query参数查询</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>条件查询2 - 使用请求体查询 query表示是一个查询参数</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/<span class="built_in">_</span>doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;查询条件&quot;:&#123;</span><br><span class="line">&quot;条件匹配字段&quot;:&quot;查询的值&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>match - 表示匹配查询,需要指定匹配字段和匹配值</li><li>match_al - 表示全部匹配, 无需指定匹配字段</li></ul></blockquote></li><li><p>分页查询: form表示查询起始位置 size表示需要查询的条数</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/<span class="built_in">_</span>doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;&quot;,</span><br><span class="line">&quot;to&quot;:&quot;&quot;,</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;match&quot;:&#123;</span><br><span class="line">&quot;条件匹配字段&quot;:&quot;查询的值&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查询需要的字段: _source数组中说明需要返回的字段</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/<span class="built_in">_</span>doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;&quot;,</span><br><span class="line">&quot;to&quot;:&quot;&quot;,</span><br><span class="line">&quot;<span class="built_in">_</span>source&quot;:[&quot;需要返回的字段&quot;],</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;match&quot;:&#123;</span><br><span class="line">&quot;条件匹配字段&quot;:&quot;查询的值&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>排序查询</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:9200/索引名称/<span class="built_in">_</span>doc</span><br><span class="line">&#123;</span><br><span class="line">&quot;from&quot;:&quot;&quot;,</span><br><span class="line">&quot;to&quot;:&quot;&quot;,</span><br><span class="line">&quot;<span class="built_in">_</span>source&quot;:[&quot;需要返回的字段&quot;],</span><br><span class="line">&quot;sort&quot;:&#123;</span><br><span class="line">&quot;排序字段&quot;:&#123;</span><br><span class="line">&quot;order&quot;:&quot;asc|desc&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;query&quot;:&#123;</span><br><span class="line">&quot;match&quot;:&#123;</span><br><span class="line">&quot;条件匹配字段&quot;:&quot;查询的值&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多条件查询: bool -&gt; must | should | filter（过滤：可以范围查询range -&gt; gt | lt | eq | ）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">// 表示是查询</span></span><br><span class="line">    <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">// 表示使用条件查询</span></span><br><span class="line">      <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="comment">// 表示这个集合中的条件必须全部匹配</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;匹配字段&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;匹配字段&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>全文检索</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">es text类型默认是standard分词</span><br><span class="line">全文匹配: match<span class="built_in">_</span>phrase</span><br><span class="line">高亮显示:显示需要高亮的字段,默认前缀是&lt;em&gt;</span><br><span class="line">highlight:&#123;</span><br><span class="line">&quot;fields&quot;:&#123;</span><br><span class="line">&quot;高亮的字段&quot;:&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合查询:查询结果分析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">// 表示是聚合操作</span></span><br><span class="line">    <span class="attr">&quot;自定义的聚合名称&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">// terms关键字表示分组</span></span><br><span class="line">        <span class="string">&quot;分组字段&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;avg&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="comment">// avg关键字表示统计平均值</span></span><br><span class="line">        <span class="string">&quot;求平均字段&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-分析"><a href="#5-2-分析" class="headerlink" title="5.2 分析"></a>5.2 分析</h3><ul><li>aggs</li><li>avg</li><li>terms:根据什么字段分组</li></ul><h2 id="第六章-ES-Java-Client"><a href="#第六章-ES-Java-Client" class="headerlink" title="第六章 ES Java Client"></a>第六章 ES Java Client</h2><h3 id="6-1-Java客户端类型"><a href="#6-1-Java客户端类型" class="headerlink" title="6.1 Java客户端类型"></a>6.1 Java客户端类型</h3><ol><li>Java Client [8.1]：这是 Elasticsearch 的官方 Java API 客户端的文档。客户端为所有 Elasticsearch API 提供强类型请求和响应。</li><li>Java REST Client (过期) [7.17] ：Java REST 客户端已弃用，取而代之的是 Java API 客户端。包括①Java Low Level REST Client：低级客户端，允许通过 http 与 Elasticsearch 集群通信②Java High Level REST Client：基于低级客户端，它公开 API 特定的方法，并负责请求编组和响应解编组。</li><li>Java Transport Client (过期) [7.17]：TransportClient 已弃用，取而代之的是 Java 高级 REST 客户端，并将在 Elasticsearch 8.0 中删除。Java Transport Client是Java操作ES的一种客户端，是ES5版本就存在的一中API操作方式</li></ol><h3 id="6-2-JavaClient"><a href="#6-2-JavaClient" class="headerlink" title="6.2 JavaClient"></a>6.2 JavaClient</h3><ol><li><p>添加依赖</p><ul><li><p>gradle </p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;co.elastic.clients:elasticsearch-java:8.1.0&#x27;</span></span><br><span class="line">    implementation <span class="string">&#x27;com.fasterxml.jackson.core:jackson-databind:2.12.3&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>maven</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>co.elastic.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>JavaClient核心组件</p><ul><li>API client classes：它们为 Elasticsearch API 提供强类型数据结构和方法。由于 Elasticsearch API 很大，它以功能组（也称为“命名空间”）的形式构成，每个组都有自己的客户端类。 Elasticsearch 核心功能在 ElasticsearchClient 类中实现。</li><li>A JSON object mapper：这会将您的应用程序类映射到 JSON 并将它们与 API 客户端无缝集成。</li><li>A transport layer implementation：这是所有 HTTP 请求处理发生的地方。</li></ul></li><li><p>组合三个组件，建立链接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create the low-level client</span></span><br><span class="line"><span class="type">RestClient</span> <span class="variable">client</span> <span class="operator">=</span> RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>)).build();</span><br><span class="line"><span class="comment">// 创建 the transport with a Jackson mapper</span></span><br><span class="line"><span class="type">ElasticsearchTransport</span> <span class="variable">tp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestClientTransport</span>(client, <span class="keyword">new</span> <span class="title class_">JacksonJsonpMapper</span>());</span><br><span class="line"><span class="comment">// 创建 the API client</span></span><br><span class="line"><span class="type">ElasticsearchClient</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ElasticsearchClient</span>(tp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the low-level client</span></span><br><span class="line"><span class="type">RestClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> RestClient.builder(<span class="keyword">new</span> <span class="title class_">HttpHost</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">9200</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the HLRC</span></span><br><span class="line"><span class="type">RestHighLevelClient</span> <span class="variable">hlrc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(builder);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create the new Java Client with the same low level client</span></span><br><span class="line"><span class="type">ElasticsearchTransport</span> <span class="variable">tr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestClientTransport</span>(hlrc.getLowLevelClient(),<span class="keyword">new</span> <span class="title class_">JacksonJsonpMapper</span>());</span><br><span class="line"></span><br><span class="line"><span class="type">ElasticsearchClient</span> <span class="variable">esClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ElasticsearchClient</span>(tr);</span><br></pre></td></tr></table></figure></li><li><p>发送请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SearchResponse&lt;Product&gt; search = </span><br><span class="line">    client.search(s -&gt; s</span><br><span class="line">                  .index(<span class="string">&quot;products&quot;</span>)</span><br><span class="line">                  .query(q -&gt; q</span><br><span class="line">                         .term(t -&gt; t</span><br><span class="line">                               .field(<span class="string">&quot;name&quot;</span>)</span><br><span class="line">                               .value(v -&gt; v.stringValue(<span class="string">&quot;bicycle&quot;</span>))</span><br><span class="line">                              )),</span><br><span class="line">                  Product.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Hit&lt;Product&gt; hit: search.hits().hits()) &#123;</span><br><span class="line">    processProduct(hit.source());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="6-3-RestHighLevelClient"><a href="#6-3-RestHighLevelClient" class="headerlink" title="6.3 RestHighLevelClient"></a>6.3 RestHighLevelClient</h3><h2 id="第七章-ES集群"><a href="#第七章-ES集群" class="headerlink" title="第七章 ES集群"></a>第七章 ES集群</h2><h1 id="第二部分-Kibana"><a href="#第二部分-Kibana" class="headerlink" title="第二部分 Kibana"></a>第二部分 Kibana</h1><h2 id="第一章-Kibana入门"><a href="#第一章-Kibana入门" class="headerlink" title="第一章 Kibana入门"></a>第一章 Kibana入门</h2><h3 id="1-1-Kibana介绍"><a href="#1-1-Kibana介绍" class="headerlink" title="1.1 Kibana介绍"></a>1.1 Kibana介绍</h3><h3 id="1-2-Kibana安装"><a href="#1-2-Kibana安装" class="headerlink" title="1.2 Kibana安装"></a>1.2 Kibana安装</h3><ol><li><p>Linux系统安装</p><ul><li><p>下载解压</p><blockquote><ul><li>新建Kibana安装目录：/opt/kibana</li><li>将Kibana安装包解压到/opt/kibana目录中：Kibana的版本必须和ElasticSearch版本相同</li></ul></blockquote></li><li><p>修改配置：/opt/kibana/config/kibana.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Kibana 服务启动端口</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定Kibana服务器要绑定到的地址</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;192.168.57.129&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于所有查询的Elasticsearch实例的url</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://192.168.57.129:9200&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中文管理页</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">&quot;zh-CN&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>Linux服务器开启kibana服务运行端口：5601</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=5601/tcp --permanent </span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li><p>切换到非root用户,并将kibana安装目录指定为当前用户所属</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chown</span> elsearch:elsearch -R /opt/kibana</span><br><span class="line">su - elsearch</span><br><span class="line">/opt/kibana/kibana &amp;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Docker命令行</p><ul><li><p>下载Kibana镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:8.0.1</span><br></pre></td></tr></table></figure></li><li><p>使用命令行安装docker：①需要准备好宿主机中config中的配置文件②修改下面命令行中的数据集容器卷路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name kibana1 -p 5601:5601 \</span><br><span class="line">-v ~source_docker/kibana/config:/usr/share/kibana/config kibana:8.0.1</span><br></pre></td></tr></table></figure></li></ul></li><li><p>DockerCompose</p><ul><li><p>下载Kibana镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull kibana:8.2.0</span><br></pre></td></tr></table></figure></li><li><p>定义主机容器卷的目录如下结构：同一套版本的ElasticSearch和Kibana定义在同一目录ElasticSearch8，es和Kibana定义在各自的文件目录中</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ElasticSearch8/</span><br><span class="line">es8/</span><br><span class="line">/data/</span><br><span class="line">/logs/</span><br><span class="line">/config/</span><br><span class="line">/elasticsearch.yml</span><br><span class="line">/jvm.options</span><br><span class="line">/log4j2.properties</span><br><span class="line">kibana/</span><br><span class="line">config/kibana.yml</span><br></pre></td></tr></table></figure></li><li><p>定义docker-compose.yml文件在ElasticSearch8的根目录中</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># docker network create elk</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">es8:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:8.2.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">es8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/data:/usr/share/elasticsearch/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/config:/usr/share/elasticsearch/config</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./es8/plugins:/usr/share/elasticsearch/plugins</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line">  <span class="attr">kibana8:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:8.2.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;5601:5601&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./kibana8/config:/usr/share/kibana/config</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">ELASTICSEARCH_HOSTS:</span> <span class="string">http://es8:9200</span></span><br><span class="line">      <span class="attr">I18N_LOCALE:</span> <span class="string">zh-CN</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">es8</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="1-3-Kibana配置文件详解"><a href="#1-3-Kibana配置文件详解" class="headerlink" title="1.3 Kibana配置文件详解"></a>1.3 Kibana配置文件详解</h3><h1 id="第三部分-LogStash"><a href="#第三部分-LogStash" class="headerlink" title="第三部分 LogStash"></a>第三部分 LogStash</h1><h1 id="第四部分-Beats"><a href="#第四部分-Beats" class="headerlink" title="第四部分 Beats"></a>第四部分 Beats</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;ElasticSearch&quot;&gt;&lt;a href=&quot;#ElasticSearch&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="ELK" scheme="http://yoursite.com/tags/ELK/"/>
    
  </entry>
  
  <entry>
    <title>0603-Flutter</title>
    <link href="http://yoursite.com/2006/03/01/0603-Flutter/"/>
    <id>http://yoursite.com/2006/03/01/0603-Flutter/</id>
    <published>2006-02-28T16:05:00.000Z</published>
    <updated>2022-04-09T00:10:10.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Flutter概述"><a href="#第一章-Flutter概述" class="headerlink" title="第一章 Flutter概述"></a>第一章 Flutter概述</h1><h1 id="第二章-Flutter基础"><a href="#第二章-Flutter基础" class="headerlink" title="第二章 Flutter基础"></a>第二章 Flutter基础</h1><h2 id="2-1-Flutter项目结构"><a href="#2-1-Flutter项目结构" class="headerlink" title="2.1 Flutter项目结构"></a>2.1 Flutter项目结构</h2><ul><li><p>使用AndroidStudio或者VSCode开发工具创建Flutter项目：目录结构说明</p><table><thead><tr><th>文件或目录</th><th>说明</th></tr></thead><tbody><tr><td>.dart_tool</td><td>记录了一些dart工具库所在的位置和信息</td></tr><tr><td>.idea</td><td>android studio 是基于idea开发的，.idea 记录了项目的一些文件的变更记录</td></tr><tr><td>android</td><td>Android项目文件夹</td></tr><tr><td>ios</td><td>iOS项目文件夹</td></tr><tr><td>lib</td><td>lib文件夹内存放我们的dart语音代码</td></tr><tr><td>test</td><td>用于存放我们的测试代码</td></tr><tr><td>.gitignore</td><td>git忽略配置文件</td></tr><tr><td>.metadata</td><td>IDE 用来记录某个 Flutter 项目属性的的隐藏文件</td></tr><tr><td>.packages</td><td>pub 工具需要使用的，包含 package 依赖的 yaml 格式的文件</td></tr><tr><td>flutter_app.iml</td><td>工程文件的本地路径配置</td></tr><tr><td>pubspec.lock</td><td>当前项目依赖所生成的文件</td></tr><tr><td>pubspec.yaml</td><td>当前项目的一些配置文件，包括依赖的第三方库、图片资源文件等</td></tr><tr><td>README.md</td><td>READEME文件</td></tr></tbody></table></li></ul><h2 id="2-2-Flutter-UI风格"><a href="#2-2-Flutter-UI风格" class="headerlink" title="2.2 Flutter UI风格"></a>2.2 Flutter UI风格</h2><ol><li><p><strong>Material</strong>：Material Design是由谷歌推出的全新设计语言，这种设计语言旨在为手机、平板电脑、台式机和其他平台提供更一致、更广泛的外观和感觉。Material Design风格是一直非常有质感的设计风格，并会提供一些默认的交互动画，对于搞Android开发的来说应该耳熟能详了。MaterialApp代表使用Material Design风格的应用，里面包含了其他所需的基本控件。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>Cupertino</strong>：Cupertino风格组件即IOS风格组件。主要有CupertinoTabBar、CupertinoPageScaffold、CupertinoTabScaffold、CupertinoTabView等。目前组件库还没有Material Design风格组件丰富。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/cupertino.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-Widget概述"><a href="#2-3-Widget概述" class="headerlink" title="2.3 Widget概述"></a>2.3 Widget概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Flutter Widget采用现代响应式框架构建，这是从React中获得的灵感，中心思想是用widget构建你的UI。 Widget描述了他们的视图在给定其当前配置和状态时应该看起来像什么。当widget的状态发生变化时，widget会重新构建UI，Flutter会对比前后变化的不同， 以确定底层渲染树从一个状态转换到下一个状态所需的最小更改。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在Flutter中几乎所有的对象都是一个 widget，它不仅可以表示UI元素，也可以表示一些功能性的组件。在 Flutter中widget 的功能是“描述一个UI元素的配置信息（是 Widget 接收的参数）”，它就是说， Widget 其实并不是表示最终绘制在设备屏幕上的显示元素，而是根据配置信息最终生成Layer树然后显示。Flutter中根据Widget的布局绘制流程如下：</p><ol><li>根据 Widget 树生成一个 Element 树，Element 树中的节点都继承自 <code>Element</code> 类。</li><li>根据 Element 树生成 Render 树（渲染树），渲染树中的节点都继承自<code>RenderObject</code> 类。</li><li>根据渲染树生成 Layer 树，然后上屏显示，Layer 树中的节点都继承自 <code>Layer</code> 类。</li></ol><p><strong>这里需要注意：</strong></p><ol><li>三棵树中，Widget 和 Element 是一一对应的，但并不和 RenderObject 一一对应。比如 <code>StatelessWidget</code> 和 <code>StatefulWidget</code> 都没有对应的 RenderObject。</li><li>渲染树在上屏前会生成一棵 Layer 树</li></ol><h2 id="2-4-MaterialApp结构"><a href="#2-4-MaterialApp结构" class="headerlink" title="2.4 MaterialApp结构"></a>2.4 MaterialApp结构</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>一个最简单的Flutter应用程序，只需一个widget即可！如下面示例：将一个widget传给<code>runApp</code>函数即可。使用Material的UI风格，可以继承主题数，widget需要位于MaterialApp内才能正常显示， 因此我们使用MaterialApp来运行该应用。Material也是widget组件树组成一套UI风格，就好像html也是由不同html标签组成的DOM树，<strong>所以学习Flutter主要是学习Material中的组件使用方式</strong>；MaterialApp中的组件基本结构如下图：</p><img src='https://s4.ax1x.com/2022/01/08/7PHXo8.png' width='80%'/><ul><li>Scallold是Material中提供的基础的页面脚手架，包含Flutter应用主要展示的页面；</li></ul><h2 id="2-5-组件状态"><a href="#2-5-组件状态" class="headerlink" title="2.5 组件状态"></a>2.5 组件状态</h2><ol><li><p>状态概述：项目开发中，通常根据是否需要进行数据交互分为有状态组件（StatefulWidget）和无状态组件（StatelessWidget）。widget的主要工作是实现一个build函数，用以构建自身。</p></li><li><p>无状态组件：StatelessWidget</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 组件类名 <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> 组件类名(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>有状态组件：StatefulWidget：可以在_State对象中定义需要交互的数据信息</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 组件类名 <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> 组件类名(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  _State createState() =&gt; _State();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_State</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;&gt; </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Container();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-6-包管理"><a href="#2-6-包管理" class="headerlink" title="2.6 包管理"></a>2.6 包管理</h2><ol><li><p>pubspec.yaml：在软件开发中，将代码单独抽到一个独立模块，项目需要使用时再直接集成这个模块，便可大大提高开发效率。一个 App 在实际开发中往往会依赖很多包，手动来管理应用中的依赖包将会非常麻烦。 Flutter 使用配置文件<code>pubspec.yaml</code>（位于项目根目录）来管理第三方依赖包。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">flutter_in_action</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">First</span> <span class="string">Flutter</span> <span class="string">Application.</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.0</span><span class="number">.0</span><span class="string">+1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dependencies:</span></span><br><span class="line">  <span class="attr">flutter:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">  <span class="attr">cupertino_icons:</span> <span class="string">^0.1.2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_test:</span></span><br><span class="line">    <span class="attr">sdk:</span> <span class="string">flutter</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">uses-material-design:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>name</code>：应用或包名称。</li><li><code>description</code>: 应用或包的描述、简介。</li><li><code>version</code>：应用或包的版本号。</li><li><code>dependencies</code>：应用或包依赖的其它包或插件。</li><li><code>dev_dependencies</code>：开发环境依赖的工具包（而不是flutter应用本身依赖的包）。</li><li><code>flutter</code>：flutter相关的配置选项。</li></ul></blockquote></li><li><p>Pub仓库：Pub（<a href="https://pub.dev/">https://pub.dev/</a> ）是 Google 官方的 Dart Packages 仓库，类似于 node 中的 npm仓库。我们可以在 Pub 上面查找我们需要的包和插件，也可以向 Pub 发布我们的包和插件。使用方式</p><ul><li><p>搜索支持Flutter的包以及对应的版本</p></li><li><p>将包添加到Flutter项目的配置文件中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  flutter:</span><br><span class="line">    sdk: flutter</span><br><span class="line">  # 新添加的依赖</span><br><span class="line">  english_words: ^<span class="number">4.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure></li><li><p>执行pub get命令将第三方包拉取到当前项目中</p></li><li><p>在dart项目中import对应的包（dart基础：每个dart文件就属于一个包，引入后可以使用非私有对象）</p></li></ul></li><li><p>其它依赖方式</p><ul><li><p>依赖本地包</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">pkg1:</span><br><span class="line">        path: ../../code/pkg1</span><br></pre></td></tr></table></figure></li><li><p>依赖Git -&gt; 软件包位于仓库的根目录中</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  pkg1:</span><br><span class="line">    git:</span><br><span class="line">      url: git:<span class="comment">//github.com/xxx/pkg1.git</span></span><br></pre></td></tr></table></figure></li><li><p>依赖Git -&gt; 软件包不在仓库的根目录中可以使用path参数指定相对位置</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  package1:</span><br><span class="line">    git:</span><br><span class="line">      url: git:<span class="comment">//github.com/flutter/packages.git</span></span><br><span class="line">      path: packages/package1</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="2-7-状态管理"><a href="#2-7-状态管理" class="headerlink" title="2.7 状态管理"></a>2.7 状态管理</h2><h2 id="2-8-路由管理"><a href="#2-8-路由管理" class="headerlink" title="2.8 路由管理"></a>2.8 路由管理</h2><h2 id="2-9-Flutter-API"><a href="#2-9-Flutter-API" class="headerlink" title="2.9 Flutter API"></a>2.9 Flutter API</h2><ol><li><p>Json与Map</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;dart:convert&#x27;</span>;</span><br><span class="line"><span class="comment">// Map 转 JSON字符串</span></span><br><span class="line">json.encode(mapObj);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Json 解码，结果为Map</span></span><br><span class="line">json.decode(jsonString);</span><br></pre></td></tr></table></figure></li><li><p>网络请求第三方库：http</p><ul><li><p>Flutter下载http库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  ```</span><br><span class="line"></span><br><span class="line">- 引入http组件</span><br><span class="line"></span><br><span class="line">  ```dart</span><br></pre></td></tr></table></figure></li><li><p>发送请求案例</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">     ```</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 网络请求第三方库：dio</span><br><span class="line"></span><br><span class="line">   - Flutter下载dio库</span><br><span class="line"></span><br><span class="line">     ```sh</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li><li><p>引入dio库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     </span><br></pre></td></tr></table></figure></li><li><p>发送请求</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">     ```</span><br><span class="line"></span><br><span class="line">     </span><br><span class="line"></span><br><span class="line"># 第三章 Material基础</span><br><span class="line"></span><br><span class="line">## <span class="number">3.1</span> Scaffold</span><br><span class="line"></span><br><span class="line">- Scaffold属性</span><br><span class="line"></span><br><span class="line">  | Scaffold属性                   | 类型                         | 介绍                                                         |</span><br><span class="line">  | ------------------------------ | ---------------------------- | ------------------------------------------------------------ |</span><br><span class="line">  | appBar                         | PreferredSizeWidget          | 页面上方导航条                                               |</span><br><span class="line">  | body                           | Widget                       | 页面容器                                                     |</span><br><span class="line">  | floatingActionButton           | Widget                       | 悬浮按钮                                                     |</span><br><span class="line">  | floatingActionButtonLocation   | FloatingActionButtonLocation | 悬浮按钮位置                                                 |</span><br><span class="line">  | floatingActionButtonAnimator   | FloatingActionButtonAnimator | 悬浮按钮动画                                                 |</span><br><span class="line">  | persistentFooterButtons        | `<span class="built_in">List</span>&lt;Widget&gt;`               | 显示在底部导航条上方的一组按钮                               |</span><br><span class="line">  | drawer                         | Widget                       | 左侧菜单                                                     |</span><br><span class="line">  | onDrawerChanged                | DrawerCallback               |                                                              |</span><br><span class="line">  | endDrawer                      | Widget                       | 右侧菜单                                                     |</span><br><span class="line">  | onEndDrawerChanged             | DrawerCallback               |                                                              |</span><br><span class="line">  | bottomNavigationBar            | Widget                       | 底部导航条                                                   |</span><br><span class="line">  | bottomSheet                    | Widget                       | 一个持久停留在body下方，底部控件上方的控件                   |</span><br><span class="line">  | backgroundColor                | Color                        | 背景色                                                       |</span><br><span class="line">  | resizeToAvoidBottomPadding     | <span class="built_in">bool</span>                         | 已废弃，resizeToAvoidBottomInset作为替代                     |</span><br><span class="line">  | resizeToAvoidBottomInset       | <span class="built_in">bool</span>                         | 默认为 <span class="keyword">true</span>，防止一些小组件重复                              |</span><br><span class="line">  | primary                        | <span class="built_in">bool</span>                         | 是否在屏幕顶部显示Appbar, 默认为 <span class="keyword">true</span>，Appbar 是否向上延伸到状态栏，如电池电量，时间那一栏 |</span><br><span class="line">  | drawerDragStartBehavior        | DragStartBehavior            | 控制 drawer 的一些特性                                       |</span><br><span class="line">  | extendBody                     | <span class="built_in">bool</span>                         | body 是否延伸到底部控件                                      |</span><br><span class="line">  | extendBodyBehindAppBar         | <span class="built_in">bool</span>                         | 默认 <span class="keyword">false</span>，为 <span class="keyword">true</span> 时，body 会置顶到 appbar 后，如appbar 为半透明色，可以有毛玻璃效果 |</span><br><span class="line">  | drawerScrimColor               | Color                        | 侧滑栏拉出来时，用来遮盖主页面的颜色                         |</span><br><span class="line">  | drawerEdgeDragWidth            | <span class="built_in">double</span>                       | 侧滑栏拉出来的宽度                                           |</span><br><span class="line">  | drawerEnableOpenDragGesture    | <span class="built_in">bool</span>                         | 左侧侧滑栏是否可以滑动                                       |</span><br><span class="line">  | endDrawerEnableOpenDragGesture | <span class="built_in">bool</span>                         | 右侧侧滑栏是否可以滑动                                       |</span><br><span class="line"></span><br><span class="line">## <span class="number">3.2</span> AppBar</span><br><span class="line"></span><br><span class="line">- AppBar属性</span><br><span class="line"></span><br><span class="line">  | AppBar属性                | 介绍                                                         |</span><br><span class="line">  | ------------------------- | ------------------------------------------------------------ |</span><br><span class="line">  | leading                   | 可以定制左上角按钮                                           |</span><br><span class="line">  | automaticallyImplyLeading | 是否自动导入左上角按钮，默认为 <span class="keyword">true</span>，例如默认导入返回按钮    |</span><br><span class="line">  | title                     | AppBar 标题                                                  |</span><br><span class="line">  | actions                   | 右上角功能按钮，可自定义                                     |</span><br><span class="line">  | flexibleSpace             | 可折叠的应用栏，在改变 appBar 的 size 时有效果               |</span><br><span class="line">  | bottom                    | AppBar下方悬浮栏                                             |</span><br><span class="line">  | elevation                 | 阴影高度，默认为<span class="number">4.0</span>                                          |</span><br><span class="line">  | shadowColor               | 阴影颜色                                                     |</span><br><span class="line">  | shape                     | 阴影 ShapeBorder                                             |</span><br><span class="line">  | backgroundColor           | AppBar 背景色                                                |</span><br><span class="line">  | brightness                | Brightness.dark 和 Brightness.light，改变上方电池，时间等状态栏颜色 |</span><br><span class="line">  | iconTheme                 | 所有 icon 的主题                                             |</span><br><span class="line">  | actionsIconTheme          | actions 里的所有 icon 主题                                   |</span><br><span class="line">  | textTheme                 | text 主题                                                    |</span><br><span class="line">  | primary                   | AppBar 是否在整个屏幕最上方，为 <span class="keyword">true</span> 时，距离 AppBar 贴合状态栏下方，<span class="keyword">false</span> 时，贴合整个屏幕最上方 |</span><br><span class="line">  | centerTitle               | title 是否居中                                               |</span><br><span class="line">  | excludeHeaderSemantics    | 标题是否应该用头 [Semantics]. 默认为<span class="keyword">false</span>，没太大用          |</span><br><span class="line">  | titleSpacing              | title 距离左侧偏移量                                         |</span><br><span class="line">  | toolbarOpacity            | AppBar 透明度                                                |</span><br><span class="line">  | bottomOpacity             | bottom 透明度                                                |</span><br><span class="line">  | toolbarHeight             | AppBar 高度                                                  |</span><br><span class="line"></span><br><span class="line">## <span class="number">3.3</span> Drawer&amp;EndDrawer</span><br><span class="line"></span><br><span class="line">- Drawer（抽屉组件）：可以实现类似抽屉拉出和推入的效果，可以从侧边栏拉出导航面板。通常Drawer是和ListView组件组合使用的。Drawer是个抽屉组件，组件内容由其他Widget实现，可以添加头部效果，用DrawerHeader和UserAccountsDrawerHeader这两个组件可以实现。添加Drawer组件，Scaffold会自动给我们生成一个Drawer的按钮，如果我们在appBar中手动设置leading，确实是会更改这个按钮的图标，但是点击这个图标就不会弹出Drawer了，所以如果我们有需要自定义Drawer的图标的话</span><br><span class="line"></span><br><span class="line">  ```dart</span><br><span class="line">  leading: Builder(</span><br><span class="line">    builder: (BuildContext context)&#123;</span><br><span class="line">      <span class="keyword">return</span> IconButton(</span><br><span class="line">        icon: Icon(Icons.wifi_tethering),</span><br><span class="line">        onPressed: ()&#123;</span><br><span class="line">          Scaffold.of(context).openDrawer();</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  ),</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p>DrawerHeader：展示基本信息</p><table><thead><tr><th>属性名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>decoration</td><td>Decoration</td><td>header区域的decoration，通常用来设置背景颜色或者背景图片</td></tr><tr><td>curve</td><td>Curve</td><td>如果decoration发生了变化，则会使用curve设置的变化曲线和duration设置的动画时间来做一个切换动画</td></tr><tr><td>child</td><td>Widget</td><td>header里面所显示的内容控件</td></tr><tr><td>padding</td><td>EdgeInsetsGeometry</td><td>header里面内容控件的padding指。如果child为null的话，则这个值无效</td></tr><tr><td>margin</td><td>EdgeInsetsGeometry</td><td>header四周的间隙</td></tr></tbody></table></li><li><p>UserAccountsDraweHeader：展示用户头像、用户名、Email等信息</p><table><thead><tr><th>属性名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>margin</td><td>EdgeInsetsGeometry</td><td>Header四周的间隙</td></tr><tr><td>decoration</td><td>Decoration</td><td>header区域的decoration，通常用来设置背景颜色或者背景图片</td></tr><tr><td>currentAccountPicture</td><td>Widget</td><td>用来设置当前用户的头像</td></tr><tr><td>otherAccountsPictures</td><td>List<Widget></td><td>用来设置当前用户其他账号的头像</td></tr><tr><td>accountName</td><td>Widget</td><td>当前用户名</td></tr><tr><td>accountEmail</td><td>Widget</td><td>当前用户Email</td></tr><tr><td>onDetailsPressed</td><td>VoidCallBack</td><td>当accountName或accountEmail被点击的时候所触发的回调函数，可以用来显示其他额外的信息</td></tr></tbody></table></li></ul><h2 id="3-4-FloatingActionButton"><a href="#3-4-FloatingActionButton" class="headerlink" title="3.4 FloatingActionButton"></a>3.4 FloatingActionButton</h2><ul><li><p>FloatingActionButton 是一个悬浮在内容上的圆形图标按钮，每个屏幕中最多使用一个浮动按钮。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> FloatingActionButton(&#123;</span><br><span class="line">  Key key,</span><br><span class="line">  <span class="keyword">this</span>.child,<span class="comment">// 子组件 一般为Icon</span></span><br><span class="line">  <span class="keyword">this</span>.tooltip,<span class="comment">// 文字解释，长按时显示</span></span><br><span class="line">  <span class="keyword">this</span>.foregroundColor,<span class="comment">// 前景色</span></span><br><span class="line">  <span class="keyword">this</span>.backgroundColor, <span class="comment">// 背景色</span></span><br><span class="line">  <span class="keyword">this</span>.heroTag = <span class="keyword">const</span> _DefaultHeroTag(), <span class="comment">// hero效果使用的tag,系统默认会给所有FAB使用同一个tag,方便做动画效果</span></span><br><span class="line">  <span class="keyword">this</span>.elevation = <span class="number">6.0</span>, <span class="comment">// 未点击时的阴影值</span></span><br><span class="line">  <span class="keyword">this</span>.highlightElevation = <span class="number">12.0</span>, <span class="comment">// 点击时的阴影值</span></span><br><span class="line">  <span class="meta">@required</span> <span class="keyword">this</span>.onPressed, <span class="comment">// 点击事件回调</span></span><br><span class="line">  <span class="keyword">this</span>.mini = <span class="keyword">false</span>, <span class="comment">// 是否是 mini类型</span></span><br><span class="line">  <span class="keyword">this</span>.shape = <span class="keyword">const</span> CircleBorder(), <span class="comment">// 设置shape时，默认的elevation将会失效,默认为CircleBorder</span></span><br><span class="line">  <span class="keyword">this</span>.clipBehavior = Clip.none, <span class="comment">// </span></span><br><span class="line">  <span class="keyword">this</span>.materialTapTargetSize,</span><br><span class="line">  <span class="keyword">this</span>.isExtended = <span class="keyword">false</span>, <span class="comment">// 是否为”extended”类型</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-5-BottomNavigationBar"><a href="#3-5-BottomNavigationBar" class="headerlink" title="3.5 BottomNavigationBar"></a>3.5 BottomNavigationBar</h2><ul><li><p><strong>bottomNavigationBar</strong> 是属于 Scaffold 中的一个位于底部的控件。通常和 BottomNavigationBarItem 配合使用</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>items</td><td>List<BottomNavigationBarItem></td><td>底部导航栏的显示项</td></tr><tr><td>onTap</td><td></td><td>点击导航栏子项时的回调</td></tr><tr><td>currentIndex</td><td>int</td><td>当前显示项的下标</td></tr><tr><td>type</td><td>BottomNavigationBarType</td><td>底部导航栏的类型，有fixed和shifting两个类型</td></tr><tr><td>fixedColor</td><td>Color</td><td>底部导航栏type为fixed时导航栏的颜色</td></tr><tr><td>iconSize</td><td>double</td><td>BottomNavigationBarItem icon的大小</td></tr></tbody></table></li><li><p><strong>BottomNavigationBarItem</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>icon</td><td>Widget</td><td>要显示的图标控件，一般都是Iocn</td></tr><tr><td>title</td><td>Widget</td><td>要显示的标题控件，一般都是Text</td></tr><tr><td>activeIcon</td><td>Widget</td><td>选中时要显示的icon，一般也是Icon</td></tr><tr><td>backgroundColor</td><td>Color</td><td>BottomNavigationBarType为shifting时的背景颜色</td></tr></tbody></table></li></ul><h1 id="第四章-基础组件"><a href="#第四章-基础组件" class="headerlink" title="第四章 基础组件"></a>第四章 基础组件</h1><h2 id="4-1-基础组件"><a href="#4-1-基础组件" class="headerlink" title="4.1 基础组件"></a>4.1 基础组件</h2><h3 id="1-颜色：Color"><a href="#1-颜色：Color" class="headerlink" title="1. 颜色：Color"></a>1. 颜色：Color</h3><ul><li><p>颜色常用格式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Color c1 = Color(<span class="number">0xFF3CAAFA</span>);</span><br><span class="line">Color c2 = Color.fromRGBO(<span class="number">60</span>, <span class="number">170</span>, <span class="number">250</span>, <span class="number">1</span>);</span><br><span class="line">Color c3 = Color.fromARGB(<span class="number">255</span>, <span class="number">60</span>, <span class="number">170</span>, <span class="number">250</span>);</span><br><span class="line">Color c5 = Colors.blue;</span><br></pre></td></tr></table></figure><blockquote><ol><li>Color(int value)：value接收的是一个十六进制（0x开头),前两位表示的是十六进制透明度(00-FF),后六位是十六进制色值。</li><li>Color.fromRGBO(int r, int g, int b, double opacity)：r、g、b分别表示red、green、blue，常规的红绿蓝三色，取值范围为0-255，opacity表示透明度，取值0.0-1.0。</li><li>Color.fromARGB(int a, int r, int g, int b)：a表示透明度，取值0-255，rgb同上一样。</li><li>Colors._()：Colors类定义了很多颜色，可以直接使用</li></ol></blockquote></li><li><p>自定义颜色：举例如下，根据业务需求定义静态颜色对象</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:color_dart/RgbaColor.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThemeColors</span> </span>&#123;</span><br><span class="line">  <span class="comment">///<span class="language-markdown">主色调，按钮，特殊需要强调和突出的文字 -- 支付宝蓝色</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorTheme = Color.fromRGBO(<span class="number">56</span>, <span class="number">117</span>, <span class="number">246</span>, <span class="number">1</span>);</span><br><span class="line"> <span class="comment">///<span class="language-markdown">static Color colorTheme = rgba(56, 117, 246, 1);</span></span></span><br><span class="line">  <span class="comment">///<span class="language-markdown">主色调渐变用色，个别按钮和状态，从colorBtnLeft变化到colorBtnRight</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorBtnLeft = Color.fromRGBO(<span class="number">255</span>, <span class="number">251</span>, <span class="number">156</span>, <span class="number">51</span>);</span><br><span class="line">  <span class="keyword">static</span> Color colorBtnRight = Color.fromRGBO(<span class="number">255</span>, <span class="number">252</span>, <span class="number">191</span>, <span class="number">50</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">提示性文字，状态信息，按钮等</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorRed = Color.fromRGBO(<span class="number">255</span>, <span class="number">226</span>, <span class="number">36</span>, <span class="number">39</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">功能性较强的文字，内页标题等</span></span></span><br><span class="line">  <span class="keyword">static</span> Color color333333 = Color.fromRGBO(<span class="number">255</span>, <span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">正文，副标题以及可点击区域的主要文字和图标</span></span></span><br><span class="line">  <span class="keyword">static</span> Color color666666 = Color.fromRGBO(<span class="number">255</span>, <span class="number">102</span>, <span class="number">102</span>, <span class="number">102</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">弱化信息，提示性文字信息，不可点击状态</span></span></span><br><span class="line">  <span class="keyword">static</span> Color color999999 = Color.fromRGBO(<span class="number">255</span>, <span class="number">153</span>, <span class="number">153</span>, <span class="number">153</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">弱化信息，提示性文字信息</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorDDDDDD = Color.fromARGB(<span class="number">255</span>, <span class="number">221</span>, <span class="number">221</span>, <span class="number">221</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">背景区域划分，分割线</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorF6F6F8 = Color.fromARGB(<span class="number">255</span>, <span class="number">246</span>, <span class="number">246</span>, <span class="number">248</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">纯白色</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorWhite = Color.fromARGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">  <span class="comment">///<span class="language-markdown">纯黑色</span></span></span><br><span class="line">  <span class="keyword">static</span> Color colorBlack = Color.fromARGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装十六进制颜色工具类：使用十六进制颜色的时候透明度使用的比较少，封装十六进制方法默认透明为1；</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorsUtil</span> </span>&#123;</span><br><span class="line">   <span class="comment">/// <span class="language-markdown">十六进制颜色，</span></span></span><br><span class="line">   <span class="comment">/// <span class="language-markdown">hex, 十六进制值，例如：0xffffff,</span></span></span><br><span class="line">   <span class="comment">/// <span class="language-markdown">alpha, 透明度 [0.0,1.0]</span></span></span><br><span class="line">   <span class="keyword">static</span> Color hexColor(<span class="built_in">int</span> hex,&#123;<span class="built_in">double</span> alpha = <span class="number">1</span>&#125;)&#123;</span><br><span class="line">    <span class="keyword">if</span> (alpha &lt; <span class="number">0</span>)&#123;</span><br><span class="line">      alpha = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (alpha &gt; <span class="number">1</span>)&#123;</span><br><span class="line">      alpha = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Color.fromRGBO((hex &amp; <span class="number">0xFF0000</span>) &gt;&gt; <span class="number">16</span> ,</span><br><span class="line">         (hex &amp; <span class="number">0x00FF00</span>) &gt;&gt; <span class="number">8</span>,</span><br><span class="line">         (hex &amp; <span class="number">0x0000FF</span>) &gt;&gt; <span class="number">0</span>,</span><br><span class="line">         alpha);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-图标：Icon"><a href="#2-图标：Icon" class="headerlink" title="2. 图标：Icon"></a>2. 图标：Icon</h3><ul><li><p>Material内置图标：<a href="https://fonts.google.com/icons?selected=Material+Icons:account_balance">Google图标库</a></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Icon(Icons.图标名称),</span><br></pre></td></tr></table></figure></li><li><p>使用自定义图标</p><ol><li><p>阿里巴巴图标库下载字体图标：<code>https://www.iconfont.cn/</code>，并解压添加ttf文件到Flutter项目中</p></li><li><p>在pubspec.yaml文件中配置字体</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fonts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">family:</span> <span class="string">myIcons</span></span><br><span class="line"><span class="attr">fonts:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">asset:</span> <span class="string">assets/fonts/iconfont.ttf</span></span><br></pre></td></tr></table></figure></li><li><p>定义自定义图标的名称：自定义一个Icon工具类，添加的图标定义名称.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="comment">// 下面代码中的 blog home book 是自己定义的图标名称，</span></span><br><span class="line"><span class="comment">//不做规范适情况而改。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyIcons</span></span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> IconData blog= <span class="keyword">const</span> IconData(</span><br><span class="line">    <span class="number">0xe722</span>,</span><br><span class="line">    fontFamily: <span class="string">&quot;myIcons&quot;</span>,</span><br><span class="line">    matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> IconData home= <span class="keyword">const</span> IconData(</span><br><span class="line">    <span class="number">0xe619</span>,</span><br><span class="line">    fontFamily: <span class="string">&quot;myIcons&quot;</span>,</span><br><span class="line">    matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> IconData book= <span class="keyword">const</span> IconData(</span><br><span class="line">    <span class="number">0xe623</span>,</span><br><span class="line">    fontFamily: <span class="string">&quot;myIcons&quot;</span>,</span><br><span class="line">    matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> IconData video= <span class="keyword">const</span> IconData(</span><br><span class="line">    <span class="number">0xe614</span>,</span><br><span class="line">    fontFamily: <span class="string">&quot;myIcons&quot;</span>,</span><br><span class="line">    matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> IconData mine= <span class="keyword">const</span> IconData(</span><br><span class="line">    <span class="number">0xe600</span>,</span><br><span class="line">    fontFamily: <span class="string">&quot;myIcons&quot;</span>,</span><br><span class="line">    matchTextDirection: <span class="keyword">true</span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第一个参数是codePoint值，在图标压缩包中的demo_index.html文件中可以查看，<strong>把&amp;#改成0就好</strong></p></blockquote></li><li><p>使用自定义图标</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">icon: Icon(MyIcons.home)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="3-文字：Text"><a href="#3-文字：Text" class="headerlink" title="3. 文字：Text"></a>3. 文字：Text</h3><ul><li><p><strong>Text参数说明</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>data</strong></td><td>String</td><td><strong>必传</strong>：要显示的字符串</td></tr><tr><td><strong>style</strong></td><td>TextStyle</td><td>文本样式</td></tr><tr><td>strutStyle</td><td>StrutStyle</td><td></td></tr><tr><td><strong>textAlign</strong></td><td>TextAlign</td><td>水平对齐方式<br/> - TextAlign.center：将文本对齐容器的中心。<br/> - TextAlign.end：对齐容器后缘上的文本。<br/> - TextAlign.justify：拉伸以结束的文本行以填充容器的宽度<br/> - TextAlign.left：对齐容器左边缘的文本。<br/> - TextAlign.right：对齐容器右边缘的文本。<br/> - TextAlign.start：对齐容器前缘上的文本。</td></tr><tr><td>textDirection</td><td>TextDirection</td><td>文本方向 <br /> - TextDirection.ltr：文本从左向右流动<br /> - TextDirection.rtl：文本从右向左流动</td></tr><tr><td>locale</td><td>Locale</td><td>用于选择区域特定字形的语言环境</td></tr><tr><td>softWrap</td><td>bool</td><td>文本过长，是否需要换行</td></tr><tr><td>overflow</td><td>TextOverflow</td><td>处理视觉溢出<br /> - TextOverflow.clip：剪切溢出的文本<br /> - TextOverflow.ellipsis：使用省略号表示<br /> - TextOverflow.fade：将溢出的文本淡化为透明</td></tr><tr><td>textScaleFactor</td><td>double</td><td>每个逻辑像素的字体像素数</td></tr><tr><td>maxLines</td><td>int</td><td>文本要跨越的可选最大行数,为1，则文本不会换行</td></tr><tr><td>semanticsLabel</td><td>String</td><td>图像的语义描述，用于向Andoid上的<span title='talkback是一款由谷歌官方开发的系统软件,它的定位是帮助盲人或者视力有障碍的用户提供语言辅助'>TalkBack</span>和iOS上的<span title='Voiceover功能是APPLE公司在2009年4月新推出的一种语音辅助程序'>VoiceOver</span>提供图像描述</td></tr><tr><td>textWidthBasis</td><td>TextWidthBasis</td><td></td></tr><tr><td>textHeightBehavior</td><td>TextHeightBehavior</td><td></td></tr></tbody></table></li><li><p><strong>TextStyle文本样式</strong></p><table><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>color</td><td>Color</td><td>文本颜色。如果指定了foreground，则此值必须为null。</td></tr><tr><td>decoration</td><td>TextDecoration</td><td>绘制文本装饰<br /> - 下划线（TextDecoration.underline）<br /> - 上划线（TextDecoration.overline）<br /> - 删除线（TextDecoration.lineThrough）<br /> - 无（TextDecoration.none）</td></tr><tr><td>decorationColor</td><td>Color</td><td>绘制文本装饰的颜色。</td></tr><tr><td>decorationStyle</td><td>TextDecorationStyle</td><td>绘制文本装饰的样式:<br/> - 画一条虚线 TextDecorationStyle.dashed<br/> - 画一条虚线 TextDecorationStyle.dotted<br/> - 画两条线 TextDecorationStyle.double<br/> - 画一条实线 TextDecorationStyle.solid<br/> - 画一条正弦线(波浪线) TextDecorationStyle.wavy</td></tr><tr><td>fontWeight</td><td>FontWeight</td><td>绘制文本时使用的字体粗细<br /> - FontWeight.bold 常用的字体重量比正常重。即w700<br/> - FontWeight.normal 默认字体粗细。即w400<br/> - FontWeight.w100 薄，最薄<br/> - FontWeight.w200 特轻<br/> - FontWeight.w300 轻<br/> - FontWeight.w400 正常/普通/平原<br/> - FontWeight.w500 较粗<br/> - FontWeight.w600 半粗体<br/> - FontWeight.w700 加粗<br/> - FontWeight.w800 特粗<br/> - FontWeight.w900 最粗</td></tr><tr><td>fontStyle</td><td>FontStyle</td><td>字体变体：<br /> - FontStyle.italic 使用斜体<br /> - FontStyle.normal 使用直立</td></tr><tr><td>textBaseline</td><td>TextBaseline</td><td>对齐文本的水平线:<br /> - TextBaseline.alphabetic：文本基线是标准的字母基线<br /> - TextBaseline.ideographic：文字基线是表意字基线；如果字符本身超出了alphabetic 基线，那么ideograhpic基线位置在字符本身的底部。</td></tr><tr><td>fontFamily</td><td>String</td><td>使用的字体名称</td></tr><tr><td>fontSize</td><td>double</td><td>字体大小(pt、sp)，默认为14个逻辑像素(14pt、14sp)</td></tr><tr><td>letterSpacing</td><td>double</td><td>水平字母之间的空间间隔</td></tr><tr><td>wordSpacing</td><td>double</td><td>单词之间添加的空间间隔</td></tr><tr><td>height</td><td>double</td><td>文本行与行的高度，作为字体大小的倍数（取值1~2，如1.2）</td></tr><tr><td>background</td><td>Paint</td><td>文本背景色</td></tr><tr><td>foreground</td><td>Paint</td><td>文本的前景色</td></tr><tr><td>shadows</td><td><code>List&lt;Shadow&gt;</code></td><td>背景设定（边框、圆角、阴影、形状、渐变、背景图像等）<br /> - BoxDecoration:实现边框、圆角、阴影、形状、渐变、背景图像<br/> - ShapeDecoration:实现四个边分别指定颜色和宽度、底部线、矩形边色、圆形边色、体育场（竖向椭圆）、 角形（八边角）边色<br/> - FlutterLogoDecoration:实现Flutter图片<br/> - UnderlineTabindicator:下划线</td></tr></tbody></table></li></ul><h3 id="4-富文本：RichText"><a href="#4-富文本：RichText" class="headerlink" title="4. 富文本：RichText"></a>4. 富文本：RichText</h3><ul><li><p>富文本格式（Rich Text Format）即RTF格式，又称多文本格式，是由微软公司开发的跨平台文档格式。大多数的文字处理软件都能读取和保存RTF文档。</p></li><li><p>RichText参数</p><table><thead><tr><th>RichText参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>overflow</td><td>TextOverflow</td><td>对不可见文本操作<br />TextOverflow.ellipsis 以…显示不可见文本<br/>TextOverflow.visible 只显示能看到的<br/>TextOverflow.clip 减掉溢出文本(<strong>默认</strong>)<br/>TextOverflow.fade 将溢出的文本淡入透明。</td></tr><tr><td>maxLines</td><td>int</td><td>用来设置最大行数</td></tr><tr><td>textAlign</td><td>TextAlign</td><td>对齐属性</td></tr><tr><td>textScaleFactor</td><td>double</td><td>文字放大缩小倍数</td></tr><tr><td>textDirection</td><td>TextDirection</td><td>文本排列方式<br />TextDirection.rtl文本从右到左<br/>TextDirection.ltr文本从左到右</td></tr><tr><td>text</td><td>TextSpan</td><td>必传参数,用来展示文本</td></tr><tr><td>recognizer</td><td>TapGestureRecognizer</td><td>手势监听</td></tr></tbody></table></li><li><p>使用案例</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//协议说明文案</span></span><br><span class="line"><span class="built_in">String</span> userPrivateProtocol =</span><br><span class="line">  <span class="string">&quot;我们一向尊重并会严格保护用户在使用本产品时的合法权益（包括用户隐私、用户数据等）不受到任何侵犯。本协议（包括本文最后部分的隐私政策）是用户（包括通过各种合法途径获取到本产品的自然人、法人或其他组织机构，以下简称“用户”或“您”）与我们之间针对本产品相关事项最终的、完整的且排他的协议，并取代、合并之前的当事人之间关于上述事项的讨论和协议。本协议将对用户使用本产品的行为产生法律约束力，您已承诺和保证有权利和能力订立本协议。用户开始使用本产品将视为已经接受本协议，请认真阅读并理解本协议中各种条款，包括免除和限制我们的免责条款和对用户的权利限制（未成年人审阅时应由法定监护人陪同），如果您不能接受本协议中的全部条款，请勿开始使用本产品&quot;</span>;</span><br><span class="line"></span><br><span class="line">Widget buildContent(BuildContext context) &#123;</span><br><span class="line">  <span class="keyword">return</span> Container(</span><br><span class="line">    <span class="comment">//ListView可滑动</span></span><br><span class="line">    child: RichText(</span><br><span class="line">      <span class="comment">//必传文本</span></span><br><span class="line">      text: <span class="keyword">new</span> TextSpan(</span><br><span class="line">        text: <span class="string">&quot;请认真阅读并理解&quot;</span>,</span><br><span class="line">        style: TextStyle(color: Colors.grey),</span><br><span class="line">        <span class="comment">//手势监听</span></span><br><span class="line">        <span class="comment">// recognizer: ,</span></span><br><span class="line">        children: [</span><br><span class="line">          TextSpan(text: <span class="string">&quot;&lt;用户协议&gt;&quot;</span>,style: TextStyle(color: Colors.blueAccent),),</span><br><span class="line">          TextSpan(text: <span class="string">&quot;与&quot;</span>,style: TextStyle(color: Colors.grey),),</span><br><span class="line">          TextSpan(text: <span class="string">&quot;&lt;隐私协议&gt;&quot;</span>,style: TextStyle(color: Colors.blueAccent),),</span><br><span class="line">          TextSpan(text: userPrivateProtocol,style: TextStyle(color: Colors.grey),)</span><br><span class="line">        ]),</span><br><span class="line">    ),</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-按钮"><a href="#5-按钮" class="headerlink" title="5. 按钮"></a>5. 按钮</h3><ul><li><p><strong>Material 组件库中提供了多种按钮组件</strong>：不同的Button拥有不同的功能，<strong>它们都有如下共同属性</strong></p><blockquote><ol><li><p>按下时都会有“水波动画”</p></li><li><p>有一个onPressed属性来设置点击回调，当按钮按下时会执行该回调，如果不提供该回调则按钮会处于禁用状态</p></li></ol></blockquote><table><thead><tr><th align="left">Button</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">MaterialButton</td><td align="left">默认按钮，扁平，背景透明。按下后，会有背景色。</td></tr><tr><td align="left">RaisedButton<br /><strong>ElevatedButton</strong> 1.22</td><td align="left">“漂浮”按钮，带有阴影和背景。按下后，阴影会变大。<br /> 1.22 后对应主题ElevatedButtonTheme</td></tr><tr><td align="left">FlatButton<br /><strong>TextButton</strong> 1.22</td><td align="left">扁平按钮，默认背景透明。按下后，会有背景色，与MaterialButton一致。<br />1.22 后对应主题TextButtonTheme</td></tr><tr><td align="left">IconButton</td><td align="left">图标按钮，只能是纯图标，按钮不可展示文案。</td></tr><tr><td align="left">FloatingActionButton</td><td align="left">浮动按钮，可显示文字和图标，二者选其一。</td></tr><tr><td align="left">OutlineButton<br /><strong>OutlinedButton</strong> 1.22</td><td align="left">外边框按钮，可设置按钮外边框颜色。<br />1.22 后对应主题OutlinedButtonTheme</td></tr><tr><td align="left">ButtonBar</td><td align="left">水平布局的按钮容器，可放置多个Button或Text。</td></tr><tr><td align="left">lButton.icon()</td><td align="left">带图标文字混合按钮，RaisedButton、FlatButton、OutlineButton都有一个icon 构造函数，<br />它可以轻松创建带图标和文字的按钮。</td></tr></tbody></table><blockquote><p><strong>注：1.22后调整了3个按钮</strong>：想要将以前的按钮调整为统一的外观比较麻烦，因此以前经常使用自定义的按钮，而新增的按钮解决了此类问题，可以非常方便的设置整体外观。</p></blockquote></li><li><p>按钮使用案例</p><ol><li><p>MaterialButton：默认按钮，扁平，背景透明。按下后，会有背景色。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MaterialButton(</span><br><span class="line">  child: <span class="keyword">new</span> Text(<span class="string">&#x27;MaterialButton&#x27;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>ElevatedButton：”漂浮”按钮，带有阴影和背景。按下后，阴影会变大。也是应用最常见的按钮。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ElevatedButton(</span><br><span class="line">  child: <span class="keyword">new</span> Text(<span class="string">&#x27;RaisedButton&#x27;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>TextButton：扁平按钮，默认背景透明。按下后，会有背景色，与MaterialButton一致。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TextButton(</span><br><span class="line">  child: <span class="keyword">new</span> Text(<span class="string">&#x27;FlatButton&#x27;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>IconButton：图标按钮，只能是纯图标，按钮不可展示文案。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> IconButton(</span><br><span class="line">  icon: <span class="keyword">new</span> Icon(Icons.wifi),</span><br><span class="line">  tooltip: <span class="string">&#x27;click IconButton&#x27;</span>,</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>FloatingActionButton：浮动按钮，可显示文字和图标，二者选其一。可在页面通过设置floatingActionButton来指定页面悬浮按钮，默认在右下角。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">appBar: AppBar(</span><br><span class="line">  title: <span class="keyword">new</span> Text(<span class="string">&quot;按钮控件&quot;</span>),</span><br><span class="line">),</span><br><span class="line">floatingActionButton: <span class="keyword">new</span> FloatingActionButton(</span><br><span class="line">  child: <span class="keyword">new</span> Icon(Icons.add_a_photo),</span><br><span class="line">  <span class="comment">// child: new Text(&#x27;FloatingActionButton&#x27;),</span></span><br><span class="line">  tooltip: <span class="string">&#x27;click FloatingActionButton&#x27;</span>,</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>OutlinedButton：外边框按钮，可设置按钮外边框颜色。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">OutlinedButton(</span><br><span class="line">  child: Text(<span class="string">&quot;OutlineButton&quot;</span>),</span><br><span class="line">  borderSide: <span class="keyword">new</span> BorderSide(color: Colors.pink),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>ButtonBar：水平布局的按钮容器，可放置多个Button或Text。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> ButtonBar(</span><br><span class="line">  children: &lt;Widget&gt;[</span><br><span class="line">    <span class="keyword">new</span> BackButton(),</span><br><span class="line">    <span class="keyword">new</span> CloseButton(),</span><br><span class="line">    <span class="keyword">new</span> Text(<span class="string">&#x27;ButtonBar组件&#x27;</span>),</span><br><span class="line">    <span class="keyword">new</span> RaisedButton(</span><br><span class="line">      child: <span class="keyword">new</span> Text(<span class="string">&#x27;Button&#x27;</span>),</span><br><span class="line">      onPressed: () &#123;&#125;,</span><br><span class="line">    ),</span><br><span class="line">  ],</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>Button.icon：带图标文字混合按钮，RaisedButton、FlatButton、OutlineButton都有一个icon 构造函数，它可以轻松创建带图标和文字的按钮。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RaisedButton.icon(</span><br><span class="line">  icon: Icon(Icons.send),</span><br><span class="line">  label: Text(<span class="string">&quot;发送&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line">OutlineButton.icon(</span><br><span class="line">  icon: Icon(Icons.add),</span><br><span class="line">  label: Text(<span class="string">&quot;添加&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br><span class="line">FlatButton.icon(</span><br><span class="line">  icon: Icon(Icons.info),</span><br><span class="line">  label: Text(<span class="string">&quot;详情&quot;</span>),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">),</span><br></pre></td></tr></table></figure></li><li><p>自定义Button样式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">FlatButton(</span><br><span class="line">  color: Colors.blue,</span><br><span class="line">  highlightColor: Colors.blue[<span class="number">700</span>],</span><br><span class="line">  colorBrightness: Brightness.dark,</span><br><span class="line">  splashColor: Colors.grey,</span><br><span class="line">  child: Text(<span class="string">&quot;Submit&quot;</span>),</span><br><span class="line">  shape: RoundedRectangleBorder(</span><br><span class="line">    borderRadius: BorderRadius.circular(<span class="number">20.0</span>)),</span><br><span class="line">  onPressed: () &#123;&#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="6-图片：Image"><a href="#6-图片：Image" class="headerlink" title="6. 图片：Image"></a>6. 图片：Image</h3><ul><li><p><strong>Image组件构造函数</strong>：Image的数据源可以是asset、文件、内存以及网络。Image 组件有多种构造函数</p><table><thead><tr><th>构造函数</th><th>说明</th></tr></thead><tbody><tr><td>new Image</td><td>从 ImageProvider 获取图像</td></tr><tr><td>new Image.asset</td><td>加载资源图片</td></tr><tr><td>new Image.file</td><td>加载本地图片文件</td></tr><tr><td>new Image.network</td><td>加 载网络图片</td></tr><tr><td>new Image.memory</td><td>加载 Uint8List 资源图片</td></tr></tbody></table></li><li><p><strong>Image组件常见属性</strong></p><table><thead><tr><th>属性名</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>image</td><td>ImageProvider</td><td>抽象类，需要自己实现获取图片数据的操作</td></tr><tr><td>width/height</td><td>double</td><td>Image 显示区域的宽度和高度设置，这里需要把 Image 和图片两 个东西区分开，图片本身有大小， Image Widget 是图片的容器，本 身也有大小。 宽度和高度的配置经常和 fit 属性配合使用</td></tr><tr><td>fit</td><td>BoxFit</td><td>图片填充模式 ， <br /> - Boxfit.fill=会拉伸填充满显示空间<br /> - Boxfit.contain=在保证图片本身长宽比不变的情况下缩放以适应当前显示空间<br /> - Boxfit.cover=按图片的长宽比放大后居中填满显示空间，超出显示空间部分会被剪裁。<br /> - BoxFit.fitWidth=图片的宽度会缩放到显示空间的宽度，高度会按比例缩放<br /> - BoxFit.fitHeight= 图片的高度会缩放到显示空间的高度，宽度会按比例缩放<br /> - Boxfit.none=图片没有适应策略，会在显示空间内显示图片<br /> - BoxFit.scaleDown=效果和 Boxfit.contain差不多但是此属性不允许显示超过源图片大小，即可小不可大</td></tr><tr><td>color</td><td>Color</td><td>图片颜色</td></tr><tr><td>colorBlendMode</td><td>BlendMode</td><td>在对图片进行手动处理的时候，可能用到图层混合，如改变图片的颜色。 此属性可以对颜色进行混合处理。 有多种模式</td></tr><tr><td>alignment</td><td>Alignment</td><td>控制图片的摆放位置，比如l图片放置在右下角则为 Alignment. bottomRight</td></tr><tr><td>repeat</td><td>ImageRepeat</td><td>此属性可以设置图片重复模式 。 noRepeat 为不重复， Repeat 为 x 和 y 方向重复， repeatX 为 x 方向重复， repeatY 为 y 方向重复</td></tr><tr><td>centerSlice</td><td>Rect</td><td>当图片需要被拉伸显示时， centerSIice 定义的矩形区域会被拉仰 ， 可以理解成我们在图片内部定义 一个点 9 个点文件用作拉伸， 9个 点为“上” “下 ” “左”“右”“上中”“下 中 ”“左中”“右中 ” “正中”</td></tr><tr><td>matchTextDirection</td><td>bool</td><td>matchTextDirection 与 Directionality 配合使用。 TextDirection 有两个值分别为: TextDirection.ltr 从左向右展示图片， TextDirection.rtl  从右向左展示图片</td></tr><tr><td>gaplessPlayback</td><td>bool</td><td>当 lmageProvider 发生变化后 ， 重新加载图片的过程中 ， 原图片的展示是否保留 。 值为 true 则保留;值为 false 则不保留， 直接空 白等待下一张图片加载</td></tr></tbody></table><blockquote><ul><li><p>ImageProvider：是一个抽象类，主要定义了图片数据获取的接口 load()，从不同的数据源获取图片需要实现不同的 ImageProvider ，如 AssetImage 是实现了从 Asset 中加载图片的 ImageProvider，而 NetworkImage 实现了从网络加载图片的 ImageProvider。</p></li><li><p>asset 图片资源配置</p><ol><li><p>在工程根目录下创建一个 images 目录，并将图片拷贝到该目录。</p></li><li><p>在 pubspec.yaml 中的 flutter 部分添加如下内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="attr">flutter:</span></span><br><span class="line">  <span class="attr">assets:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">images/a_dot_burr.jpeg</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">images/a_dot_ham.jpeg</span></span><br></pre></td></tr></table></figure></li><li><p>加载图片</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Image.asset(</span><br><span class="line">  <span class="string">&quot;images/avatar.png&quot;</span>,</span><br><span class="line">  width: <span class="number">100.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol></li><li><p>network网络图片加载</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Image.network(</span><br><span class="line">  <span class="string">&quot;https://avatars2.githubusercontent.com/u/20411648?s=460&amp;v=4&quot;</span>,</span><br><span class="line">  width: <span class="number">100.0</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></blockquote></li></ul><h2 id="4-2-表单组件"><a href="#4-2-表单组件" class="headerlink" title="4.2 表单组件"></a>4.2 表单组件</h2><h3 id="1-文本框：TextField"><a href="#1-文本框：TextField" class="headerlink" title="1. 文本框：TextField"></a>1. 文本框：TextField</h3><ul><li><p>TextField是一个<code>material design</code>风格的输入框，也是属性最多、功能点最多的Widget。</p><table><thead><tr><th>TextField属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>controller</td><td>TextEditingController</td><td>绑定输入框预设内容<br />获取输入框输入内容<br />监听输入框输入和焦点变化</td></tr><tr><td>focusNode</td><td></td><td></td></tr><tr><td>decoration</td><td>InputDecoration</td><td>输入框样式设置</td></tr><tr><td>keyboardType</td><td></td><td>TextField成为焦点时显示的键盘类型<br /> - TextInputType.text（普通完整键盘）<br/> - TextInputType.number（数字键盘）<br/> - TextInputType.emailAddress（带有“@”的普通键盘）<br/> - TextInputType.datetime（带有“/”和“：”的数字键盘）<br/> - TextInputType.multiline（带有选项以启用有符号和十进制模式的数字键盘）</td></tr><tr><td>textInputAction</td><td>TextInputAction</td><td>更改键盘本身的操作按钮</td></tr><tr><td>textCapitalization</td><td>TextCapitalization</td><td>何使输入字母大写的选项。<br /> - TextCapitalization.sentences-每个句子的首字母大写<br /> - TextCapitalization.characters:大写句子中的所有字符<br /> - TextCapitalization.words : 将每个单词的首字母大写</td></tr><tr><td>style</td><td>TextStyle</td><td>输入的文本样式</td></tr><tr><td>strutStyle</td><td></td><td></td></tr><tr><td>textAlign</td><td>TextAlign</td><td>本币对齐方式</td></tr><tr><td>textAlignVertical</td><td></td><td></td></tr><tr><td>textDirection</td><td></td><td></td></tr><tr><td>readOnly</td><td>bool</td><td>是否只读，只读表示不可编辑</td></tr><tr><td>toolbarOptions</td><td>ToolbarOptions</td><td></td></tr><tr><td>showCursor</td><td></td><td></td></tr><tr><td>autofocus</td><td>bool</td><td>是否自动获得焦点，如果有多个以第一个为准</td></tr><tr><td>obscuringCharacter</td><td></td><td></td></tr><tr><td>obscureText</td><td>bool</td><td>是否是密码框</td></tr><tr><td>autocorrect</td><td></td><td></td></tr><tr><td>smartDashesType</td><td>SmartDashesType</td><td></td></tr><tr><td>smartQuotesType</td><td>SmartQuotesType</td><td></td></tr><tr><td>enableSuggestions</td><td>bool</td><td></td></tr><tr><td>maxLines</td><td>int</td><td>输入框的最大行数</td></tr><tr><td>minLines</td><td>int</td><td>输入框的最小行数</td></tr><tr><td>expands</td><td>bool</td><td></td></tr><tr><td>maxLength</td><td>int</td><td>输入框可输入字符数</td></tr><tr><td>maxLengthEnforcement</td><td></td><td></td></tr><tr><td>onChanged</td><td></td><td>输入框内容改变时候回调</td></tr><tr><td>onEditingComplete</td><td></td><td></td></tr><tr><td>onSubmitted</td><td></td><td>内容提交(按回车)的回调</td></tr><tr><td>onAppPrivateCommand</td><td></td><td></td></tr><tr><td>inputFormatters</td><td></td><td></td></tr><tr><td>enabled</td><td></td><td>是否启用，不启用会置灰</td></tr><tr><td>cursorWidth</td><td>int</td><td>输入框光标快宽度</td></tr><tr><td>cursorHeight</td><td>int</td><td>输入框光标快高度</td></tr><tr><td>cursorRadius</td><td>Radius</td><td>输入框光标圆角半径</td></tr><tr><td>cursorColor</td><td>Colors</td><td>输入框光标颜色</td></tr><tr><td>selectionHeightStyle</td><td>ui.BoxHeightStyle</td><td></td></tr><tr><td>selectionWidthStyle</td><td>ui.BoxWidthStyle</td><td></td></tr><tr><td>keyboardAppearance</td><td></td><td></td></tr><tr><td>scrollPadding</td><td>EdgeInsets</td><td></td></tr><tr><td>dragStartBehavior</td><td>DragStartBehavior</td><td></td></tr><tr><td>enableInteractiveSelection</td><td>bool</td><td></td></tr><tr><td>selectionControls</td><td></td><td></td></tr><tr><td>onTap</td><td></td><td></td></tr><tr><td>mouseCursor</td><td></td><td></td></tr><tr><td>buildCounter</td><td></td><td></td></tr><tr><td>scrollController</td><td></td><td></td></tr><tr><td>scrollPhysics</td><td></td><td></td></tr><tr><td>autofillHints</td><td></td><td></td></tr><tr><td>clipBehavior</td><td></td><td></td></tr><tr><td>restorationId</td><td>Clip</td><td></td></tr><tr><td>enableIMEPersonalizedLearning</td><td>bool</td><td></td></tr></tbody></table><blockquote><ul><li><p>Controller</p><ol><li><p>初始化Controller</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化空的Controller</span></span><br><span class="line">TextEditingController _editingController = <span class="keyword">new</span> TextEditingController();</span><br><span class="line"><span class="comment">// 初始化Controller并设置text属性作为输入框默认值</span></span><br><span class="line">TextEditingController _controller2 = <span class="keyword">new</span> TextEditingController(text: <span class="string">&quot;初始化的&quot;</span>);</span><br><span class="line"><span class="comment">// 监听输入框</span></span><br><span class="line">controller.addListener(() &#123;</span><br><span class="line">  <span class="comment">// TODO _editingController.text获取内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>根据Controller获取输入框的内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_editingController.text</span><br></pre></td></tr></table></figure></li><li><p>修改输入框中的内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_editingController.text = &lt;新内容&gt;;</span><br></pre></td></tr></table></figure></li><li><p>清除输入框中内容</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_editingController.text = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="comment">///<span class="language-markdown">或者使用clear方法</span></span></span><br><span class="line">_editingController.clear();</span><br></pre></td></tr></table></figure></li></ol></li></ul></blockquote></li><li><p>InputDecoration是输入框装饰器</p><table><thead><tr><th>InputDecoration属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>icon</td><td>Icon</td><td>左侧外的图标</td></tr><tr><td>iconColor</td><td>Color</td><td>图标颜色</td></tr><tr><td>label</td><td></td><td></td></tr><tr><td>labelText</td><td></td><td>悬浮提示，可代替hintText</td></tr><tr><td>labelStyle</td><td></td><td>悬浮提示文字的样式</td></tr><tr><td>floatingLabelStyle</td><td></td><td></td></tr><tr><td>helperText</td><td></td><td></td></tr><tr><td>helperStyle</td><td></td><td></td></tr><tr><td>helperMaxLines</td><td></td><td></td></tr><tr><td>hintText</td><td></td><td>输入提示</td></tr><tr><td>hintStyle</td><td></td><td>输入提示样式</td></tr><tr><td>hintTextDirection</td><td></td><td></td></tr><tr><td>hintMaxLines</td><td></td><td></td></tr><tr><td>errorText</td><td></td><td>错误提示</td></tr><tr><td>errorStyle</td><td></td><td>错误提示样式</td></tr><tr><td>errorMaxLines</td><td></td><td></td></tr><tr><td>floatingLabelBehavior</td><td></td><td></td></tr><tr><td>isCollapsed</td><td>bool</td><td></td></tr><tr><td>isDense</td><td></td><td></td></tr><tr><td>contentPadding</td><td></td><td></td></tr><tr><td>prefixIcon</td><td>Icon</td><td>左侧内的图标</td></tr><tr><td>prefixIconColor</td><td>Color</td><td>左侧内的图标颜色</td></tr><tr><td>prefixIconConstraints</td><td></td><td></td></tr><tr><td>prefix</td><td></td><td>左侧组件</td></tr><tr><td>prefixText</td><td></td><td>左侧内的文字</td></tr><tr><td>prefixStyle</td><td></td><td>左侧内的文字样式</td></tr><tr><td>suffix</td><td></td><td>右侧组件：和suffixText不能同时存在</td></tr><tr><td>suffixText</td><td></td><td>右侧提示：和suffix不能同时存在</td></tr><tr><td>suffixStyle</td><td></td><td>右侧提示样式</td></tr><tr><td>suffixIcon</td><td></td><td>右侧内图标</td></tr><tr><td>suffixIconColor</td><td></td><td>右侧内图标颜色</td></tr><tr><td>suffixIconConstraints</td><td></td><td></td></tr><tr><td>counter</td><td></td><td>自定义计数器</td></tr><tr><td>counterText</td><td></td><td>计数文字</td></tr><tr><td>counterStyle</td><td></td><td>计数文字</td></tr><tr><td>filled</td><td></td><td>是否填充</td></tr><tr><td>fillColor</td><td></td><td>填充颜色</td></tr><tr><td>focusColor</td><td></td><td>输入框获取焦点时颜色</td></tr><tr><td>hoverColor</td><td></td><td>鼠标覆盖时候输入框颜色</td></tr><tr><td>errorBorder</td><td></td><td>发生错误时候边框颜色</td></tr><tr><td>focusedBorder</td><td></td><td>获取焦点时候边框颜色</td></tr><tr><td>focusedErrorBorder</td><td></td><td></td></tr><tr><td>disabledBorder</td><td></td><td>不可用时候边框</td></tr><tr><td>enabledBorder</td><td></td><td>启用时编译</td></tr><tr><td>border</td><td></td><td>边框</td></tr><tr><td>enabled</td><td></td><td>是否启用</td></tr><tr><td>semanticCounterText</td><td></td><td></td></tr><tr><td>alignLabelWithHint</td><td></td><td></td></tr><tr><td>constraints</td><td></td><td></td></tr></tbody></table></li></ul><h3 id="2-单选：Radio"><a href="#2-单选：Radio" class="headerlink" title="2. 单选：Radio"></a>2. 单选：Radio</h3><ul><li><p>Radio属性</p><table><thead><tr><th>Radio属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>value</strong></td><td>T</td><td>单选的值</td></tr><tr><td><strong>groupValue</strong></td><td>String</td><td>选择组的值，单选组使用同一个状态对象</td></tr><tr><td><strong>onChanged</strong></td><td></td><td>改变时触发回调</td></tr><tr><td>mouseCursor</td><td></td><td>鼠标光标</td></tr><tr><td>toggleable</td><td>bool</td><td></td></tr><tr><td>activeColor</td><td>Color</td><td>选中时填充颜色</td></tr><tr><td>fillColor</td><td>Color</td><td></td></tr><tr><td>focusColor</td><td>Color</td><td>聚焦颜色</td></tr><tr><td>hoverColor</td><td>Color</td><td>悬停颜色</td></tr><tr><td>overlayColor</td><td></td><td></td></tr><tr><td>splashRadius</td><td></td><td></td></tr><tr><td>materialTapTargetSize</td><td></td><td>内边距，默认最小点击区域为 48 * 48</td></tr><tr><td>visualDensity</td><td></td><td></td></tr><tr><td>focusNode</td><td></td><td></td></tr><tr><td>autofocus</td><td>bool</td><td>自动聚焦，默认为 false</td></tr></tbody></table></li></ul><h3 id="3-单选列表：RadioListTile"><a href="#3-单选列表：RadioListTile" class="headerlink" title="3. 单选列表：RadioListTile"></a>3. 单选列表：RadioListTile</h3><ul><li><p>RadioListTile属性</p><table><thead><tr><th>RadioListTile属性</th><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><strong>value</strong></td><td></td><td></td></tr><tr><td><strong>groupValue</strong></td><td></td><td></td></tr><tr><td><strong>onChanged</strong></td><td></td><td></td></tr><tr><td>toggleable</td><td></td><td></td></tr><tr><td>activeColor</td><td></td><td></td></tr><tr><td>title</td><td></td><td></td></tr><tr><td>subtitle</td><td></td><td></td></tr><tr><td>isThreeLine</td><td>bool</td><td></td></tr><tr><td>dense</td><td></td><td></td></tr><tr><td>secondary</td><td></td><td></td></tr><tr><td>selected</td><td></td><td></td></tr><tr><td>controlAffinity</td><td>ListTileControlAffinity</td><td></td></tr><tr><td>autofocus</td><td>bool</td><td></td></tr><tr><td>contentPadding</td><td></td><td></td></tr><tr><td>shape</td><td></td><td></td></tr><tr><td>tileColor</td><td></td><td></td></tr><tr><td>selectedTileColor</td><td></td><td></td></tr><tr><td>visualDensity</td><td></td><td></td></tr><tr><td>focusNode</td><td></td><td></td></tr><tr><td>enableFeedback</td><td></td><td></td></tr></tbody></table></li></ul><h3 id="4-复选：Checkbox"><a href="#4-复选：Checkbox" class="headerlink" title="4. 复选：Checkbox"></a>4. 复选：Checkbox</h3><ul><li><p>Checkbox属性</p><table><thead><tr><th>Checkbox属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td></td><td></td></tr><tr><td>onChanged</td><td></td><td></td></tr><tr><td>tristate</td><td></td><td></td></tr><tr><td>mouseCursor</td><td></td><td></td></tr><tr><td>activeColor</td><td></td><td></td></tr><tr><td>fillColor</td><td></td><td></td></tr><tr><td>checkColor</td><td></td><td></td></tr><tr><td>focusColor</td><td></td><td></td></tr><tr><td>hoverColor</td><td></td><td></td></tr><tr><td>overlayColor</td><td></td><td></td></tr><tr><td>splashRadius</td><td></td><td></td></tr><tr><td>materialTapTargetSize</td><td></td><td></td></tr><tr><td>visualDensity</td><td></td><td></td></tr><tr><td>focusNode</td><td></td><td></td></tr><tr><td>autofocus</td><td>bool</td><td></td></tr><tr><td>shape</td><td></td><td></td></tr><tr><td>side</td><td></td><td></td></tr></tbody></table></li></ul><h3 id="5-下拉选：DropdownButton"><a href="#5-下拉选：DropdownButton" class="headerlink" title="5. 下拉选：DropdownButton"></a>5. 下拉选：DropdownButton</h3><ul><li><p>DropdownButton属性 </p><table><thead><tr><th>DropdownButton属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>items</strong></td><td>DropdownMenuItem</td><td>下拉选项列表</td></tr><tr><td><strong>onChanged</strong></td><td></td><td>选择 item 回调</td></tr><tr><td>selectedItemBuilder</td><td></td><td>选项 item 构造器</td></tr><tr><td>value</td><td>T</td><td>选中内容</td></tr><tr><td>hint</td><td></td><td>启动状态下默认内容</td></tr><tr><td>disabledHint</td><td></td><td>禁用状态下默认内容</td></tr><tr><td>elevation</td><td></td><td>阴影高度</td></tr><tr><td>style</td><td></td><td>选项列表 item 样式</td></tr><tr><td>underline</td><td></td><td>按钮下划线</td></tr><tr><td>icon</td><td></td><td>下拉按钮图标</td></tr><tr><td>iconDisabledColor</td><td></td><td>禁用状态下图标颜色</td></tr><tr><td>iconEnabledColor</td><td></td><td>启动时图标颜色</td></tr><tr><td>iconSize</td><td></td><td>图标尺寸</td></tr><tr><td>isDense</td><td></td><td>是否降低按钮高度</td></tr><tr><td>isExpanded</td><td></td><td>是否将下拉列表内容设置水平填充</td></tr></tbody></table></li><li><p>DropdownMenuItem属性</p><table><thead><tr><th>DropdownMenuItem属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>T</td><td>对应选中状态内容</td></tr><tr><td>child</td><td>Widget</td><td>下拉列表 item 内容</td></tr></tbody></table></li></ul><h3 id="6-进度条：-ProgressIndicator"><a href="#6-进度条：-ProgressIndicator" class="headerlink" title="6. 进度条：*ProgressIndicator"></a>6. 进度条：*ProgressIndicator</h3><ul><li><p>条形进度条：LinearProgressIndicator</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>double</td><td></td></tr><tr><td>backgroundColor</td><td>Color</td><td></td></tr><tr><td>Color</td><td>Color</td><td></td></tr><tr><td>valueColor</td><td>Animation&lt;Color?&gt;</td><td></td></tr><tr><td>minHeight</td><td></td><td></td></tr><tr><td>semanticsLabel</td><td>String</td><td></td></tr><tr><td>semanticsValue</td><td>String</td><td></td></tr></tbody></table></li><li><p>环形进度条：CircularProgressIndicator</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>value</td><td>double</td><td></td></tr><tr><td>backgroundColor</td><td>Color</td><td></td></tr><tr><td>color</td><td>Color</td><td></td></tr><tr><td>valueColor</td><td>Animation&lt;Color?&gt;</td><td></td></tr><tr><td>strokeWidth</td><td></td><td></td></tr><tr><td>semanticsLabel</td><td>String</td><td></td></tr><tr><td>semanticsValue</td><td>String</td><td></td></tr></tbody></table></li><li><p>Slider：滑动进度条</p></li></ul><h3 id="7-日历"><a href="#7-日历" class="headerlink" title="7. 日历"></a>7. 日历</h3><ul><li><p>日期时间转换相关API</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前时间</span></span><br><span class="line"><span class="built_in">DateTime</span>.now();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前时间的时间戳</span></span><br><span class="line"><span class="built_in">DateTime</span>.now().microsecondsSinceEpoch;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把时间戳转为为日期对象</span></span><br><span class="line"><span class="built_in">DateTime</span>.fromMicrosecondsSinceEpoch(<span class="number">1641950846731362</span>);</span><br></pre></td></tr></table></figure></li><li><p>第三方包（date_fromat）API：日期格式化</p><ol><li><p>添加第三方包依赖：date_format</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add date_format</span><br></pre></td></tr></table></figure></li><li><p>引入第三方包</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:date_format/date_format.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>date_format相关API</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据指定格式格式化日期对象</span></span><br><span class="line">formatDate(<span class="built_in">DateTime</span>(<span class="number">1989</span>, <span class="number">02</span>, <span class="number">21</span>), [yyyy, <span class="string">&#x27;-&#x27;</span>, mm, <span class="string">&#x27;-&#x27;</span>, dd]);</span><br></pre></td></tr></table></figure></li></ol></li><li><p>Flutter自带的日历组件：showDatePicker（返回Future异步结果）</p><table><thead><tr><th>showDatePicker 属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>context</td><td>BuildContext</td><td>组件上下文</td></tr><tr><td>initialDate</td><td>DateTime</td><td>默认选中的时间</td></tr><tr><td>firstDate</td><td>DateTime</td><td>日历时间上限</td></tr><tr><td>lastDate</td><td>DateTime</td><td>日历时间下限</td></tr><tr><td>currentDate</td><td>DateTime</td><td></td></tr><tr><td>initialEntryMode</td><td>DatePickerEntryMode</td><td></td></tr><tr><td>selectableDayPredicate</td><td>SelectableDayPredicate</td><td></td></tr><tr><td>helpText</td><td>String</td><td></td></tr><tr><td>cancelText</td><td>String</td><td></td></tr><tr><td>confirmText</td><td>String</td><td></td></tr><tr><td>Locale</td><td>locale</td><td></td></tr><tr><td>useRootNavigator</td><td>bool</td><td></td></tr><tr><td>routeSettings</td><td>RouteSettings</td><td></td></tr><tr><td>textDirection</td><td>TextDirection</td><td></td></tr><tr><td>builder</td><td>TransitionBuilder</td><td></td></tr><tr><td>initialDatePickerMode</td><td>DatePickerMode</td><td></td></tr><tr><td>errorFormatText</td><td>String</td><td></td></tr><tr><td>errorInvalidText</td><td>String</td><td></td></tr><tr><td>fieldHintText</td><td>String</td><td></td></tr><tr><td>fieldLabelText</td><td>String</td><td></td></tr></tbody></table></li><li><p>Flutter自带的时间组件：showTimePicker（返回Future异步结果）</p><table><thead><tr><th>showTimePicker属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td><strong>context</strong></td><td>BuildContext</td><td></td></tr><tr><td><strong>initialTime</strong></td><td>TimeOfDay</td><td></td></tr><tr><td>builder</td><td>TransitionBuilder</td><td></td></tr><tr><td>useRootNavigator</td><td>bool</td><td></td></tr><tr><td>initialEntryMode</td><td>TimePickerEntryMode</td><td></td></tr><tr><td>cancelText</td><td>String</td><td></td></tr><tr><td>confirmText</td><td>String</td><td></td></tr><tr><td>helpText</td><td>String</td><td></td></tr><tr><td>errorInvalidText</td><td>String</td><td></td></tr><tr><td>hourLabelText</td><td>String</td><td></td></tr><tr><td>minuteLabelText</td><td>String</td><td></td></tr><tr><td>routeSettings</td><td>RouteSettings</td><td></td></tr><tr><td>onEntryModeChanged</td><td>EntryModeChangeCallback</td><td></td></tr></tbody></table></li></ul><h3 id="9-第三方日历"><a href="#9-第三方日历" class="headerlink" title="9. 第三方日历"></a>9. 第三方日历</h3><ul><li><p>下载第三方日历：flutter_datetime_picker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flutter pub add date_time_picker</span><br></pre></td></tr></table></figure></li><li><p>引入组件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:date_time_picker/date_time_picker.dart&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="10-表单：Form"><a href="#10-表单：Form" class="headerlink" title="10. 表单：Form"></a>10. 表单：Form</h3><h3 id="11-表格"><a href="#11-表格" class="headerlink" title="11. 表格"></a>11. 表格</h3><h2 id="4-3-其他"><a href="#4-3-其他" class="headerlink" title="4.3 其他"></a>4.3 其他</h2><ol><li>TabBar</li><li>TabBarView</li><li>TabController</li><li>AlterDialog</li><li>SimpleDialog</li><li>Divider</li><li>Chip</li><li>Opacity</li><li>ReorderableListView</li></ol><h1 id="第五章-容器组件"><a href="#第五章-容器组件" class="headerlink" title="第五章 容器组件"></a>第五章 容器组件</h1><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>容器组件是根据Widget功能方便学习而总结的，Flutter官方未指定什么是容器组件。容器组件主要功能是在布局中添加页面上内容的组件，容器类Widget一般只需要接收一个子Widget（child），他们直接或间接继承自（或包含）SingleChildRenderObjectWidget。并对其添加一些修饰（补白或背景色等）、变换(旋转或剪裁等)、或限制(大小等)。</p><h2 id="5-1-内边距"><a href="#5-1-内边距" class="headerlink" title="5.1 内边距"></a>5.1 内边距</h2><h3 id="1-Padding"><a href="#1-Padding" class="headerlink" title="1. Padding"></a>1. Padding</h3><ul><li><p>Padding：可以给其子节点添加填充（留白），和边距效果类似</p><table><thead><tr><th>Padding属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>padding</td><td>EdgeInsetsGeometry</td><td>是一个抽象类，开发中，我们一般都使用<code>EdgeInsets</code>类</td></tr><tr><td>child</td><td>Widget</td><td></td></tr></tbody></table></li><li><p>EdgeInsets使用说明</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别指定四个方向的填充。</span></span><br><span class="line">EdgeInsets.fromLTRB(<span class="built_in">double</span> left, <span class="built_in">double</span> top, <span class="built_in">double</span> right, <span class="built_in">double</span> bottom);</span><br><span class="line"><span class="comment">// 所有方向均使用相同数值的填充</span></span><br><span class="line">EdgeInsets.all(<span class="built_in">double</span> value);</span><br><span class="line"><span class="comment">// 设置具体某个方向的填充(可以同时指定多个方向)</span></span><br><span class="line">EdgeInsets.only(&#123;left, top, right ,bottom &#125;);</span><br><span class="line"><span class="comment">// 用于设置对称方向的填充，vertical指top和bottom，horizontal指left和right。</span></span><br><span class="line">EdgeInsets.symmetric(&#123; vertical, horizontal &#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-SafeArea"><a href="#2-SafeArea" class="headerlink" title="2. SafeArea"></a>2. SafeArea</h3><ul><li><p>SafeArea属性</p><table><thead><tr><th>SafeArea属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>left</td><td>bool</td><td></td></tr><tr><td>top</td><td>bool</td><td></td></tr><tr><td>right</td><td>bool</td><td></td></tr><tr><td>bottom</td><td>bool</td><td></td></tr><tr><td>minimum</td><td>EdgeInsets</td><td></td></tr><tr><td>maintainBottomViewPadding</td><td>bool</td><td></td></tr></tbody></table></li></ul><h2 id="5-2-容器尺寸"><a href="#5-2-容器尺寸" class="headerlink" title="5.2 容器尺寸"></a>5.2 容器尺寸</h2><h3 id="1-ConstrainedBox"><a href="#1-ConstrainedBox" class="headerlink" title="1. ConstrainedBox"></a>1. ConstrainedBox</h3><ul><li><p>ConstrainedBox：用于对子控件添加额外的约束</p><table><thead><tr><th>ConstrainedBox属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>constraints</td><td>BoxConstraints</td><td>对子组件的宽高的限制<br /> - minWidth：最小宽度<br /> - maxWidth：最大宽度<br /> - minHeight：最小高度<br /> - maxHeight：最大高度</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table></li><li><p>案例代码</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Body</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> Body(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Center(</span><br><span class="line">      child: Container(</span><br><span class="line">        width: <span class="number">300</span>,</span><br><span class="line">        height: <span class="number">400</span>,</span><br><span class="line">        decoration: BoxDecoration(border: Border.all()),</span><br><span class="line">        <span class="comment">//利用UnconstrainedBox 消除之前限制</span></span><br><span class="line">        child: UnconstrainedBox(</span><br><span class="line">          <span class="comment">// 对child进行约束，</span></span><br><span class="line">          child: ConstrainedBox(</span><br><span class="line">            constraints: <span class="keyword">const</span> BoxConstraints(</span><br><span class="line">              minHeight: <span class="number">30</span>,</span><br><span class="line">              minWidth: <span class="number">30</span>,</span><br><span class="line">              maxHeight: <span class="number">150</span>,</span><br><span class="line">              maxWidth: <span class="number">150</span>),</span><br><span class="line">            <span class="comment">// 子组件最大不会大于被约束的高度</span></span><br><span class="line">            child: Container(</span><br><span class="line">              width: <span class="number">310</span>,</span><br><span class="line">              height: <span class="number">310</span>,</span><br><span class="line">              decoration: BoxDecoration(</span><br><span class="line">                borderRadius: BorderRadius.circular(<span class="number">20</span>),</span><br><span class="line">                gradient: <span class="keyword">const</span> LinearGradient(</span><br><span class="line">                  colors: [Colors.blue, Colors.purple]),</span><br><span class="line">              ),</span><br><span class="line">            ))),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-UnconstrainedBox"><a href="#2-UnconstrainedBox" class="headerlink" title="2. UnconstrainedBox"></a>2. UnconstrainedBox</h3><ul><li><p>UnconstrainedBox作用对 child 不添加任何约束，允许他以 “自然”大小进行渲染。</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>child</td><td></td><td></td></tr><tr><td>textDirection</td><td></td><td></td></tr><tr><td>alignment</td><td>Alignment</td><td></td></tr><tr><td>constrainedAxis</td><td></td><td></td></tr><tr><td>clipBehavior</td><td>Clip</td><td></td></tr></tbody></table></li></ul><h3 id="3-SizedBox"><a href="#3-SizedBox" class="headerlink" title="3. SizedBox"></a>3. SizedBox</h3><ul><li><p>SizedBox两种用法：一是可用来设置两个widget之间的间距，二是可以用来限制子组件的大小。</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>width</td><td></td><td>宽度</td></tr><tr><td>height</td><td></td><td>高度</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table></li></ul><h3 id="4-AspectRatio"><a href="#4-AspectRatio" class="headerlink" title="4. AspectRatio"></a>4. AspectRatio</h3><ul><li><p>AspectRatio纵横比：作用是根据父元素的设置调整子元素child的宽高比，宽高比是相对父容器的，子元素的宽是父容器的宽，高是根据指定的比例计算出来的</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>aspectRatio</td><td>double</td><td>宽/高</td></tr><tr><td>child</td><td>Widget</td><td>子元素</td></tr></tbody></table></li></ul><h3 id="5-LimtedBox"><a href="#5-LimtedBox" class="headerlink" title="5. LimtedBox"></a>5. LimtedBox</h3><ul><li><p>LimtedBox：一个当其自身不受约束时才限制其大小的盒子</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>maxWidth</td><td>double</td><td>最大宽度</td></tr><tr><td>maxHeight</td><td>double</td><td>最大高度</td></tr><tr><td>child</td><td>Widget</td><td>子元素</td></tr></tbody></table></li></ul><h3 id="6-FractionallySizedBox"><a href="#6-FractionallySizedBox" class="headerlink" title="6. FractionallySizedBox"></a>6. FractionallySizedBox</h3><ul><li><p>FittedBox：用法与SizedBox类似，只不过FractionallySizedBox的宽高是百分比大小，widthFactor，heightFactor参数就是相对于父控件的比例。注意设置FractionallySizedBox宽高后，其子组件设置的宽高将不起作用</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>alignment</td><td>Alignment</td><td></td></tr><tr><td>widthFactor</td><td></td><td>宽度百分比</td></tr><tr><td>heightFactor</td><td></td><td>高度百分比</td></tr><tr><td>child</td><td>Widget</td><td></td></tr></tbody></table></li></ul><h3 id="7-Align"><a href="#7-Align" class="headerlink" title="7. Align"></a>7. Align</h3><ul><li><p>Align：可以调整子组件的位置，并且可以根据子组件的宽高来确定自身的的宽高，根据是两个缩放因子，会分别乘以子元素的宽、高，最终的结果就是Align 组件的宽高</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>alignment</td><td>Alignment</td><td>子组件在父组件中的起始位置</td></tr><tr><td>widthFactor</td><td></td><td>确定Align 组件本身高的属性</td></tr><tr><td>heightFactor</td><td></td><td>确定Align 组件本身宽的属性</td></tr><tr><td>child</td><td>Widget</td><td>子组件</td></tr></tbody></table></li></ul><h2 id="5-3-容器装饰"><a href="#5-3-容器装饰" class="headerlink" title="5.3 容器装饰"></a>5.3 容器装饰</h2><ol><li><p>DecoratedBox</p><ul><li><p>DecoratedBox是个抽象类，具体实现使用BoxDecoration组件，可以给child增加显示效果，如颜色，阴影，边框等</p><table><thead><tr><th>属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>color</td><td>Color</td><td>颜色</td></tr><tr><td>image</td><td>DecorationImage</td><td>图片</td></tr><tr><td>border</td><td>BoxBorder</td><td>边框</td></tr><tr><td>borderRadius</td><td>BorderRadiusGeometry</td><td>圆角</td></tr><tr><td>boxShadow</td><td><code>List&lt;BoxShadow&gt;</code></td><td>阴影,可以指定多个</td></tr><tr><td>gradient</td><td>Gradient</td><td>渐变</td></tr><tr><td>backgroundBlendMode</td><td>BlendMode</td><td>背景混合模式</td></tr><tr><td>shape</td><td>BoxShape</td><td>形状</td></tr></tbody></table></li></ul></li></ol><h2 id="5-4-容器变形"><a href="#5-4-容器变形" class="headerlink" title="5.4 容器变形"></a>5.4 容器变形</h2><p>Transform</p><p>AnimatedPadding</p><p>RotateBox</p><h2 id="5-5-剪裁"><a href="#5-5-剪裁" class="headerlink" title="5.5 剪裁"></a>5.5 剪裁</h2><ul><li>ClipOval</li><li>ClipRRect</li><li>ClipRect</li><li>ClipPath</li><li>CustomClipper</li></ul><h2 id="5-6-其他"><a href="#5-6-其他" class="headerlink" title="5.6 其他"></a>5.6 其他</h2><ol><li>Container</li><li>Center</li><li>OverflowBox</li><li>SizedOverflowBox</li></ol><h1 id="第六章-布局组件"><a href="#第六章-布局组件" class="headerlink" title="第六章 布局组件"></a>第六章 布局组件</h1><p>5.Row（横向排布）<br>6.Column（纵向排布）<br>7.Expanded和Flexible<br>8.Stack和Positioned（层叠布局）<br>10.RefreshIndicator和ListView（下拉刷新）<br>20.Card（卡片式布局）</p><table><thead><tr><th>Widget</th><th>说明</th><th>用途</th></tr></thead><tbody><tr><td>LeafRenderObjectWidget</td><td>非容器类组件基类</td><td>Widget树的叶子节点，用于没有子节点的widget，通常基础组件都属于这一类，如Image。</td></tr><tr><td>SingleChildRenderObjectWidget</td><td>单子组件基类</td><td>包含一个子Widget，如：ConstrainedBox、DecoratedBox等</td></tr><tr><td>MultiChildRenderObjectWidget</td><td>多子组件基类</td><td>包含多个子Widget，一般都有一个children参数，接受一个Widget数组。如Row、Column、Stack等</td></tr></tbody></table><p>尺寸限制类容器用于限制容器大小，Flutter中提供了多种这样的容器，如<code>ConstrainedBox</code>、<code>SizedBox</code>、<code>UnconstrainedBox</code>、<code>AspectRatio</code> 等，本节将介绍一些常用的。</p><p>所谓线性布局，即指沿水平或垂直方向排列子组件。Flutter 中通过<code>Row</code>和<code>Column</code>来实现线性布局，类似于Android 中的<code>LinearLayout</code>控件。<code>Row</code>和<code>Column</code>都继承自<code>Flex</code>，我们将在弹性布局一节中详细介绍<code>Flex</code>。</p><p>弹性布局（Flex）Wrap</p><h2 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h2><p>Stack、Positioned</p><h2 id="Align"><a href="#Align" class="headerlink" title="Align"></a>Align</h2><p>Alignment</p><p>FractionalOffset</p><p>Center</p><p>LayoutBuilder、AfterLayout</p><h1 id="第七章-滚动组件"><a href="#第七章-滚动组件" class="headerlink" title="第七章 滚动组件"></a>第七章 滚动组件</h1><ul><li>列表：ListView</li><li>列表：GridView</li></ul><h1 id="第八章-功能组件"><a href="#第八章-功能组件" class="headerlink" title="第八章 功能组件"></a>第八章 功能组件</h1><h1 id="第九章-事件与通知"><a href="#第九章-事件与通知" class="headerlink" title="第九章 事件与通知"></a>第九章 事件与通知</h1><p>14.PageView（滑动视图）<br>22.LinearGradient（颜色渐变）<br>24. GestureDetector(手势监控）<br>26.（透明度）<br>27.MediaQuery.removePadding(去除组件之间空格）<br>29.（拖拽排序组件）</p><h1 id="第十章-动画"><a href="#第十章-动画" class="headerlink" title="第十章 动画"></a>第十章 动画</h1><h1 id="第十一章-自定义组件"><a href="#第十一章-自定义组件" class="headerlink" title="第十一章 自定义组件"></a>第十一章 自定义组件</h1><h1 id="第十二章-文件操作与网络请求"><a href="#第十二章-文件操作与网络请求" class="headerlink" title="第十二章 文件操作与网络请求"></a>第十二章 文件操作与网络请求</h1><h1 id="第十三章-国际化"><a href="#第十三章-国际化" class="headerlink" title="第十三章 国际化"></a>第十三章 国际化</h1><h1 id="第十四章-Flutter核心原理"><a href="#第十四章-Flutter核心原理" class="headerlink" title="第十四章 Flutter核心原理"></a>第十四章 Flutter核心原理</h1><h1 id="第十五章-Flutter项目总结"><a href="#第十五章-Flutter项目总结" class="headerlink" title="第十五章 Flutter项目总结"></a>第十五章 Flutter项目总结</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Flutter概述&quot;&gt;&lt;a href=&quot;#第一章-Flutter概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 Flutter概述&quot;&gt;&lt;/a&gt;第一章 Flutter概述&lt;/h1&gt;&lt;h1 id=&quot;第二章-Flutter基础&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
      <category term="WEB" scheme="http://yoursite.com/tags/WEB/"/>
    
  </entry>
  
  <entry>
    <title>0603-Vue</title>
    <link href="http://yoursite.com/2006/03/01/0603-Vue/"/>
    <id>http://yoursite.com/2006/03/01/0603-Vue/</id>
    <published>2006-02-28T16:02:00.000Z</published>
    <updated>2022-04-09T00:10:10.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第三章-组件化开发"><a href="#第三章-组件化开发" class="headerlink" title="第三章 组件化开发"></a>第三章 组件化开发</h1><h2 id="3-1-组件化入门"><a href="#3-1-组件化入门" class="headerlink" title="3.1 组件化入门"></a>3.1 组件化入门</h2><h3 id="1-组件概述"><a href="#1-组件概述" class="headerlink" title="1. 组件概述"></a>1. 组件概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>前端代码开发中，程序实现是希望尽可能多的做到代码重用，然而前端在代码重用中可能会产生CSS样式和JS业务逻辑的冲突；由此产生的Web Components开发标准：其核心思想是通过创建封装特定功能的定制元素（Vue的实现方式是用一个自定义标签封装独立的前端代码并且具有特定的功能），并且能够解决冲突问题；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>但是这个Web Components标准没有被浏览器广泛支持，但是Vue部分实现了Web Components开发标准。把不同的功能在不同的组件中开发，通过组件组合的方式实现功能的同一实现。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>组件设计是将不同的功能封装在不同的组件中，通过组件的整合形成完整意义上的一个应用；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Vue中组件分为全局组件和局部组件，在Vue组件本质也是一个Vue实例，拥有Vue对象的全部属性：如data、methods等等；组件注册实际上是将定义好的组件绑定到Vue实例中，可以将组件定义在Vue对象（java中称类）上，称为全局组件，这样所有的vue实例都可以使用该组件；如果将组件定义在Vue实例上，称为局部组件，可以在当前Vue实例范围内使用；</p><h3 id="2-组件分类"><a href="#2-组件分类" class="headerlink" title="2. 组件分类"></a>2. 组件分类</h3><ul><li>根据组件的使用范围：①全局组件②局部组件</li><li>根据组件的引用关系：①父组件②子组件</li></ul><h3 id="3-组件特点"><a href="#3-组件特点" class="headerlink" title="3. 组件特点"></a>3. 组件特点</h3><ul><li><strong>组件使用的三个基础步骤</strong>：①创建组件、②注册组件、③使用组件；</li><li><strong>组件是可复用的 Vue 实例</strong>：组件与 <code>new Vue</code> 接收相同的选项，例如 <code>data</code>、<code>computed</code>、<code>watch</code>、<code>methods</code> 以及生命周期钩子等。仅有的例外是像 <code>el</code> 这样根实例特有的选项；</li><li><strong>组件的 data 选项</strong>：必须是一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝；</li><li><strong>组件树</strong>：通常一个应用会以一棵嵌套的组件树的形式来组织，根组件是Vue实例，其他组件必须先注册便于Vue识别：有两种注册类型全局注册和局部注册；</li><li><strong>每个组件必须只有一个根元素</strong>：组件中可以将模板的内容包裹在一个父元素内。</li></ul><h2 id="3-2-组件创建"><a href="#3-2-组件创建" class="headerlink" title="3.2 组件创建"></a>3.2 组件创建</h2><h3 id="1-extend"><a href="#1-extend" class="headerlink" title="1. extend"></a>1. extend</h3><ul><li><p>Vue组件创建的底层函数：使用textend()方法根据传递的参数选项创建组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;app&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><br><span class="line">        3. 使用组件</span><br><span class="line">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 1. 创建组件对象</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> cpn = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 组件选项</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ... ...</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 注册全局组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;组件名称&#x27;</span>, cpn)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 注册局部组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;组件名称&#x27;</span>: cpn</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-extend语法糖"><a href="#2-extend语法糖" class="headerlink" title="2. extend语法糖"></a>2. extend语法糖</h3><ul><li><p>为简化使用extend()创建组件步骤，Vue提供组件创建语法糖：将组件的创建和注册在语法上整合在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&#x27;app&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        3. 使用组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">cpn</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2 注册全局组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;组件名称&#x27;</span>, &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 组件选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// ... ...</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 2. 注册局部组件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="string">&#x27;组件名称&#x27;</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// 组件选项</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="comment">// ... ...</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-template抽取-lt-script-gt"><a href="#3-template抽取-lt-script-gt" class="headerlink" title="3. template抽取&lt;script&gt;"></a>3. template抽取<code>&lt;script&gt;</code></h3><ul><li><p>在上述方法中，组件模板内容是定义在template的字符串中，这并适合前端代码开发，所以需要将组件模块内容定义在html文本区域;</p></li><li><p>方案一：定义在<code>&lt;script&gt;</code>标签中，使用script作为模板的根标签，script标签的type必须是<code>text/x-template</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.定义组件模板内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/x-template&quot;</span> <span class="attr">id</span>=<span class="string">&quot;自定义组件模板名称&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    组件内容</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2. 创建组件时候使用 template 引用组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> component = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;#id值&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-template抽取-lt-template-gt"><a href="#4-template抽取-lt-template-gt" class="headerlink" title="4. template抽取&lt;template&gt;"></a>4. template抽取<code>&lt;template&gt;</code></h3><ul><li><p>方案二：使用<code>&lt;template&gt;</code>标签作为组件根标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;自定义组件模板名称&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>组件内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> component = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">template</span>: <span class="string">&#x27;#id值&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-template模块化"><a href="#5-template模块化" class="headerlink" title="5. template模块化"></a>5. template模块化</h3><ul><li>方案三：将组件选项单独定义为ES6的一个模块，在这个模块中export组件对象，在父组件中import这个模块中的组件对象并注册到父组件中；</li></ul><h3 id="5-vue-cli组件"><a href="#5-vue-cli组件" class="headerlink" title="5. vue-cli组件"></a>5. vue-cli组件</h3><ul><li>使用vue-cli创建</li></ul><h2 id="3-3-组件数据"><a href="#3-3-组件数据" class="headerlink" title="3.3 组件数据"></a>3.3 组件数据</h2><h3 id="1-父传子"><a href="#1-父传子" class="headerlink" title="1. 父传子"></a>1. 父传子</h3><ul><li><p><strong>props数组</strong>：Prop 是可以在组件上注册的一些自定义 attribute。当一个值传递给一个 prop attribute 的时候，它就变成了那个组件实例的一个 property。可以用一个 <code>props</code> 选项将其包含在该组件可接受的 prop 列表中：列表中可以拥有任意数量的 prop，任何值都可以传递给任何 prop。子组件实例中访问这个值，就像访问 <code>data</code> 中的值一样。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;My journey with Vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;Blogging with Vue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">&quot;Why Vue is so fun&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    Vue.component(&#x27;blog-post&#x27;, &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      props: [&#x27;title&#x27;],</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">      template: &#x27;<span class="tag">&lt;<span class="name">h3</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">title</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h3</span>&gt;</span>&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>props对象</strong>：props中的参数可以以对象形式列出 prop，这些 property 的名称和值分别是 prop 各自的名称和类型；并且可以为 <code>props</code> 中的值提供一个带有验证需求的对象，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="string">&#x27;my-component&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span></span><br><span class="line">    <span class="attr">propA</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="comment">// 多个可能的类型</span></span><br><span class="line">    <span class="attr">propB</span>: [<span class="title class_">String</span>, <span class="title class_">Number</span>],</span><br><span class="line">    <span class="comment">// 必填的字符串</span></span><br><span class="line">    <span class="attr">propC</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">String</span>,</span><br><span class="line">      <span class="attr">required</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的数字</span></span><br><span class="line">    <span class="attr">propD</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 带有默认值的对象</span></span><br><span class="line">    <span class="attr">propE</span>: &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Object</span>,</span><br><span class="line">      <span class="comment">// 对象或数组默认值必须从一个工厂函数获取</span></span><br><span class="line">      <span class="attr">default</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    <span class="attr">propF</span>: &#123;</span><br><span class="line">      <span class="attr">validator</span>: <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="comment">// 这个值必须匹配下列字符串中的一个</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;success&#x27;</span>, <span class="string">&#x27;warning&#x27;</span>, <span class="string">&#x27;danger&#x27;</span>].<span class="title function_">indexOf</span>(value) !== -<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-子传父"><a href="#2-子传父" class="headerlink" title="2. 子传父"></a>2. 子传父</h3><ul><li><p><strong>自定义事件注意点</strong>：不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以不建议使用驼峰命名；由于html大小写不敏感，事件名称会转为全小写，在事件命名推荐使用中横线连接符；</p></li><li><p>数据传输原理是通过子组件的自定义事件将数据以参数的方式传递出去，在使用组件的地方绑定事件并接收参数完成数据传递</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">1. 子组件中定义事件并绑定参数</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">&quot;cpn&quot;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        子组件输入框: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;inputChange&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> cpn = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">template</span>: <span class="string">`#cpn`</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            inputChange (event)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.$emit(<span class="string">&#x27;sub-change&#x27;</span>,event.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 在使用组件的部分绑定事件并接收参数</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    子组件-- <span class="tag">&lt;<span class="name">cpn</span> @<span class="attr">sub-change</span>=<span class="string">&quot;subChange&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">cpn</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">cpn</span>: cpn</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            subChange (data) &#123;</span></span><br><span class="line"><span class="language-javascript">               <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>.sync 修饰符</strong>：</p></li><li><p><strong>.native 修饰符</strong>：</p></li></ul><h3 id="3-同级传值"><a href="#3-同级传值" class="headerlink" title="3. 同级传值"></a>3. 同级传值</h3><ul><li><p><strong>一般大型的项目，推荐使用Vuex来管理组件之间的通信</strong></p></li><li><p>同级组件不能直接传值，需要一个中间桥梁，可以先将数据传递给公共的父组件，然后父组件再将数据传递给需要的子组件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1. 创建一个公共桥梁作为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2. 在数据发送方自定义事件将数据发送桥梁</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">cpn1Change</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            bus.$emit(<span class="string">&#x27;cnp-one-change&#x27;</span>,event.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3. 在数据接收方的mounted时间钩子函数中始化完成，就开始执行定义的方法</span></span></span><br><span class="line"><span class="language-javascript">    mounted () &#123;</span></span><br><span class="line"><span class="language-javascript">        bus.$on(<span class="string">&#x27;cnp-one-change&#x27;</span>,<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-refs"><a href="#4-refs" class="headerlink" title="4. $refs"></a>4. $refs</h3><ul><li><p>ref：被用来给元素或子组件注册引用信息，如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- `vm.$refs.p` DOM 元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- `vm.$refs.child` 组件实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>$refs：ref引用信息将会注册在父组件的 <code>$refs</code> 对象上</p><ul><li>当 <code>v-for</code> 用于元素或组件的时候，引用信息将是包含 DOM 节点或组件实例的数组。</li><li>当引入DOM元素时候：ref 本身是作为渲染结果被创建的，在初始渲染的时候你不能访问它们</li><li>当引入组件实例时候：<code>$refs</code> 也不是响应式的，不应该在模板中做数据绑定。</li></ul></li></ul><h3 id="5-root"><a href="#5-root" class="headerlink" title="5. $root"></a>5. $root</h3><ul><li>当前组件树的根 Vue 实例。</li></ul><h3 id="6-parent"><a href="#6-parent" class="headerlink" title="6. $parent"></a>6. $parent</h3><ul><li>父实例，如果当前实例有的话。</li></ul><h3 id="7-children"><a href="#7-children" class="headerlink" title="7. $children"></a>7. $children</h3><ul><li>当前实例的直接子组件。<strong>需要注意 <code>$children</code> 并不保证顺序，也不是响应式的。</strong>如果你发现自己正在尝试使用 <code>$children</code> 来进行数据绑定，考虑使用一个数组配合 <code>v-for</code> 来生成子组件，并且使用 Array 作为真正的来源。</li></ul><h2 id="3-3-组件插槽"><a href="#3-3-组件插槽" class="headerlink" title="3.3 组件插槽"></a>3.3 组件插槽</h2><h3 id="1-插槽概述"><a href="#1-插槽概述" class="headerlink" title="1. 插槽概述"></a>1. 插槽概述</h3><h3 id="2-插槽入门"><a href="#2-插槽入门" class="headerlink" title="2. 插槽入门"></a>2. 插槽入门</h3><h3 id="3-插槽：name"><a href="#3-插槽：name" class="headerlink" title="3. 插槽：name"></a>3. 插槽：name</h3><h3 id="4-插槽：slot-scope"><a href="#4-插槽：slot-scope" class="headerlink" title="4. 插槽：slot-scope"></a>4. 插槽：slot-scope</h3><h1 id="第五章-vue-router"><a href="#第五章-vue-router" class="headerlink" title="第五章 vue-router"></a>第五章 vue-router</h1><h2 id="5-1-路由概述"><a href="#5-1-路由概述" class="headerlink" title="5.1 路由概述"></a>5.1 路由概述</h2><h3 id="1-VueRouter是什么"><a href="#1-VueRouter是什么" class="headerlink" title="1. VueRouter是什么"></a>1. VueRouter是什么</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><strong>路由</strong>是网络工程中的术语，维基百科对其的解释是通过互联网把信息从源地址传输到目的地址的活动；随着IT技术的发展由后端路由发展到前端路由；</p><ul><li><strong>后端路由</strong>：在互联网发展早期，浏览器发送请求到服务器，服务器将数据渲染为html并返回，所以前端页面的跳转是由服务器完成，即后端控制请求并路由；</li><li><strong>前端路由</strong>：指浏览器改变URL不会向服务器发送请求，并且可以进行页面跳转的页面渲染，即前端控制请求并路由到指定页面；</li></ul><h3 id="2-VueRouter原理"><a href="#2-VueRouter原理" class="headerlink" title="2. VueRouter原理"></a>2. VueRouter原理</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>SPA(single page application)：单一页面应用程序，只有一个完整的页面；它在加载页面时，不会加载整个页面，而是只更新某个指定的容器中内容。<strong>单页面应用(SPA)的核心之一是：更新视图而不重新请求页面</strong>；vue-router在实现单页面前端路由时，提供了两种方式：Hash模式和History模式；根据配置mode参数来决定采用哪一种方式。</p><ul><li><p><strong>hash ：vue-router 默认 hash 模式 —— 使用 URL 的 hash 来模拟一个完整的 URL，于是当 URL 改变时，页面不会重新加载。</strong> hash（#）是URL 的锚点，代表的是网页中的一个位置，单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页，也就是说<strong>hash 出现在 URL 中，但不会被包含在 http 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面</strong>；同时每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用”后退”按钮，就可以回到上一个位置；所以说<strong>Hash模式通过锚点值的改变，根据不同的值，渲染指定DOM位置的不同数据。hash 模式的原理是 onhashchange 事件(监测hash值变化)，可以在 window 对象上监听这个事件</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location.<span class="property">hash</span>=<span class="string">&#x27;url hash&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>history **：由于hash模式会在url中自带#，如果不想要很丑的 hash，我们可以用路由的 history 模式，只需要在配置路由规则时，加入”mode: ‘history’”,</strong>这种模式充分利用了html5 history interface 中新增的 pushState() 和 replaceState() 方法。这两个方法应用于浏览器记录栈，在当前已有的 back、forward、go 基础之上，它们提供了对历史记录修改的功能。只是当它们执行修改时，虽然改变了当前的 URL ，但浏览器不会立即向后端发送请求**。当你使用 history 模式时，URL 就像正常的 url；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">history.<span class="title function_">pushStatus</span>(&#123;&#125;,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">history.<span class="title function_">back</span>();</span><br><span class="line">history.<span class="title function_">forward</span>();</span><br><span class="line">history.<span class="title function_">replaceStatus</span>(&#123;&#125;,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line">history.<span class="title function_">go</span>(索引);<span class="comment">// 索引为正数向前跳, 索引为负数向后跳</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-VueRouter使用方式"><a href="#3-VueRouter使用方式" class="headerlink" title="3. VueRouter使用方式"></a>3. VueRouter使用方式</h3><ul><li>方式1：直接修改地址栏</li><li>方式2：this.$router.push(‘路由地址’)</li><li>方式3：<code>&lt;router-link to=&quot;路由地址&quot;&gt;&lt;/router-link&gt;</code></li></ul><h2 id="5-2-VueRouter安装"><a href="#5-2-VueRouter安装" class="headerlink" title="5.2 VueRouter安装"></a>5.2 VueRouter安装</h2><h3 id="1-方式一：基础"><a href="#1-方式一：基础" class="headerlink" title="1. 方式一：基础"></a>1. 方式一：基础</h3><ul><li><p>下载路由组件：<code>npm install vue-router --save</code></p></li><li><p>新增router包（<em>路由组件会单独定义一个文件夹，在vue项目中成为包</em>），自定义路由入口文件：<code>router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步 导入路由对象,并且挂载到Vue对象中</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"><span class="comment">// 第二步 创建路由实例,并且设置路由映射配置</span></span><br><span class="line"><span class="keyword">const</span> routes = [&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Home</span>,</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;history&quot;</span>,</span><br><span class="line">    routes,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure></li><li><p>配置router入口组件到main.js，将路由组件挂载到Vue实例上，为全局添加了两个属性：$router和$route；全局添加了两个组件：<code>&lt;router-link&gt;</code>和<code>&lt;router-view&gt;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-方式二：分模块"><a href="#2-方式二：分模块" class="headerlink" title="2. 方式二：分模块"></a>2. 方式二：分模块</h3><ul><li><p>下载路由组件：<code>npm install vue-router --save</code></p></li><li><p>新增router包，自定义路由入口文件：<code>router/index.js</code>，并在Vue实例上安装router组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>在router包中新增model包，将需要拆分的路由模块单独定义，新增路由的方式采用函数的方式追加到路由映射表中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> (<span class="params">router</span>)&#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">path</span>:<span class="string">&#x27;/router&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>:<span class="function">()=&gt;</span><span class="title function_">import</span>(<span class="string">&#x27;../../views/Demo01Router&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后将自定义模块添加到router入口组件中，并调入函数，传入路由映射表作为参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入路由模块</span></span><br><span class="line"><span class="keyword">import</span> basic <span class="keyword">from</span> <span class="string">&#x27;./models/basic&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = []</span><br><span class="line"><span class="title function_">basic</span>(routes)</span><br></pre></td></tr></table></figure></li><li><p>配置router入口组件到main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-3-VueRouter基础"><a href="#5-3-VueRouter基础" class="headerlink" title="5.3 VueRouter基础"></a>5.3 VueRouter基础</h2><h3 id="1-路由配置"><a href="#1-路由配置" class="headerlink" title="1. 路由配置"></a>1. 路由配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,<span class="comment">// 路由模式：hash | history</span></span><br><span class="line">  routes,<span class="comment">// 路由映射表，是个数组</span></span><br><span class="line">  <span class="attr">linkActiveClass</span>:<span class="string">&#x27;&#x27;</span><span class="comment">// 全局配置link激活</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-router-link"><a href="#2-router-link" class="headerlink" title="2. router-link"></a>2. router-link</h3><ul><li><p>是vue-router已经内置的一个组件，默认会被渲染为<code>&lt;a&gt;</code>标签；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 字符串 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用 v-bind 的 JS 表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 不写 v-bind 也可以，就像绑定别的属性一样 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#x27;home&#x27;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 属性绑定，修改属性改变路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;home&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;home&#x27; &#125;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;user&#x27;, params: &#123; userId: 123 &#125;&#125;&quot;</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;register&#x27;, query: &#123; plan: &#x27;private&#x27; &#125;&#125;&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>to</strong>（必选参数）：表示目标路由的链接，可以是一个字符串，或是动态绑定的描述目标位置的对象</li><li><strong>tag</strong>：默认值a，<code>&lt;router-link&gt;</code> 渲染成tag属性所指定的标签</li><li><strong>replace</strong>：默认值</li><li><strong>active-class</strong>：默认值<code>router-link-active</code>，设置 链接激活时使用的 CSS 类名，默认值可以通过路由的构造选项 linkActiveClass 来全局配置</li><li><strong>exact-active-class</strong>：默认值<code>router-link-exact-active</code>，当链接被精确匹配的时候应该激活的 class。默认值也是可以通过路由构造函数选项 linkExactActiveClass 进行全局配置的。</li><li><strong>exact</strong>：类型Boolean，默认值false，表示是否激活</li><li><strong>event</strong>：默认值<code>click</code>，声明可以用来触发导航的事件。可以是一个字符串。</li><li><strong>append</strong>：设置 append 属性后，则在当前 (相对) 路径前添加基路径，<em>例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b</em></li></ul></blockquote></li></ul><h3 id="3-router-view"><a href="#3-router-view" class="headerlink" title="3. router-view"></a>3. router-view</h3><ul><li><p><strong>作用</strong>：改标签会根据当前的路径，动态的替换路径所映射的组件，路由切换时，切换的是<code>&lt;router-view&gt;</code>挂载的组件；</p></li><li><p><strong>视图命名</strong>：如果希望同时展示多个视图，而不是嵌套视图，可以在界面中定义多个单独命名的视图；如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;b&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 一个视图使用一个组件渲染，因此对于同个路由，多个视图就需要多个组件</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">routes</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">default</span>: <span class="title class_">Foo</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">a</span>: <span class="title class_">Bar</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">b</span>: <span class="title class_">Baz</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ]</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>嵌套命名视图</strong>：用命名视图创建嵌套视图的复杂布局：例如</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>User Settings<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">NavBar</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;helper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> routers = [</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">path</span>: <span class="string">&#x27;/settings&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 你也可以在顶级路由就配置命名视图</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">component</span>: <span class="title class_">UserSettings</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">children</span>: [&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;emails&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">component</span>: <span class="title class_">UserEmailsSubscriptions</span></span></span><br><span class="line"><span class="language-javascript">            &#125;, &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">path</span>: <span class="string">&#x27;profile&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">default</span>: <span class="title class_">UserProfile</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">helper</span>: <span class="title class_">UserProfilePreview</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-router"><a href="#4-router" class="headerlink" title="4. $router"></a>4. $router</h3><ul><li><p>说明：指的是router实例</p></li><li><p>$router的属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>$router.app</td><td>配置了router的Vue根实例</td></tr><tr><td>$router.mode</td><td>路由模式， hash | history</td></tr><tr><td>$router.currentRoute</td><td>当前路由的路由信息对象，包含了当前匹配路由的信息</td></tr></tbody></table></li><li><p>$router的方法</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>$router.addRoutes(routes)</td><td>动态添加路由规则，参数为符合routes选项要求的数组</td></tr><tr><td>$router.beforeEach(to,from,next)</td><td>全局前置守卫</td></tr><tr><td>$router.beforeResolve()</td><td>全局解析守卫 , 在导航被确认之前，且在锁头组件内守卫和异步路由组件被解析之后调用，参数和全局前置守卫相同；</td></tr><tr><td>$router.afterEach()</td><td>全局后置守卫</td></tr><tr><td>$router.go(n)</td><td>接受一个整数作为参数，类似window.history.go(n)，在浏览器历史记录中前进或后退几步</td></tr><tr><td>$router.push( location )</td><td>跳转导航的方法，这种方法会向history栈添加一个新的记录</td></tr><tr><td>$router.replace( location )</td><td>替换掉当前的history记录，不会添加新的记录</td></tr><tr><td>$router.back()</td><td>相当于router.go(-1)</td></tr><tr><td>$router.forward()</td><td>相当于router.go(1)</td></tr><tr><td>$router.resolve(location)</td><td>解析目标路由，接受一个地址参数，返回location,route,href等属性信息，还可以接受当前默认路由current和当前路由上附加路径append两个参数</td></tr><tr><td>$router.onReady(callback)</td><td>把一个回调排队，在路由完成初始导航时调用。</td></tr><tr><td>$router.onError(callback)</td><td>注册一个回调，该回调会在路由导航过程中出错的时候被调用<br /> - 在一个路由守卫函数中被同步抛出<br /> - 在一个路由守卫函数中通过调用next(error)的方式异步捕获并处理<br/> - 渲染一个路由的过程中，需要尝试解析一个异步组件时发生错误</td></tr></tbody></table></li></ul><h3 id="5-route"><a href="#5-route" class="headerlink" title="5. $route"></a>5. $route</h3><ul><li><p>说明：每次路由导航成功后都会产生一个新的对象。是当前激活的路由信息对象，是只读属性，不可更改，但是可以watch（监听）</p></li><li><p>$route属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>$route.fullPath</td><td>完成解析后的url，包含查询参数和hash的完整路径</td></tr><tr><td>$route.path</td><td>路径，字符串类型，解析为绝对路径</td></tr><tr><td>$route.hash</td><td>当前路由的hash值（带#号的），如果没有hash值则为空字符串</td></tr><tr><td>$route.name</td><td>当前路由的名称，如果有的话（用于命名路由）</td></tr><tr><td>$route.params</td><td>一个键值对对象，路由参数</td></tr><tr><td>$route.query</td><td>一个键值对对象，表示url查询参数</td></tr><tr><td>$route.matched</td><td>一个包含了当前路由的所有嵌套路径片段的路由记录</td></tr><tr><td>$route.redirectedFrom</td><td>重定向来源的路由的名字，如果存在重定向的话</td></tr></tbody></table></li></ul><h3 id="6-入门案例"><a href="#6-入门案例" class="headerlink" title="6. 入门案例"></a>6. 入门案例</h3><ul><li><p>安装路由并初始化路由模块：<code>src/router/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line"></span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>:<span class="string">&quot;history&quot;</span>,</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>首先在项目目录中定义好需要映射的组件，Vue脚手架的项目结构中：①components用于存放页面组件②views中存放页面（本质也是组件），例：在components中定义<code>VueComponent.vue</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        VueComponent.vue</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;VueComponent&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>在router模块中导入需要路由的组件并在路由表中配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Router01Map</span> <span class="keyword">from</span> <span class="string">&quot;../components/router/Router01Map&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/map&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Router01Map</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>在Vue根组件App.vue中新增路由标签，启动项目测试路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/map&quot;</span>&gt;</span>XX<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-4-VueRouter核心"><a href="#5-4-VueRouter核心" class="headerlink" title="5.4 VueRouter核心"></a>5.4 VueRouter核心</h2><blockquote><p>使用模块化编程首先导入Vue和VueRouter，要调用 Vue.use(VueRouter)</p></blockquote><h3 id="1-路由导航"><a href="#1-路由导航" class="headerlink" title="1. 路由导航"></a>1. 路由导航</h3><h4 id="①-路由组件映射：导入"><a href="#①-路由组件映射：导入" class="headerlink" title="① 路由组件映射：导入"></a>① 路由组件映射：导入</h4><ul><li><p>定义 (路由) 组件，可以从其他文件 import 进来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> 组件对象 <span class="keyword">from</span> <span class="string">&quot;组件路径&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;路由&#x27;</span>,<span class="attr">component</span>: 组件对象&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>path</strong>：URI</li><li><strong>component</strong>：可以是①通过 Vue.extend() 创建的组件构造器②一个组件对象③一个组件配置对象（在嵌套路由中使用）</li></ul></blockquote></li></ul><h4 id="②-路由组件映射：懒加载"><a href="#②-路由组件映射：懒加载" class="headerlink" title="② 路由组件映射：懒加载"></a>② 路由组件映射：懒加载</h4><ul><li><p>如果使用import语法在组件映射之前就将组件导入，当打包构建应用时，就会将所有组件打包为一个非常大的文件，影响页面加载；使用懒加载方式可以在打包的时候把不同的路由对应的组件分隔成独立的文件，然后当路由被访问时候才加载对应的组件，可以提高效率；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;路由&#x27;</span>,<span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>如果每一个异步块打包为一个单独的文件，打包后的文件就会很多；有时候可以把多个路由下的组件打包为同异步块中（chunk），只需要使用命名chunk语法：<strong>/* webpackChunkName: “chunk块名称” */</strong>，例如下：两个路径下的组件都会打包到名称为A的js文件中了；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&#x27;路由&#x27;</span>,<span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;A&quot; */</span><span class="string">&quot;组件路径&quot;</span>)&#125;,</span><br><span class="line">    &#123;<span class="attr">path</span>: <span class="string">&quot;路由&quot;</span>,<span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="comment">/* webpackChunkName: &quot;A&quot; */</span><span class="string">&quot;组件路径&quot;</span>)&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h4 id="③-路由命名组件映射"><a href="#③-路由命名组件映射" class="headerlink" title="③ 路由命名组件映射"></a>③ 路由命名组件映射</h4><ul><li><p>命名路由映射：改名称就会作为路由的标识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;路由名称&quot;</span>,</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;路由&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>命名路由的使用</p><ol><li><p>链接到一个命名路由：绑定一个对象类型，name属性指向路由的name标识</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; name: &#x27;路由名称&#x27;&quot;</span>&gt;</span>XX<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用导航式路由指定一个名称的路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;routerName&quot;</span>&gt;</span>routerName<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">routerName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;Name&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="④-路由通配符映射组件"><a href="#④-路由通配符映射组件" class="headerlink" title="④ 路由通配符映射组件"></a>④ 路由通配符映射组件</h4><ul><li><p><strong>路由通配符</strong><code>*</code>：含有通配符的路由应该放在最后，当使用一个<em>通配符</em>时，<code>$route.params</code> 内会自动添加一个名为 <code>pathMatch</code> 参数。它包含了 URL 通过<em>通配符</em>被匹配的部分；</p><blockquote><p><strong>一般把通配符配置在最后一个，用于客户端的404错误；</strong></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span><span class="comment">// 会匹配所有路径</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/non-existing&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">pathMatch</span>  <span class="comment">// &#x27;/non-existing&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/user-*&#x27;</span><span class="comment">// 会匹配以 `/user-` 开头的任意路径</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&#x27;/user-admin&#x27;</span>)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">pathMatch</span> <span class="comment">// &#x27;admin&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="⑤-路由优先级"><a href="#⑤-路由优先级" class="headerlink" title="⑤ 路由优先级"></a>⑤ 路由优先级</h4><ul><li>同一个路径可以匹配多个路由，此时，匹配的优先级就按照路由的定义顺序：<strong>谁先定义的，谁的优先级就最高</strong>。</li></ul><h4 id="⑥-编程式导航"><a href="#⑥-编程式导航" class="headerlink" title="⑥ 编程式导航"></a>⑥ 编程式导航</h4><ul><li><p>借助 router 的实例方法，通过编写代码来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;home&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;home&#x27;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名的路由</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; <span class="attr">userId</span>: <span class="string">&#x27;123&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带查询参数，变成 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果提供了 path，params 会被忽略</span></span><br><span class="line"><span class="keyword">const</span> userId = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;userId&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/123</span></span><br><span class="line"><span class="comment">// 这里的 params 不生效</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; userId &#125;&#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-路由重定向"><a href="#2-路由重定向" class="headerlink" title="2. 路由重定向"></a>2. 路由重定向</h3><h4 id="①-重定向到其他路由"><a href="#①-重定向到其他路由" class="headerlink" title="① 重定向到其他路由"></a>① 重定向到其他路由</h4><ul><li><p>redirect值是字符串默认会匹配路由映射表中的path属性实现重定向；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="②-重定向到命名路由"><a href="#②-重定向到命名路由" class="headerlink" title="② 重定向到命名路由"></a>② 重定向到命名路由</h4><ul><li><p>redirect的值是对象，如果指定name属性会根据路由名称进行匹配实现重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: &#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 编程式导航</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;nameRouter&quot;</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="③-重定向到函数"><a href="#③-重定向到函数" class="headerlink" title="③ 重定向到函数"></a>③ 重定向到函数</h4><ul><li><p>redirect的值也可以是一个函数：参数是目标路由对象，返回值可以是字符串或对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">redirect</span>: <span class="function"><span class="params">to</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 方法接收 目标路由 作为参数</span></span><br><span class="line">            <span class="comment">// return 重定向的 字符串路径/路径对象</span></span><br><span class="line">        &#125;&#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="④-路由别名重定向"><a href="#④-路由别名重定向" class="headerlink" title="④ 路由别名重定向"></a>④ 路由别名重定向</h4><ul><li><p>在嵌套路由内的组件的路由是多级结构的；“别名”的功能可以自由地将 UI 结构映射到任意的 URL，而不是受限于配置的嵌套路由结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [</span><br><span class="line">        &#123; <span class="attr">path</span>: <span class="string">&#x27;/a&#x27;</span>, <span class="attr">component</span>: A, <span class="attr">alias</span>: <span class="string">&#x27;/b&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-路由传参"><a href="#3-路由传参" class="headerlink" title="3. 路由传参"></a>3. 路由传参</h3><h4 id="①-name传参"><a href="#①-name传参" class="headerlink" title="① name传参"></a>① name传参</h4><ul><li><p>name作为路由标识：可以当做一个参数传递，但是只能是一个参数，使用$route.name接收参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;Hello&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Hello</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h4 id="②-动态路由参数：params"><a href="#②-动态路由参数：params" class="headerlink" title="② 动态路由参数：params"></a>② 动态路由参数：params</h4><blockquote><p>使用params传参路由导航只能使用name属性，参数可以定义在url中</p></blockquote><ul><li><p><strong>路由参数params</strong>：使用路由导航时候可以为路由添加params的对象类型参数，在目标组件中使用$route.params的方式接受params对象；<code>&lt;router-link&gt;</code>的to属性绑定的对象中必须使用命名组件进行路由，并指定params参数对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;name: &#x27;param&#x27;,params:&#123;name:&#x27;JJ&#x27;,age:1111&#125;&#125;&quot;</span>&gt;参数传递&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>动态路由导航</strong>：有时候需要在路由中显示这些参数，则使用动态路由参数将参数绑定到路由参数中，在路由中定义参数的格式：<code>/:key</code>，路由中参数的key要和params中的key相匹配；<strong>参数以路径形式显示在路由中</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;/param/:name/:age&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p>使用标签导航时候指定路由参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;name:&#x27;dyParam&#x27;,params:&#123;name:&#x27;Tom&#x27;,age:23&#125;&#125;&quot;</span>&gt;</span>标签导航<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用编程式导航并制定路由参数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;param&quot;</span>&gt;</span>编程式导航<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">param</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;dyParam&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;Admin&quot;</span>,<span class="attr">age</span>:<span class="string">&#x27;12&#x27;</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="③-路由参数：query"><a href="#③-路由参数：query" class="headerlink" title="③ 路由参数：query"></a>③ 路由参数：query</h4><blockquote><p>使用query传参数，路由导航可以使用path或name属性，并且参数会以？方式显示在url中</p></blockquote><ul><li><p>使用query传参：定义组件并配置路由</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;路由&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol><li><p>使用<code>&lt;router-link&gt;</code>进行路由导航并定义参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link :to=<span class="string">&quot;&#123;path:&#x27;/query&#x27;,query:&#123;age:12&#125;&#125;&quot;</span>&gt;Query&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>使用编程式路由导航</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;query&quot;</span>&gt;</span>编程式路由导航 query<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">query</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/query&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;Admin&quot;</span>,<span class="attr">age</span>:<span class="string">&#x27;12&#x27;</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="④-路由组件传参：props"><a href="#④-路由组件传参：props" class="headerlink" title="④ 路由组件传参：props"></a>④ 路由组件传参：props</h4><ul><li><strong>组件传值优势</strong>：在组件中使用 <code>$route</code> 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。</li></ul><h3 id="4-嵌套路由"><a href="#4-嵌套路由" class="headerlink" title="4. 嵌套路由"></a>4. 嵌套路由</h3><ul><li><p>在实际页面中，通常由多层嵌套的组件组合而成，同样的url中隔断路由也需要按对应的嵌套各层组件，借助 <code>vue-router</code>，使用嵌套路由配置，就可以很简单地表达这种嵌套关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&quot;路由&quot;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>),</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;子路由&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>),</span><br><span class="line">                <span class="attr">children</span>:[</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">path</span>: <span class="string">&#x27;子路由的子路由&#x27;</span>,</span><br><span class="line">                        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="title function_">import</span>(<span class="string">&quot;组件路径&quot;</span>)</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>如果子路由非<code>/</code>开头</strong>：①嵌套的路径会层级结构②子路由组件会映射在子组件的<code>&lt;router-view&gt;</code>中；</li><li><strong>如果子路是<code>/</code>开头</strong>：①嵌套路径会被当作根路径②组件会映射在根<code>&lt;router-view&gt;</code>中；</li></ul></blockquote></li></ul><h3 id="5-导航守卫"><a href="#5-导航守卫" class="headerlink" title="5. 导航守卫"></a>5. 导航守卫</h3><h4 id="〇-完整的导航解析流程"><a href="#〇-完整的导航解析流程" class="headerlink" title="〇 完整的导航解析流程"></a>〇 完整的导航解析流程</h4><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫 (2.2+)。</li><li>在路由配置里调用 <code>beforeEnter</code>。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code>。</li><li>调用全局的 <code>beforeResolve</code> 守卫 (2.5+)。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 DOM 更新。</li><li>调用 <code>beforeRouteEnter</code> 守卫中传给 <code>next</code> 的回调函数，创建好的组件实例会作为回调函数的参数传入。</li></ol><h4 id="①-全局前置守卫"><a href="#①-全局前置守卫" class="headerlink" title="① 全局前置守卫"></a>① 全局前置守卫</h4><ul><li><h4 id="②-全局解析守卫"><a href="#②-全局解析守卫" class="headerlink" title="② 全局解析守卫"></a>② 全局解析守卫</h4></li><li><p>是在导航被确认之前，<strong>同时在所有组件内守卫和异步路由组件被解析之后</strong>，解析守卫就被调用。</p></li></ul><h4 id="③-全局后置钩子"><a href="#③-全局后置钩子" class="headerlink" title="③ 全局后置钩子"></a>③ 全局后置钩子</h4><ul><li>后置钩子不会接受 <code>next</code> 函数也不会改变导航本身：</li></ul><h4 id="④-路由独享的守卫"><a href="#④-路由独享的守卫" class="headerlink" title="④ 路由独享的守卫"></a>④ 路由独享的守卫</h4><ul><li><p>在路由配置上直接定义 <code>beforeEnter</code> 守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Foo</span>,</span><br><span class="line">        <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h4 id="⑤-组件内的守卫"><a href="#⑤-组件内的守卫" class="headerlink" title="⑤ 组件内的守卫"></a>⑤ 组件内的守卫</h4><ul><li><h3 id="6-路由行为"><a href="#6-路由行为" class="headerlink" title="6. 路由行为"></a>6. 路由行为</h3></li><li><p>过渡效果</p></li><li><p>滚动功能</p></li></ul><h3 id="7-接口数据获取"><a href="#7-接口数据获取" class="headerlink" title="7. 接口数据获取"></a>7. 接口数据获取</h3><h4 id="①-导航完成之后获取"><a href="#①-导航完成之后获取" class="headerlink" title="① 导航完成之后获取"></a>① 导航完成之后获取</h4><h4 id="②-导航完成后获取数据"><a href="#②-导航完成后获取数据" class="headerlink" title="② 导航完成后获取数据"></a>② 导航完成后获取数据</h4><h1 id="第六章-Vuex"><a href="#第六章-Vuex" class="headerlink" title="第六章 Vuex"></a>第六章 Vuex</h1><h2 id="6-1-Vuex基础"><a href="#6-1-Vuex基础" class="headerlink" title="6.1 Vuex基础"></a>6.1 Vuex基础</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><ul><li><p>vuex是专门为Vue开发的状态管理工具，vuex采用集中式存储管理应用中的所有状态，并提供状态维护的方式，使应用对状态的管理可以做到响应式</p><blockquote><ul><li><p><strong>状态</strong>：在单组件中成为组件的数据属性，封装在data函数的中；在多组件中共享的数据则成为状态，是统一维护在Vuex；</p></li><li><p><strong>状态管理</strong>：指的是在多组件中维护共享的数据状态；</p></li></ul></blockquote></li></ul><h3 id="2-安装与配置"><a href="#2-安装与配置" class="headerlink" title="2. 安装与配置"></a>2. 安装与配置</h3><ul><li><p>使用npm安装vuex4</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### <span class="number">3.</span> 项目结构</span><br><span class="line"></span><br><span class="line">- <span class="title class_">Vuex</span>在实际开发中管理的状态会很多，需要将相关代码分隔到模块中，一般公司约定的统一的项目结构，方便管理与维护</span><br><span class="line"></span><br><span class="line">  <span class="string">``</span><span class="string">`tex</span></span><br><span class="line"><span class="string">  ├── index.html</span></span><br><span class="line"><span class="string">  ├── main.js</span></span><br><span class="line"><span class="string">  ├── api</span></span><br><span class="line"><span class="string">  │   └── ... # 抽取出API请求</span></span><br><span class="line"><span class="string">  ├── components</span></span><br><span class="line"><span class="string">  │   ├── App.vue</span></span><br><span class="line"><span class="string">  │   └── ...</span></span><br><span class="line"><span class="string">  └── store</span></span><br><span class="line"><span class="string">      ├── index.js          # 我们组装模块并导出 store 的地方</span></span><br><span class="line"><span class="string">      ├── actions.js        # 根级别的 action</span></span><br><span class="line"><span class="string">      ├── mutations.js      # 根级别的 mutation</span></span><br><span class="line"><span class="string">      └── modules</span></span><br><span class="line"><span class="string">          ├── cart.js       # 购物车模块</span></span><br><span class="line"><span class="string">          └── products.js   # 产品模块</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="6-2-核心概念"><a href="#6-2-核心概念" class="headerlink" title="6.2 核心概念"></a>6.2 核心概念</h2><h2 id="6-3-Vuex实践"><a href="#6-3-Vuex实践" class="headerlink" title="6.3 Vuex实践"></a>6.3 Vuex实践</h2><h1 id="第七章-axios"><a href="#第七章-axios" class="headerlink" title="第七章 axios"></a>第七章 axios</h1><h2 id="7-1-前端网络请求"><a href="#7-1-前端网络请求" class="headerlink" title="7.1 前端网络请求"></a>7.1 前端网络请求</h2><ol><li>XMLHTTPRequest：原生JavaScript请求</li><li>jQuery：ajax网络qingq</li><li>JSONP：跨域伪造访问</li><li>Axios：基于promise的HTTP 库，可以用在浏览器和node.js中</li></ol><h2 id="7-2-Vue中安装Axios"><a href="#7-2-Vue中安装Axios" class="headerlink" title="7.2 Vue中安装Axios"></a>7.2 Vue中安装Axios</h2><h3 id="1-加载axios安装包"><a href="#1-加载axios安装包" class="headerlink" title="1. 加载axios安装包"></a>1. 加载axios安装包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure><h3 id="2-配置axios到Vue实例"><a href="#2-配置axios到Vue实例" class="headerlink" title="2. 配置axios到Vue实例"></a>2. 配置axios到Vue实例</h3><ul><li><p><strong>方案一</strong>：将axios挂载到Vue实例，可以全局访问axios的API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js：基础配置方法</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$axios</span> = axios</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  axios</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在其他模块的方法中可以使用axios api</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">funcName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$axios</span>.<span class="title function_">get</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方案二</strong>：将axios单独封装为模块，创建并配置axios实例对象，然后将实例对象导出到main.js入口文件中，那么和接口请求的相关配置都可以定义在这个单独的axios模块中了;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义api目录：/api/index.js：避免每个vue模块都使用this.$axios的api，避免业务与axios高耦合</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.<span class="title function_">create</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  requests</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其他模块可以引用api模块进行接口调用</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">funcName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        request.<span class="title function_">get</span>(&#123;</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方案三</strong>：一般项目开发中会将接口的请求与业务方法分离，第一步会定义独立模块封装接口调用的方法，第二步在业务模块中调用接口模块传入接口参数获取接口响应；在方案二的基础上需要额外定义一个封装接口的模块：如order模块的相关接口都定义在一个js文件中；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/api/order/index.js：将后台Order服务的相关接口定义在当前模块中</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getList</span> (param) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">order</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/order/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: param</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 然后在order组件的method中直接调用</span></span><br><span class="line"><span class="keyword">import</span> &#123;getList&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/order/index&#x27;</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">funcName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> param = &#123;&#125;</span><br><span class="line">        <span class="title function_">getList</span>(param).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方案四</strong>：如果前端项目需要调用多个服务的接口，而且接口的规则不统一，则需要将axios模块化，不同的服务对应各自的axios实例对象，并分别配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/api/index.js</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> order = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://Order&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://Usre&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> axiosReq = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;http://Other&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    order, user, axiosReq</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @/api/order/index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Api</span> <span class="keyword">from</span> <span class="string">&#x27;../&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">orderList</span> (param) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Api</span>.<span class="title function_">order</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;/order/list&#x27;</span>,</span><br><span class="line">        <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: param</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-axios响应结构"><a href="#3-axios响应结构" class="headerlink" title="3. axios响应结构"></a>3. axios响应结构</h3><ul><li><p>基本结构</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    status<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">    statusText<span class="punctuation">:</span> &#x27;OK&#x27;<span class="punctuation">,</span></span><br><span class="line">    headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    config<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    request<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>结构说明</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>data</td><td>由服务器提供的响应</td></tr><tr><td>status</td><td>来自服务器响应的 HTTP 状态码</td></tr><tr><td>headers</td><td>服务器响应的头</td></tr><tr><td>config</td><td>是为请求提供的配置信息</td></tr><tr><td>request</td><td>生成此响应的请求</td></tr></tbody></table></li></ul><h2 id="7-3-axiosAPI"><a href="#7-3-axiosAPI" class="headerlink" title="7.3 axiosAPI"></a>7.3 axiosAPI</h2><h3 id="1-配置axios请求"><a href="#1-配置axios请求" class="headerlink" title="1. 配置axios请求"></a>1. 配置axios请求</h3><ul><li><p>axios常用配置案例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送 POST 请求</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/user/12345&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">        <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 获取远端图片</span></span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;http://bit.ly/2mTM3nY&#x27;</span>,</span><br><span class="line">    <span class="attr">responseType</span>:<span class="string">&#x27;stream&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">response</span>) &#123;</span><br><span class="line">    response.<span class="property">data</span>.<span class="title function_">pipe</span>(fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;ada_lovelace.jpg&#x27;</span>))</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>axios请求方法别名：使用别名方法时， <code>url</code>、<code>method</code>、<code>data</code> 这些属性的使用有区别</p><table><thead><tr><th>别名</th><th>说明</th></tr></thead><tbody><tr><td>axios.request(config)</td><td></td></tr><tr><td>axios.get(url[, config])</td><td></td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td></td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr><tr><td><strong>并发</strong></td><td></td></tr><tr><td>axios.all(iterable)</td><td></td></tr><tr><td>axios.spread(callback)</td><td></td></tr></tbody></table></li></ul><h3 id="2-axios实例"><a href="#2-axios实例" class="headerlink" title="2. axios实例"></a>2. axios实例</h3><ul><li><p>创建axios实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="string">&#x27;https://some-domain.com/api/&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;<span class="string">&#x27;X-Custom-Header&#x27;</span>: <span class="string">&#x27;foobar&#x27;</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>实例方法</p><table><thead><tr><th>别名</th><th>说明</th></tr></thead><tbody><tr><td>axios.request(config)</td><td></td></tr><tr><td>axios.get(url[, config])</td><td></td></tr><tr><td>axios.delete(url[, config])</td><td></td></tr><tr><td>axios.head(url[, config])</td><td></td></tr><tr><td>axios.options(url[, config])</td><td></td></tr><tr><td>axios.post(url[, data[, config]])</td><td></td></tr><tr><td>axios.put(url[, data[, config]])</td><td></td></tr><tr><td>axios.patch(url[, data[, config]])</td><td></td></tr><tr><td><strong>并发</strong></td><td></td></tr><tr><td>axios.all(iterable)</td><td></td></tr><tr><td>axios.spread(callback)</td><td></td></tr></tbody></table></li></ul><h3 id="3-axios配置"><a href="#3-axios配置" class="headerlink" title="3. axios配置"></a>3. axios配置</h3><ul><li><p><strong>axios的config配置说明</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// `url` 是用于请求的服务器 URL</span></span><br><span class="line">    url<span class="punctuation">:</span> &#x27;/user&#x27;<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `method` 是创建请求时使用的方法</span></span><br><span class="line">    method<span class="punctuation">:</span> &#x27;get&#x27;<span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `baseURL` 将自动加在 `url` 前面，除非 `url` 是一个绝对 URL。</span></span><br><span class="line">    <span class="comment">// 它可以通过设置一个 `baseURL` 便于为 axios 实例的方法传递相对 URL</span></span><br><span class="line">    baseURL<span class="punctuation">:</span> &#x27;https<span class="punctuation">:</span><span class="comment">//some-domain.com/api/&#x27;,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `transformRequest` 允许在向服务器发送前，修改请求数据</span></span><br><span class="line">    <span class="comment">// 只能用在 &#x27;PUT&#x27;, &#x27;POST&#x27; 和 &#x27;PATCH&#x27; 这几个请求方法</span></span><br><span class="line">    <span class="comment">// 后面数组中的函数必须返回一个字符串，或 ArrayBuffer，或 Stream</span></span><br><span class="line">    transformRequest<span class="punctuation">:</span> <span class="punctuation">[</span>function (data<span class="punctuation">,</span> headers) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">        return data;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `transformResponse` 在传递给 then/catch 前，允许修改响应数据</span></span><br><span class="line">    transformResponse<span class="punctuation">:</span> <span class="punctuation">[</span>function (data) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 对 data 进行任意转换处理</span></span><br><span class="line">        return data;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `headers` 是即将被发送的自定义请求头</span></span><br><span class="line">    headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span>&#x27;X-Requested-With&#x27;<span class="punctuation">:</span> &#x27;XMLHttpRequest&#x27;<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `params` 是即将与请求一起发送的 URL 参数</span></span><br><span class="line">    <span class="comment">// 必须是一个无格式对象(plain object)或 URLSearchParams 对象</span></span><br><span class="line">    params<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        ID<span class="punctuation">:</span> <span class="number">12345</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `paramsSerializer` 是一个负责 `params` 序列化的函数</span></span><br><span class="line">    <span class="comment">// (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)</span></span><br><span class="line">    paramsSerializer<span class="punctuation">:</span> function(params) <span class="punctuation">&#123;</span></span><br><span class="line">        return Qs.stringify(params<span class="punctuation">,</span> <span class="punctuation">&#123;</span>arrayFormat<span class="punctuation">:</span> &#x27;brackets&#x27;<span class="punctuation">&#125;</span>)</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `data` 是作为请求主体被发送的数据</span></span><br><span class="line">    <span class="comment">// 只适用于这些请求方法 &#x27;PUT&#x27;, &#x27;POST&#x27;, 和 &#x27;PATCH&#x27;</span></span><br><span class="line">    <span class="comment">// 在没有设置 `transformRequest` 时，必须是以下类型之一：</span></span><br><span class="line">    <span class="comment">// - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams</span></span><br><span class="line">    <span class="comment">// - 浏览器专属：FormData, File, Blob</span></span><br><span class="line">    <span class="comment">// - Node 专属： Stream</span></span><br><span class="line">    data<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        firstName<span class="punctuation">:</span> &#x27;Fred&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `timeout` 指定请求超时的毫秒数(0 表示无超时时间)</span></span><br><span class="line">    <span class="comment">// 如果请求话费了超过 `timeout` 的时间，请求将被中断</span></span><br><span class="line">    timeout<span class="punctuation">:</span> <span class="number">1000</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `withCredentials` 表示跨域请求时是否需要使用凭证</span></span><br><span class="line">    withCredentials<span class="punctuation">:</span> <span class="keyword">false</span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `adapter` 允许自定义处理请求，以使测试更轻松</span></span><br><span class="line">    <span class="comment">// 返回一个 promise 并应用一个有效的响应 (查阅 [response docs](#response-api)).</span></span><br><span class="line">    adapter<span class="punctuation">:</span> function (config) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">/* ... */</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `auth` 表示应该使用 HTTP 基础验证，并提供凭据</span></span><br><span class="line">    <span class="comment">// 这将设置一个 `Authorization` 头，覆写掉现有的任意使用 `headers` 设置的自定义 `Authorization`头</span></span><br><span class="line">    auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        username<span class="punctuation">:</span> &#x27;janedoe&#x27;<span class="punctuation">,</span></span><br><span class="line">        password<span class="punctuation">:</span> &#x27;s00pers3cret&#x27;</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `responseType` 表示服务器响应的数据类型，可以是 &#x27;arraybuffer&#x27;, &#x27;blob&#x27;, &#x27;document&#x27;, &#x27;json&#x27;, &#x27;text&#x27;, &#x27;stream&#x27;</span></span><br><span class="line">    responseType<span class="punctuation">:</span> &#x27;json&#x27;<span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `responseEncoding` indicates encoding to use for decoding responses</span></span><br><span class="line">    <span class="comment">// Note: Ignored for `responseType` of &#x27;stream&#x27; or client-side requests</span></span><br><span class="line">    responseEncoding<span class="punctuation">:</span> &#x27;utf8&#x27;<span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `xsrfCookieName` 是用作 xsrf token 的值的cookie的名称</span></span><br><span class="line">    xsrfCookieName<span class="punctuation">:</span> &#x27;XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `xsrfHeaderName` is the name of the http header that carries the xsrf token value</span></span><br><span class="line">    xsrfHeaderName<span class="punctuation">:</span> &#x27;X-XSRF-TOKEN&#x27;<span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onUploadProgress` 允许为上传处理进度事件</span></span><br><span class="line">    onUploadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// Do whatever you want with the native progress event</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `onDownloadProgress` 允许为下载处理进度事件</span></span><br><span class="line">    onDownloadProgress<span class="punctuation">:</span> function (progressEvent) <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 对原生进度事件的处理</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxContentLength` 定义允许的响应内容的最大尺寸</span></span><br><span class="line">    maxContentLength<span class="punctuation">:</span> <span class="number">2000</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `validateStatus` 定义对于给定的HTTP 响应状态码是 resolve 或 reject  promise 。如果 `validateStatus` 返回 `true` (或者设置为 `null` 或 `undefined`)，promise 将被 resolve; 否则，promise 将被 rejecte</span></span><br><span class="line">    validateStatus<span class="punctuation">:</span> function (status) <span class="punctuation">&#123;</span></span><br><span class="line">        return status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>; <span class="comment">// default</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `maxRedirects` 定义在 node.js 中 follow 的最大重定向数目</span></span><br><span class="line">    <span class="comment">// 如果设置为0，将不会 follow 任何重定向</span></span><br><span class="line">    maxRedirects<span class="punctuation">:</span> <span class="number">5</span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `socketPath` defines a UNIX Socket to be used in node.js.</span></span><br><span class="line">    <span class="comment">// e.g. &#x27;/var/run/docker.sock&#x27; to send requests to the docker daemon.</span></span><br><span class="line">    <span class="comment">// Only either `socketPath` or `proxy` can be specified.</span></span><br><span class="line">    <span class="comment">// If both are specified, `socketPath` is used.</span></span><br><span class="line">    socketPath<span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span> <span class="comment">// default</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `httpAgent` 和 `httpsAgent` 分别在 node.js 中用于定义在执行 http 和 https 时使用的自定义代理。允许像这样配置选项：</span></span><br><span class="line">    <span class="comment">// `keepAlive` 默认没有启用</span></span><br><span class="line">    httpAgent<span class="punctuation">:</span> new http.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="keyword">true</span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line">    httpsAgent<span class="punctuation">:</span> new https.Agent(<span class="punctuation">&#123;</span> keepAlive<span class="punctuation">:</span> <span class="keyword">true</span> <span class="punctuation">&#125;</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#x27;proxy&#x27; 定义代理服务器的主机名称和端口</span></span><br><span class="line">    <span class="comment">// `auth` 表示 HTTP 基础验证应当用于连接代理，并提供凭据</span></span><br><span class="line">    <span class="comment">// 这将会设置一个 `Proxy-Authorization` 头，覆写掉已有的通过使用 `header` 设置的自定义 `Proxy-Authorization` 头。</span></span><br><span class="line">    proxy<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        host<span class="punctuation">:</span> &#x27;<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>&#x27;<span class="punctuation">,</span></span><br><span class="line">        port<span class="punctuation">:</span> <span class="number">9000</span><span class="punctuation">,</span></span><br><span class="line">        auth<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            username<span class="punctuation">:</span> &#x27;mikeymike&#x27;<span class="punctuation">,</span></span><br><span class="line">            password<span class="punctuation">:</span> &#x27;rapunz3l&#x27;</span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `cancelToken` 指定用于取消请求的 cancel token</span></span><br><span class="line">    <span class="comment">// （查看后面的 Cancellation 这节了解更多）</span></span><br><span class="line">    cancelToken<span class="punctuation">:</span> new CancelToken(function (cancel) <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="punctuation">&#125;</span>)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>全局的axios配置</strong>：<code>axios.defaults</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = <span class="string">&#x27;https://api.example.com&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>axios实例的默认配置</strong>：<code>axios.create().defaults</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://api.example.com&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line">instance.<span class="property">defaults</span>.<span class="property">headers</span>.<span class="property">common</span>[<span class="string">&#x27;Authorization&#x27;</span>] = <span class="variable constant_">AUTH_TOKEN</span>;</span><br></pre></td></tr></table></figure></li><li><p><strong>axios配置的优先级</strong></p><ol><li>请求的 <code>config</code> 参数</li><li>实例的 <code>defaults</code> 属性</li><li>在 <code>lib/defaults.js</code> 找到的库的默认值</li></ol></li></ul><h2 id="7-4-axios拦截器"><a href="#7-4-axios拦截器" class="headerlink" title="7.4 axios拦截器"></a>7.4 axios拦截器</h2><h3 id="1-请求拦截器"><a href="#1-请求拦截器" class="headerlink" title="1. 请求拦截器"></a>1. 请求拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-响应拦截器"><a href="#2-响应拦截器" class="headerlink" title="2. 响应拦截器"></a>2. 响应拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;, <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-移除拦截器"><a href="#3-移除拦截器" class="headerlink" title="3. 移除拦截器"></a>3. 移除拦截器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myInterceptor = axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;<span class="comment">/*...*/</span>&#125;);</span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">eject</span>(myInterceptor);</span><br></pre></td></tr></table></figure><h2 id="7-5-axios二次封装"><a href="#7-5-axios二次封装" class="headerlink" title="7.5 axios二次封装"></a>7.5 axios二次封装</h2><ol><li><p>目录结构说明</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">src:</span> </span><br><span class="line"><span class="attr">api:</span> </span><br><span class="line"><span class="attr">index.js:</span> <span class="string">作为API总入口</span></span><br><span class="line"><span class="attr">common:</span> </span><br><span class="line"><span class="attr">http.js:</span> <span class="string">在该模块中封装多域名的axios服务</span></span><br><span class="line"><span class="attr">servers:</span> </span><br><span class="line"><span class="attr">xxx.js:</span> <span class="string">表示具体的http请求</span></span><br></pre></td></tr></table></figure></li><li><p>首先对axios进行封装：/src/api/common/http.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例：Order域名服务</span></span><br><span class="line"><span class="keyword">const</span> httpOrder = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="title function_">orderBaseUrl</span>(),</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10</span> * <span class="number">1000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 举例：这些配置可以提取到对应环境的配置文件中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">orderBaseUrl</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;production&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;http://localhost:8080/order&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;development&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;http://localhost:8081/order&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&#x27;http://localhost:8082/order&#x27;</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;环境变量配置错误&quot;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;orderBaseUrl 环境变量配置错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 举例：User域名服务</span></span><br><span class="line"><span class="keyword">const</span> httpUser = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: <span class="title function_">userBaseUrl</span>(),</span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">10</span> * <span class="number">1000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 举例：这些配置可以提取到对应环境的配置文件中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">userBaseUrl</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">switch</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;production&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;http://localhost:9080/user&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;development&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;http://localhost:9081/user&#x27;</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span>  <span class="string">&#x27;http://localhost:9082/user&#x27;</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;环境变量配置错误&quot;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="title class_">Error</span>(<span class="string">&#x27;userBaseUrl 环境变量配置错误&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    httpOrder,</span><br><span class="line">    httpUser</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>举例：order服务的order模块添加http请求-&gt;getOrder</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;../common/http&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getOrder</span> = data =&gt; http.<span class="property">httpOrder</span>.<span class="title function_">get</span>(<span class="string">&#x27;/order&#x27;</span>,&#123;data&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    getOrder</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>举例：order服务的order模块添加http请求-&gt;addUser</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;../common/http2&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">addUser</span> = data =&gt; http.<span class="property">httpUser</span>.<span class="title function_">post</span>(<span class="string">&#x27;/user&#x27;</span>,&#123;data&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    addUser</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>通过api.js将多个http模块进行统一导出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> order <span class="keyword">from</span> <span class="string">&#x27;./servers/order&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./servers/user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    order,user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将api挂载到Vue实例之上：main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> api <span class="keyword">from</span> <span class="string">&#x27;./api&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$api</span>=api</span><br></pre></td></tr></table></figure></li><li><p>举例：通过$api发送对应模块的请求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getOrder&quot;</span>&gt;</span>getOrder<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addUser&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getOrder</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$api</span>.<span class="property">order</span>.<span class="title function_">getOrder</span>(&#123;<span class="attr">id</span>:<span class="number">1</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">addUser</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">$api</span>.<span class="property">user</span>.<span class="title function_">addUser</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;zone&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="7-6-axios封装案例"><a href="#7-6-axios封装案例" class="headerlink" title="7.6 axios封装案例"></a>7.6 axios封装案例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Notify</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vant&#x27;</span></span><br><span class="line"><span class="comment">// import Vue from &#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// import store from &#x27;@/store&#x27;  // 我此项目没有用到vuex，所以vuex代码的都注释了，需要的自己打开使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import &#123;ACCESS_TOKEN&#125; from &#x27;@/store/mutation-types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 axios 实例</span></span><br><span class="line"><span class="keyword">const</span> requests = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>: process.<span class="property">env</span>.<span class="property">VUE_APP_API</span>, <span class="comment">// 基础url,如果是多环境配置这样写，也可以像下面一行的写死。</span></span><br><span class="line">    <span class="comment">// baseURL: &#x27;http://168.192.0.123&#x27;,</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">6000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误处理函数</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">err</span> = (<span class="params">error</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error.<span class="property">response</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> data = error.<span class="property">response</span>.<span class="property">data</span></span><br><span class="line">        <span class="comment">// const token = Vue.ls.get(ACCESS_TOKEN)</span></span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">403</span>) &#123;</span><br><span class="line">            <span class="title class_">Notify</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: data.<span class="property">message</span> || data.<span class="property">msg</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">response</span>.<span class="property">status</span> === <span class="number">401</span>) &#123;</span><br><span class="line">            <span class="title class_">Notify</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;你没有权限。&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// if (token) &#123;</span></span><br><span class="line">            <span class="comment">//   store.dispatch(&#x27;Logout&#x27;).then(() =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//     setTimeout(() =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//       window.location.reload()</span></span><br><span class="line">            <span class="comment">//     &#125;, 1500)</span></span><br><span class="line">            <span class="comment">//   &#125;)</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// request interceptor(请求拦截器)</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//   const token = Vue.ls.get(ACCESS_TOKEN)</span></span><br><span class="line">    <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (token) &#123;</span><br><span class="line">        config.<span class="property">headers</span>[<span class="string">&#x27;token&#x27;</span>] = token <span class="comment">// 让每个请求携带自定义 token 请根据实际情况自行修改</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">&#125;, err)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response interceptor（接收拦截器）</span></span><br><span class="line">requests.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> !== <span class="number">0</span> &amp;&amp; res.<span class="property">code</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title class_">Notify</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: res.<span class="property">message</span> || res.<span class="property">msg</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 401:未登录;</span></span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">code</span> === <span class="number">401</span> || res.<span class="property">code</span> === <span class="number">403</span> || res.<span class="property">code</span> === <span class="number">999</span>) &#123;</span><br><span class="line">            <span class="title class_">Notify</span>(&#123;</span><br><span class="line">                <span class="attr">type</span>: <span class="string">&#x27;danger&#x27;</span>,</span><br><span class="line">                <span class="attr">message</span>: <span class="string">&#x27;请登录&#x27;</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, err)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    requests</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第八章-Vite-Vue3-TS"><a href="#第八章-Vite-Vue3-TS" class="headerlink" title="第八章 Vite+Vue3+TS"></a>第八章 Vite+Vue3+TS</h1><ol><li><p>下载安装Vite</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g create-vite-app@1.18.0</span><br><span class="line">yarn global add create-vite-app@1.18.0</span><br></pre></td></tr></table></figure></li><li><p>整合element-plus</p><ul><li><p>安装element-plus</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line">yarn add element-plus</span><br><span class="line">pnpm install element-plus</span><br></pre></td></tr></table></figure></li><li><p>完整引入：main.ts</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>按需导入：【推荐】</p><ol><li><p>首先需要下载两个插件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -D unplugin-vue-components unplugin-auto-import</span><br></pre></td></tr></table></figure></li><li><p>修改Vite配置文件</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>配置Network：修改vite配置文件server配置</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">18080</span>,</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>配置vue-router</p><ul><li><p>安装vue-router@4</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router@<span class="number">4</span></span><br></pre></td></tr></table></figure></li><li></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第三章-组件化开发&quot;&gt;&lt;a href=&quot;#第三章-组件化开发&quot; class=&quot;headerlink&quot; title=&quot;第三章 组件化开发&quot;&gt;&lt;/a&gt;第三章 组件化开发&lt;/h1&gt;&lt;h2 id=&quot;3-1-组件化入门&quot;&gt;&lt;a href=&quot;#3-1-组件化入门&quot; class
      
    
    </summary>
    
    
      <category term="前端全栈" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JSFW" scheme="http://yoursite.com/tags/JSFW/"/>
    
  </entry>
  
  <entry>
    <title>0603-TypesScript</title>
    <link href="http://yoursite.com/2006/03/01/0603-TypesScript/"/>
    <id>http://yoursite.com/2006/03/01/0603-TypesScript/</id>
    <published>2006-02-28T16:01:00.000Z</published>
    <updated>2022-05-29T03:10:40.766Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-TypeScript简介"><a href="#第一章-TypeScript简介" class="headerlink" title="第一章 TypeScript简介"></a>第一章 TypeScript简介</h1><h2 id="1-1-TypeScript概述"><a href="#1-1-TypeScript概述" class="headerlink" title="1.1 TypeScript概述"></a>1.1 TypeScript概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>TypeScript是一种由微软开源的编程语言。它是 JavaScript 的一个超集，而且本质上向这个语言添加了可选的静态类型和基于类的面向对象编程。<br><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>TypeScript 扩展了 JavaScript 的句法，所以任何现有的 JavaScript 程序可以不加改变的在 TypeScript 下工作。TypeScript 是为大型应用之开发而设计，而编译时它产生 JavaScript 以确保兼容性。</p><h2 id="1-2-TypeScript安装"><a href="#1-2-TypeScript安装" class="headerlink" title="1.2 TypeScript安装"></a>1.2 TypeScript安装</h2><ol><li><p>安装TypesScript</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm</span></span><br><span class="line">npm install -g typescript </span><br><span class="line"><span class="comment"># yarn</span></span><br><span class="line">yarn global add typescript</span><br><span class="line"><span class="comment"># 如果没有安装yarn,先安装yarn</span></span><br><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure></li><li><p>编写TypeScript文件：是以ts结尾的文本文件，并使用<code>tsc</code>命令编译ts文件，编译成功会生对应的js文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc xxx.ts</span><br></pre></td></tr></table></figure></li></ol><h1 id="第二章-TypeScript基础"><a href="#第二章-TypeScript基础" class="headerlink" title="第二章 TypeScript基础"></a>第二章 TypeScript基础</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><ol><li><p>定义变量并指定数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本格式</span></span><br><span class="line"><span class="keyword">let</span> 变量名称:变量类型;</span><br></pre></td></tr></table></figure></li><li><p>定义变量同时为变量赋值：TypeScript会根据变量的值推断变量的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名称 = 值;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-2-数据类型"><a href="#2-2-数据类型" class="headerlink" title="2.2 数据类型"></a>2.2 数据类型</h2><h3 id="1-布尔类型（boolean）"><a href="#1-布尔类型（boolean）" class="headerlink" title="1. 布尔类型（boolean）"></a>1. 布尔类型（boolean）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义boolean类型变量</span></span><br><span class="line"><span class="keyword">let</span> 变量名称:boolean;</span><br><span class="line"><span class="comment">// 定义boolean类型变量并赋值,TypeScript</span></span><br><span class="line"><span class="keyword">let</span> 变量名称 = <span class="literal">true</span> | <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="2-数字类型-（number）"><a href="#2-数字类型-（number）" class="headerlink" title="2. 数字类型 （number）"></a>2. 数字类型 （number）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名称:number;</span><br></pre></td></tr></table></figure><h3 id="3-字符串类型（string）"><a href="#3-字符串类型（string）" class="headerlink" title="3. 字符串类型（string）"></a>3. 字符串类型（string）</h3><h3 id="4-数组类型（array）"><a href="#4-数组类型（array）" class="headerlink" title="4. 数组类型（array）"></a>4. 数组类型（array）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组字面量定义数组</span></span><br><span class="line"><span class="keyword">let</span> 变量名称:元素类型[] = [元素<span class="number">1</span>,元素<span class="number">2</span>,... ...];</span><br><span class="line"><span class="comment">// 使用数组对象并指定泛型定义数组</span></span><br><span class="line"><span class="keyword">let</span> 变量名称:<span class="title class_">Array</span>&lt;元素类型&gt; = [元素<span class="number">1</span>,元素<span class="number">2</span>,... ...];</span><br></pre></td></tr></table></figure><h3 id="5-元组类型（tuple）"><a href="#5-元组类型（tuple）" class="headerlink" title="5. 元组类型（tuple）"></a>5. 元组类型（tuple）</h3><ul><li><p>元组表示固定长度的数组：即一旦定义好后，元组不允许修改；</p></li><li><p>定义元组需要为元组内每个元素都指定数据类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名称:[string,number,boolean] = [<span class="string">&quot;ts&quot;</span>,<span class="number">2</span>,<span class="literal">false</span>]</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-枚举类型（enum）"><a href="#6-枚举类型（enum）" class="headerlink" title="6. 枚举类型（enum）"></a>6. 枚举类型（enum）</h3><ul><li><p>定义枚举类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">enum 枚举类名称&#123;</span><br><span class="line">  <span class="variable constant_">NAME_A</span>,<span class="variable constant_">NAME_B</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用枚举</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量 = 枚举类名称.<span class="property">NAME_A</span>;</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-任意类型（any）"><a href="#7-任意类型（any）" class="headerlink" title="7. 任意类型（any）"></a>7. 任意类型（any）</h3><ul><li><p>TypeScript中声明any类型表示放弃对变量进行类型校验</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量:any;</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-未知类型（unknown）"><a href="#8-未知类型（unknown）" class="headerlink" title="8. 未知类型（unknown）"></a>8. 未知类型（unknown）</h3><ul><li><p>表示未知类型：是类型安全的any；</p></li><li><p>unknown类型的变量不能赋值给其他类型的变量；</p></li><li><p>可以用类型断言：手动将unknown类型指定为其他类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">str</span>:string = <span class="string">&#x27;已知类型是字符串&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">un</span>:unknown = <span class="string">&#x27;字符串&#x27;</span>;</span><br><span class="line"><span class="comment">// 通过类型断言将un赋值给str</span></span><br><span class="line">str = un <span class="keyword">as</span> string;</span><br></pre></td></tr></table></figure></li></ul><h3 id="9-空值（null）"><a href="#9-空值（null）" class="headerlink" title="9. 空值（null）"></a>9. 空值（null）</h3><h3 id="10-未定义（undefined）"><a href="#10-未定义（undefined）" class="headerlink" title="10.  未定义（undefined）"></a>10.  未定义（undefined）</h3><h3 id="11-不存在（never）"><a href="#11-不存在（never）" class="headerlink" title="11. 不存在（never）"></a>11. 不存在（never）</h3><ul><li>表示未知类型：比如定义了一个方法专门为了throw异常，则该方法返回值为never类型；</li></ul><h3 id="12-空（void）"><a href="#12-空（void）" class="headerlink" title="12. 空（void）"></a>12. 空（void）</h3><ul><li><p>一般用于函数（方法）的返回值：表示方法没有返回值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称():<span class="keyword">void</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="13-复合类型"><a href="#13-复合类型" class="headerlink" title="13. 复合类型"></a>13. 复合类型</h3><ul><li><p>复合类型表示变量可以定义多个类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面变量表示可以是string或者number</span></span><br><span class="line"><span class="keyword">let</span> 变量名称:string|number;</span><br></pre></td></tr></table></figure></li><li><p>复合类型别名：如果复合类型在多处使用，可以为符合类型定义别名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义复合类型别名</span></span><br><span class="line">type 别名 = string|number；</span><br><span class="line"><span class="comment">// 使用别名</span></span><br><span class="line"><span class="keyword">let</span> 变量名称:别名;</span><br></pre></td></tr></table></figure></li></ul><h3 id="14-对象（object）"><a href="#14-对象（object）" class="headerlink" title="14. 对象（object）"></a>14. 对象（object）</h3><ul><li>一切皆对象，可以使用对象字面量<code>&#123;&#125;</code>约束变量内的属性；</li><li><code>&#123;&#125;</code>内的属性如果是<code>?</code>表示是可选属性；</li><li><code>&#123;&#125;</code>内的属性如果是<code>[]</code>表示是包含多个可选属性；</li></ul><h2 id="2-3-函数"><a href="#2-3-函数" class="headerlink" title="2.3 函数"></a>2.3 函数</h2><h3 id="1-函数返回值"><a href="#1-函数返回值" class="headerlink" title="1. 函数返回值"></a>1. 函数返回值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称():返回值类型&#123;</span><br><span class="line">  <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-函数形参"><a href="#2-函数形参" class="headerlink" title="2. 函数形参"></a>2. 函数形参</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名称(参数<span class="attr">A</span>:参数类型,参数<span class="attr">B</span>:参数类型, ... ...):<span class="keyword">void</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-可选参数"><a href="#3-可选参数" class="headerlink" title="3. 可选参数"></a>3. 可选参数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">name:string,age?:number</span>):string&#123;</span><br><span class="line">  <span class="comment">// age是可选参数,可选参数必须配置到参数的最后面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-参数默认值"><a href="#4-参数默认值" class="headerlink" title="4. 参数默认值"></a>4. 参数默认值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params">name:string,age:number=<span class="number">20</span></span>):string&#123;</span><br><span class="line"><span class="comment">// age参数可以不传值,默认值是20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-三点运算符"><a href="#5-三点运算符" class="headerlink" title="5. 三点运算符"></a>5. 三点运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 接收多个参数封装到result数组中</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">...result:number[]</span>):number&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 三点运算符需要的定义在函数参数的最后</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a:number,b:number,...result:number[]</span>):number&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章-TypeScript面向对象"><a href="#第三章-TypeScript面向对象" class="headerlink" title="第三章 TypeScript面向对象"></a>第三章 TypeScript面向对象</h1><h2 id="3-1-对象"><a href="#3-1-对象" class="headerlink" title="3.1 对象"></a>3.1 对象</h2><h3 id="1-对象（class定义）"><a href="#1-对象（class定义）" class="headerlink" title="1. 对象（class定义）"></a>1. 对象（class定义）</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;eat&#x27;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-属性定义"><a href="#2-属性定义" class="headerlink" title="2. 属性定义"></a>2. 属性定义</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 静态属性</span></span><br><span class="line">  public <span class="keyword">static</span> <span class="attr">gender</span>:boolean;</span><br><span class="line">  <span class="comment">// 实例属性</span></span><br><span class="line">  public <span class="attr">name</span>:string;</span><br><span class="line">  <span class="comment">// 私有属性</span></span><br><span class="line">  private <span class="attr">age</span>:number;</span><br><span class="line"><span class="comment">// 只读属性</span></span><br><span class="line">readonly <span class="attr">address</span>:string;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实例方法</span></span><br><span class="line">  public <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 静态方法</span></span><br><span class="line">  public <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-构造函数与this"><a href="#3-构造函数与this" class="headerlink" title="3. 构造函数与this"></a>3. 构造函数与this</h3><ol><li><p>构造函数：当使用类new对象的时候会调用该对象的构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  public name</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name:string</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数语法糖：构造函数的属性可以定义在构造函数中，并且省略构造函数中参数赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public name: string</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数中this：表示调用构造函数的对象的引用；</p></li></ol><h3 id="3-3-属性封装"><a href="#3-3-属性封装" class="headerlink" title="3.3 属性封装"></a>3.3 属性封装</h3><ol><li><p>类属性访问控制符</p><ul><li>public: (默认控制符)</li><li>protected: (受保护的，内部和子类中访问到，外部不可访问)</li><li>private: (私有的)</li></ul></li><li><p>设置私有属性并为属性设置getset方法</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>:<span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name:<span class="built_in">string</span></span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-继承"><a href="#3-2-继承" class="headerlink" title="3.2 继承"></a>3.2 继承</h2><h3 id="1-继承概述"><a href="#1-继承概述" class="headerlink" title="1. 继承概述"></a>1. 继承概述</h3><ul><li>继承使用extends关键字：extends后面的类表示父类（被继承的类）</li><li>子类拥有父类所有public和protect修饰符的成员</li></ul><h3 id="2-继承extends"><a href="#2-继承extends" class="headerlink" title="2. 继承extends"></a>2. 继承extends</h3><ol><li><p>类的继承基本写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">public name: string</span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义Dog类并继承Animal类,则Dog类也拥有了name属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>super 调用父类的构造函数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span>= name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span>, <span class="keyword">public</span> code: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">code</span> = code;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-3-抽象类"><a href="#3-3-抽象类" class="headerlink" title="3.3 抽象类"></a>3.3 抽象类</h2><h3 id="1-抽象类概述"><a href="#1-抽象类概述" class="headerlink" title="1. 抽象类概述"></a>1. 抽象类概述</h3><ul><li>抽象类不能被实例化：即不能用来new对象，需要通过子类继承抽象类，new子类对象</li><li>抽象类中可以定义抽象方法：只有方法参数和方法名称没有方法体的方法，抽象方法需要延迟到子类进行实现</li></ul><h3 id="2-抽象类abstract"><a href="#2-抽象类abstract" class="headerlink" title="2. 抽象类abstract"></a>2. 抽象类abstract</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="title function_">eat</span>():<span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line">  <span class="title function_">eat</span>():<span class="keyword">void</span>&#123;</span><br><span class="line">    <span class="comment">// 子类必须实现抽象类中的抽象方法</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-接口"><a href="#3-4-接口" class="headerlink" title="3.4 接口"></a>3.4 接口</h2><h3 id="1-接口概述"><a href="#1-接口概述" class="headerlink" title="1. 接口概述"></a>1. 接口概述</h3><ul><li>接口是特殊的抽象类：接口中的方法都是抽象方法；</li><li>接口可以重复定义：如果实现接口则需要实现多个接口中的所有冲虚方法；</li></ul><h3 id="2-接口interface"><a href="#2-接口interface" class="headerlink" title="2. 接口interface"></a>2. 接口interface</h3><ul><li><p>用来建立某种代码约定，使得其他开发者调用某个方法或者创建新的类时必须遵循接口所定义的代码约定。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">IPerson</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> config: IPerson</span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;zhanggsan&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">19</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>interface接口用来做抽象封装</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">eat</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sheep</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i eat grass&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Tiger</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;i eat meat&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-接口泛型"><a href="#3-接口泛型" class="headerlink" title="3. 接口泛型"></a>3. 接口泛型</h3><ul><li><p>定义接口规定属性类型，规定属性名称</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">TypeA</span>&#123;</span><br><span class="line">  [属性名:属性类型]: 属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-5-泛型"><a href="#3-5-泛型" class="headerlink" title="3.5 泛型"></a>3.5 泛型</h2><h3 id="1-泛型概述"><a href="#1-泛型概述" class="headerlink" title="1. 泛型概述"></a>1. 泛型概述</h3><ul><li>类型参数化：在类中使用类型的时候可以向参数一样，类型由使用者在调用的时候指定；</li></ul><h3 id="2-泛型使用场景"><a href="#2-泛型使用场景" class="headerlink" title="2. 泛型使用场景"></a>2. 泛型使用场景</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var works: Array&lt;Person&gt; = []; // 数组里面只能放入 Person 对象</span><br><span class="line"></span><br><span class="line">works[0] = new Person(&#x27;zhangsan&#x27;);</span><br><span class="line">works[1] = new Employee(&#x27;lisi&#x27;, &#x27;123&#x27;);</span><br></pre></td></tr></table></figure><h2 id="3-6-注解"><a href="#3-6-注解" class="headerlink" title="3.6 注解"></a>3.6 注解</h2><h3 id="1-注解概述"><a href="#1-注解概述" class="headerlink" title="1. 注解概述"></a>1. 注解概述</h3><h3 id="2-注解使用"><a href="#2-注解使用" class="headerlink" title="2. 注解使用"></a>2. 注解使用</h3><h1 id="第四章-TypeScript配置"><a href="#第四章-TypeScript配置" class="headerlink" title="第四章 TypeScript配置"></a>第四章 TypeScript配置</h1><h2 id="4-1-TypeScript配置"><a href="#4-1-TypeScript配置" class="headerlink" title="4.1 TypeScript配置"></a>4.1 TypeScript配置</h2><h2 id="4-2-Webpage配置TS"><a href="#4-2-Webpage配置TS" class="headerlink" title="4.2 Webpage配置TS"></a>4.2 Webpage配置TS</h2><h2 id="4-3-Vue3配置TS"><a href="#4-3-Vue3配置TS" class="headerlink" title="4.3 Vue3配置TS"></a>4.3 Vue3配置TS</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-TypeScript简介&quot;&gt;&lt;a href=&quot;#第一章-TypeScript简介&quot; class=&quot;headerlink&quot; title=&quot;第一章 TypeScript简介&quot;&gt;&lt;/a&gt;第一章 TypeScript简介&lt;/h1&gt;&lt;h2 id=&quot;1-1-TypeS
      
    
    </summary>
    
    
      <category term="前端全栈" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JSFW" scheme="http://yoursite.com/tags/JSFW/"/>
    
  </entry>
  
  <entry>
    <title>0602-NodeJS</title>
    <link href="http://yoursite.com/2006/02/01/0602-NodeJS/"/>
    <id>http://yoursite.com/2006/02/01/0602-NodeJS/</id>
    <published>2006-01-31T16:04:00.000Z</published>
    <updated>2022-04-09T00:10:10.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Node-js基础"><a href="#第一章-Node-js基础" class="headerlink" title="第一章 Node.js基础"></a>第一章 Node.js基础</h1><h2 id="1-1-Nodejs概述"><a href="#1-1-Nodejs概述" class="headerlink" title="1.1 Nodejs概述"></a>1.1 Nodejs概述</h2><ol><li>Nodejs简介：Node.js发布于2009年5月，由Ryan Dahl开发，是一个基于Chrome V8引擎的JavaScript运行环境，使用了一个事件驱动、非阻塞式I/O模型，让JavaScript 运行在服务端的开发平台；</li><li>Nodejs功能特性：Nodejs内置的相关API可以快速搭建网络服务器，相关的功能特性如：<ul><li>文件读写：File System</li><li>进程管理：Process</li><li>网络通信：http、https</li></ul></li></ol><h2 id="1-2-Nodejs发展历史"><a href="#1-2-Nodejs发展历史" class="headerlink" title="1.2 Nodejs发展历史"></a>1.2 Nodejs发展历史</h2><ul><li>2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。</li><li>2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node包，随后几个月里，有人开始使用Node开发应用。</li><li>2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。</li><li>2010年年底，Node获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node的发展。</li><li>2011年7月，Node在微软的支持下发布Windows版本。</li></ul><h1 id="第二章-Nodejs相关工具"><a href="#第二章-Nodejs相关工具" class="headerlink" title="第二章 Nodejs相关工具"></a>第二章 Nodejs相关工具</h1><h2 id="2-1-nvm"><a href="#2-1-nvm" class="headerlink" title="2.1 nvm"></a>2.1 nvm</h2><ol><li><p>nvm（node version manager）：Nodejs的版本管理工具</p></li><li><p>nvm安装</p><ul><li><p>Linux系统安装nvm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.1/install.sh | bash</span><br><span class="line"><span class="comment"># 刷新配置文件</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure></li><li><p>Window系统安装nvm：<a href='https://github.com/coreybutler/nvm-windows/releases'>Github下载地址</a></p></li></ul></li><li><p>nvm命令说明</p><table><thead><tr><th>命令</th><th>使用说明</th></tr></thead><tbody><tr><td>nvm list [available]</td><td>列出已经安装的node.js版本 - 参数available：显示可下载版本的部分列表 - 参数installed：显示已安装的版本列表</td></tr><tr><td>nvm install <code>&lt;version&gt;</code> [arch]</td><td>下载安装nodejs - 参数version：选择指定版本 - 参数arch：指定安装32位或64位版本（默认为系统arch）</td></tr><tr><td>nvm version</td><td>显示当前运行的nvm版本，可以简写为nvm v</td></tr><tr><td>nvm on</td><td>启用node.js版本管理</td></tr><tr><td>nvm off</td><td>禁用node.js版本管理</td></tr><tr><td>nvm uninstall <code>&lt;version&gt;</code></td><td>卸载指定版本的nodejs</td></tr><tr><td>nvm use [version]</td><td>切换到使用指定的nodejs版本</td></tr></tbody></table></li></ol><h2 id="2-2-npm"><a href="#2-2-npm" class="headerlink" title="2.2 npm"></a>2.2 npm</h2><ol><li><p>npm（node package manager）：nodejs的包管理工具，一般Nodejs项目的包相关信息会定义在package.json配置文件中；</p></li><li><p>nodejs的包管理配置文件初始化</p><ul><li><p>初始化package.json</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p>配置文件初始化参数说明</p><blockquote><ul><li>name：包名。</li><li>version：包的版本号。</li><li>description：包的描述。</li><li>main：main 字段指定了程序的主入口文件</li><li>script：由脚本命令组成的hash对象,key是生命周期事件，value是要运行的命令。</li><li>keyword：关键字</li><li>author：包的作者姓名。</li><li>license：要指定一个许可证，让人知道使用的权利和限制的。</li></ul></blockquote></li></ul></li><li><p>npm命令说明</p><table><thead><tr><th>npm命令</th><th>说明</th></tr></thead><tbody><tr><td>npm version</td><td>查看模块版本</td></tr><tr><td>npm help</td><td>查看某条命令的详细帮助</td></tr><tr><td>npm init</td><td>在项目中引导创建一个package.json文件</td></tr><tr><td>npm install 包名</td><td>安装包<br /> - 选项–global = -g：表示是全局安装<br /> - 选项-S = –save：表示安装到dependence中<br /> - 选项-D = –save-dev：表示安装到DevDependence中</td></tr><tr><td>npm uninstall 报名</td><td>卸载包<br /> - 选项–gloable = -g：表示卸载的是全局包</td></tr><tr><td>npm ls</td><td>查看安装的模块</td></tr><tr><td>npm outdated</td><td>检查模块是否已经过时</td></tr><tr><td>npm update <package></td><td>把当前目录下<code>node_modules</code>子目录里边的对应模块更新至最新版本</td></tr><tr><td>npm cache clear</td><td>清空NPM本地缓存</td></tr><tr><td>npm adduser</td><td>用户登录</td></tr><tr><td>npm publish</td><td>向npm仓库发布包</td></tr><tr><td>npm config set proxy=<a href="http://xxx">http://xxx</a></td><td>设置代理</td></tr></tbody></table></li><li><p>package.json包管理说明</p><ul><li><p>-S, –save 安装包信息将加入到dependencies（生产阶段的依赖）:不要将测试或过渡性的依赖放在<code>dependencies</code>hash中</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install gulp --save 或 npm install gulp -S</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.9.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>-E, –save-exact 精确安装指定模块版本</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install gulp --save-exact 或 npm install gulp -E</span></span><br><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.9.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>-D, –save-dev 安装包信息将加入到devDependencies（开发阶段的依赖）:不需要在开发使用的外部测试或者文档框架，将这些附属的项目列在<code>devDependencies</code>中。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install gulp --save-dev 或 npm install gulp -D</span></span><br><span class="line"><span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.9.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>-O, –save-optional 安装包信息将加入到optionalDependencies（可选阶段的依赖）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install gulp --save-optional 或 npm install gulp -O</span></span><br><span class="line"><span class="attr">&quot;optionalDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;gulp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.9.1&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>package.json中包的版本说明</p><ul><li><p>node包的版本号规范</p><blockquote><ul><li>第一部分为主版本号，变化了表示有了一个不兼容上个版本的大更改。</li><li>第二部分为次版本号，变化了表示增加了新功能，并且可以向后兼容。</li><li>第三部分为修订版本号，变化了表示有bug修复，并且可以向后兼容。</li><li>第四部分为日期版本号加希腊字母版本号，希腊字母版本号共有五种，分别为base、alpha、beta 、RC 、 release</li></ul></blockquote></li><li><p>库中版本号说明</p><blockquote><ul><li><strong>version</strong>：必须匹配某个版本</li><li><strong>&gt;version</strong>：必须大于某个版本</li><li><strong>&gt;=version</strong>：可大于或等于某个版本</li><li><strong>&lt;version</strong>：必须小于某个版本</li><li><strong>&lt;=version</strong>：可以小于或等于某个版本</li><li><strong>^version</strong>：主版本号确定，次版本号和修订版本是最新版本</li><li><strong>~version</strong>：主版本号和此版本好确定，修订版本号是最新版本</li><li>*****：最新版本</li></ul></blockquote></li></ul></li><li><p>package.json的脚本命令</p></li></ol><h2 id="2-3-nrm"><a href="#2-3-nrm" class="headerlink" title="2.3 nrm"></a>2.3 nrm</h2><ol><li><p>nrm（npm registry manager）：npm的镜像源管理工具</p></li><li><p>下载nrm</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g nrm</span><br></pre></td></tr></table></figure></li><li><p>nrm常用命令</p><table><thead><tr><th>nrm命令</th><th>说明</th></tr></thead><tbody><tr><td>nrm ls</td><td>查看可选的源</td></tr><tr><td>nrm use taobao</td><td>切换到taobao源</td></tr><tr><td>nrm add <code>&lt;registry&gt;</code>  <code>&lt;url&gt;</code></td><td>增加定制的源</td></tr><tr><td>nrm del <code>&lt;registry&gt;</code></td><td>删除对应的源</td></tr><tr><td>nrm test</td><td>测试相应源的响应时间</td></tr></tbody></table></li></ol><h2 id="2-4-npx"><a href="#2-4-npx" class="headerlink" title="2.4 npx"></a>2.4 npx</h2><ol><li>npx：帮助执行依赖包node_modules包里的二进制文件，而且不需要在命令行指定二进制文件的路径， npm5.2版本开始，就与npm捆绑在一起。</li><li>npx说明：npm执行二进制文件原理：①默认情况下，首先检查路径中是否存在要执行的包（即在项目中）；②如果存在，它将执行；③若不存在，意味着尚未安装该软件包，npx将安装其最新版本，然后执行它；<ul><li>阻止默认行为：npx  [package] –no-install（告诉npx ，它应该仅执行。[package]，如果之前未安装，则不安装。)</li></ul></li></ol><h1 id="第三章-脚本命令"><a href="#第三章-脚本命令" class="headerlink" title="第三章 脚本命令"></a>第三章 脚本命令</h1><h2 id="3-1-脚本命令介绍"><a href="#3-1-脚本命令介绍" class="headerlink" title="3.1 脚本命令介绍"></a>3.1 脚本命令介绍</h2><ol><li>什么是npm脚本<ul><li>在<code>package.json</code>文件里面，使用<code>scripts</code>字段定义脚本命令：<code>scripts</code>字段是一个对象。它的每一个属性，对应一段脚本。</li><li>命令行下使用<code>npm run</code>命令，就可以执行这段脚本：这些定义在<code>package.json</code>里面的脚本，就称为 npm 脚本</li></ul></li><li>原理：每当执行<code>npm run</code>，就会自动新建一个 Shell，在这个 Shell 里面执行指定的脚本命令。因此，只要是 Shell（一般是 Bash）可以运行的命令，就可以写在 npm 脚本里面。比较特别的是，<code>npm run</code>新建的这个 Shell，会将当前目录的<code>node_modules/.bin</code>子目录加入<code>PATH</code>变量，执行结束后，再将<code>PATH</code>变量恢复原样。</li><li>npm run的四种简写形式<ul><li><code>npm start</code>是<code>npm run start</code></li><li><code>npm stop</code>是<code>npm run stop</code>的简写</li><li><code>npm test</code>是<code>npm run test</code>的简写</li><li><code>npm restart</code>是<code>npm run stop &amp;&amp; npm run restart &amp;&amp; npm run start</code>的简写</li></ul></li></ol><h2 id="3-2-脚本命令基础"><a href="#3-2-脚本命令基础" class="headerlink" title="3.2 脚本命令基础"></a>3.2 脚本命令基础</h2><ol><li><p>通配符：由于 npm 脚本就是 Shell 脚本，因为可以使用 Shell 通配符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;lint&quot;</span>: <span class="string">&quot;jshint *.js&quot;</span><span class="comment">// `*`表示任意文件名，`**`表示任意一层子目录。</span></span><br><span class="line"><span class="string">&quot;lint&quot;</span>: <span class="string">&quot;jshint **/*.js&quot;</span></span><br><span class="line"><span class="string">&quot;test&quot;</span>: <span class="string">&quot;tap test/\*.js&quot;</span><span class="comment">// 如果要将通配符传入原始命令，防止被 Shell 转义，要将星号转义。</span></span><br></pre></td></tr></table></figure></li><li><p>传参：向 npm 脚本传入参数，要使用<code>--</code>标明。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;script&quot;</span>:&#123;</span><br><span class="line">    <span class="string">&quot;lint&quot;</span>: <span class="string">&quot;jshint **.js&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lint:checkstyle&quot;</span>: <span class="string">&quot;npm run lint -- --reporter checkstyle &gt; checkstyle.xml&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上面的npm run lint命令传入参数，必须写成下面这样。</span></span><br><span class="line">&gt; $ npm run lint --  --reporter checkstyle &gt; checkstyle.<span class="property">xml</span></span><br></pre></td></tr></table></figure></li><li><p>执行顺序：如果 npm 脚本里面需要执行多个任务，那么需要明确它们的执行顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run script1.<span class="property">js</span> &amp; npm run script2.<span class="property">js</span><span class="comment">// 并行执行 &amp;</span></span><br><span class="line">npm run script1.<span class="property">js</span> &amp;&amp; npm run script2.<span class="property">js</span><span class="comment">// 继发执行</span></span><br></pre></td></tr></table></figure></li><li><p>钩子：npm 脚本有<code>pre</code>和<code>post</code>两个钩子。举例来说，<code>build</code>脚本命令的钩子就是<code>prebuild</code>和<code>postbuild</code>。执行<code>npm run build</code>会自动按照下面的顺序执行：<code>npm run prebuild &amp;&amp; npm run build &amp;&amp; npm run postbuild</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;prebuild&quot;</span>: <span class="string">&quot;echo I run before the build script&quot;</span>,</span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;cross-env NODE_ENV=production webpack&quot;</span>,</span><br><span class="line"><span class="string">&quot;postbuild&quot;</span>: <span class="string">&quot;echo I run after the build script&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>npm_lifecycle_event变量：返回当前正在运行的脚本名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">TARGET</span> = process.<span class="property">env</span>.<span class="property">npm_lifecycle_event</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">TARGET</span> === <span class="string">&#x27;test&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Running the test task!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">TARGET</span> === <span class="string">&#x27;pretest&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Running the pretest task!`</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable constant_">TARGET</span> === <span class="string">&#x27;posttest&#x27;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Running the posttest task!`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-3-脚本变量"><a href="#3-3-脚本变量" class="headerlink" title="3.3 脚本变量"></a>3.3 脚本变量</h2><ol><li><p>脚本变量：npm 脚本有一个非常强大的功能，就是可以使用 npm 的内部变量。通过<code>npm_package_</code>前缀，npm 脚本可以拿到<code>package.json</code>里面的字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span> </span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.2.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;view&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node view.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;obj&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;test&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">&gt; process.env.npm_package_name <span class="comment">// foo</span></span><br><span class="line">&gt; process.env.npm_package_obj_name<span class="comment">// test</span></span><br></pre></td></tr></table></figure></li><li><p>NODE_ENV环境变量：通常这个变量用来区分开发与生产环境，加载不同的配置。</p><ul><li><p>配置：node中有全局变量process表示当前node进程，process.env包含着关于系统环境的信息。但是process.env中并不存在NODE_ENV这个东西，NODE_ENV只是一个用户自定义的变量，当我们在服务启动时配置NODE_ENV,或在代码中给process.env.NODE_ENV赋值，js便能通过process.env.NODE_ENV获取信息。<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NODE_ENV=production  node index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">&gt; process.env.NODE_ENV <span class="comment">// production</span></span><br></pre></td></tr></table></figure></li><li><p>Windows与Linux兼容性处理：跨平台方案，第三方插件cross-env：windows不支持<code>NODE_ENV=development</code>的设置方式。</p><ul><li><p>安装cross-env</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cross-env --save-dev</span><br></pre></td></tr></table></figure></li><li><p>跨平台兼容性配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cross-env NODE_ENV=production  node index.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Node-js基础&quot;&gt;&lt;a href=&quot;#第一章-Node-js基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 Node.js基础&quot;&gt;&lt;/a&gt;第一章 Node.js基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-Nodejs概述&quot;&gt;&lt;a href
      
    
    </summary>
    
    
      <category term="前端全栈" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JSFW" scheme="http://yoursite.com/tags/JSFW/"/>
    
  </entry>
  
  <entry>
    <title>0602-模块化</title>
    <link href="http://yoursite.com/2006/02/01/0602-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://yoursite.com/2006/02/01/0602-%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2006-01-31T16:03:00.000Z</published>
    <updated>2022-04-09T00:10:10.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-模块化概述"><a href="#第一章-模块化概述" class="headerlink" title="第一章 模块化概述"></a>第一章 模块化概述</h1><h2 id="1-1-模块化历程"><a href="#1-1-模块化历程" class="headerlink" title="1.1 模块化历程"></a>1.1 模块化<a href='https://www.cnblogs.com/lvdabao/p/js-modules-develop.html'>历程</a></h2><ol><li><strong>无模块时代</strong>： ajax未出，js只是玩具语言：只能做表单校验，简单动画，代码堆在一起，顺序执行</li><li><strong>模块萌芽时代</strong>：2006年ajax提出，前端业务代码越来越多<ul><li>暴露的问题：①全局变量灾难②函数命名冲突③js文件依赖管理复杂</li><li>最初的解决方案：①用自执行函数包装代码②java风格的命名空间：包名.模块名③jQuery分隔匿名自执行函数</li><li>模块化需要解决的问题：①不污染模块外的任何代码②标识一个模块③暴露模块的API，不增加全局变量④管理模块的依赖</li></ul></li><li><strong>源自nodejs的CommonJs</strong>：2009年node问世开始编写服务端代码，模块化成为必须<ul><li>CommonJs社区发力，制定了Modules/1.0规范：①书写规范②全require函数③require包含依赖则依次加载④exports暴露API：exports只能是一个对象，暴露的API只能是exports对象的属性</li></ul></li><li><strong>服务端向前端进军</strong>：Modules/1.0规范源于服务端，无法直接用于浏览器端：①外层没有function，变量暴露在全局②浏览器需要先从服务器下载文件，然后运行代码才能得到API，没有办法让代码同步执行；下一代规范产生三种分歧：<ul><li><strong>Modules/1.x派</strong>：“保皇派“给存在的问题找解决方案，包function代码，加异步方案，制定了Modules/Transport规范</li><li><strong>Modules/Async派</strong>：”革新派“不能沿用旧的模块标准，认为模块在定义的时候就必须指明所依赖的模块，然后把本模块的代码写在回调函数里。模块的加载也是通过下载-回调这样的过程来进行。最终从CommonJs中分裂了出去，独立制定了浏览器端的js模块化规范AMD（Asynchronous Module Definition）</li><li><strong>Modules/2.0派</strong>：“中间派”既不想丢掉旧的规范，也不想像AMD那样推到重来；最终他们制定了一个Modules/Wrappings规范</li></ul></li><li><strong>AMD/RequireJs的崛起与妥协</strong>：部分兼容CommonJs</li><li><strong>兼容并包的CMD/seajs</strong>：requirejs有上述种种不甚优雅的地方，所以必然会有新东西来完善它，这就是后起之秀seajs；s，seajs的作者是国内大牛淘宝前端布道者玉伯。seajs全面拥抱Modules/Wrappings规范，不用requirejs那样回调的方式来编写模块。而它也不是完全按照Modules/Wrappings规范，seajs并没有使用declare来定义模块，而是使用和requirejs一样的define；</li><li><strong>面向未来的ES6模块标准</strong>：作为官方的ECMA必然要有所行动，js模块很早就列入草案，终于在2015年6月份发布了ES6正式版。然而，可能由于所涉及的技术还未成熟，ES6移除了关于模块如何加载/执行的内容，只保留了定义、引入模块的语法。还只是个雏形，半成品都算不上；</li></ol><h2 id="1-2-模块化规范"><a href="#1-2-模块化规范" class="headerlink" title="1.2 模块化规范"></a>1.2 模块化规范</h2><ol><li>CommonJS</li><li>RequireJs</li><li>CMD</li><li>ES6</li></ol><h1 id="第二章-三大模块化规范"><a href="#第二章-三大模块化规范" class="headerlink" title="第二章 三大模块化规范"></a>第二章 三大模块化规范</h1><h2 id="2-1-CommonJS"><a href="#2-1-CommonJS" class="headerlink" title="2.1 CommonJS"></a>2.1 CommonJS</h2><ol><li><p>规范说明</p><ul><li>每个文件都可以当做一个模块</li><li>在服务器端：模块的加载和运行是同步加载的，等待时间长</li><li>在浏览器端：模块需要提前编译打包处理：等待时间长，require语法不支持</li></ul></li><li><p>基本语法</p><ul><li><p>暴露模块：CommonJS规范规定，每个模块内部，<code>module</code>变量代表当前模块。这个变量是一个对象，它的<code>exports</code>属性（即<code>module.exports</code>）是对外的接口。加载某个模块，其实是加载该模块的<code>module.exports</code>属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = value<span class="comment">// 是用新的对象替换了exports对象的引用，特定是一个模块只能使用一次</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">xxx</span> = value<span class="comment">// 不断的给exports对象添加新的属性或方法，可以使用多次，暴露多个对象</span></span><br></pre></td></tr></table></figure></li><li><p>引入模块：结构对象或定义变量接受暴露的exports对象；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入第三方模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;包名&#x27;</span>)</span><br><span class="line"><span class="comment">// 引入自定义模块</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;包所在路径&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>commonjs应用到浏览器需要：browserify依赖进行转换commonjs</p></li></ul></li></ol><h2 id="2-2-AMD"><a href="#2-2-AMD" class="headerlink" title="2.2 AMD"></a>2.2 AMD</h2><ol><li><p>规范说明</p><ul><li>是专门用于浏览器端的模块加载：需要依赖Require.js</li><li>加载方式是异步的</li></ul></li><li><p>基本语法</p><ul><li><p>定义模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> 模块;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块,第一个参数是数组,数组元素是依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>([模块A,模块B],<span class="keyword">function</span>(<span class="params">ma,mb</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> 模块;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>引入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">requirejs.<span class="title function_">config</span>(&#123;</span><br><span class="line">    <span class="attr">paths</span>:&#123;</span><br><span class="line">        模块:<span class="string">&#x27;路径&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">require</span>([<span class="string">&#x27;模块A&#x27;</span>,<span class="string">&#x27;模块B&#x27;</span>],<span class="keyword">function</span>(<span class="params">ma,mb</span>)&#123;</span><br><span class="line">    <span class="comment">// 使你ma、mb模块</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="2-3-CMD"><a href="#2-3-CMD" class="headerlink" title="2.3 CMD"></a>2.3 CMD</h2><ol><li><p>规范说明</p><ul><li>是专门用于浏览器端的模块加载：需要依赖Require.js</li><li>加载方式是异步的</li><li>模块在使用是才会加载</li></ul></li><li><p>基本语法</p><ul><li><p>定义模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义没有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;</span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">xxx</span> = value</span><br><span class="line">    <span class="comment">// 或者</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = value</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义有依赖的模块</span></span><br><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;</span><br><span class="line">    <span class="comment">// 引入依赖的模块 - 同步</span></span><br><span class="line">    <span class="keyword">const</span> ma = <span class="built_in">require</span>(<span class="string">&#x27;模块路径&#x27;</span>)</span><br><span class="line">    <span class="comment">// 引入依赖的模块 - 异步</span></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">async</span>(<span class="string">&#x27;模块路径&#x27;</span>,<span class="keyword">function</span>(<span class="params">mc</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 暴露模块</span></span><br><span class="line">    <span class="built_in">exports</span>.<span class="property">xxx</span> = value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>引入模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">define</span>(<span class="keyword">function</span>(<span class="params"><span class="built_in">require</span>,<span class="built_in">exports</span>,<span class="variable language_">module</span></span>)&#123;</span><br><span class="line">    <span class="comment">// 引入依赖的模块 - 同步</span></span><br><span class="line">    <span class="keyword">const</span> ma = <span class="built_in">require</span>(<span class="string">&#x27;模块路径&#x27;</span>)</span><br><span class="line">    <span class="comment">// 引入依赖的模块 - 异步</span></span><br><span class="line"><span class="built_in">require</span>.<span class="title function_">async</span>(<span class="string">&#x27;模块路径&#x27;</span>,<span class="keyword">function</span>(<span class="params">mc</span>)&#123;&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="2-4-ES6"><a href="#2-4-ES6" class="headerlink" title="2.4 ES6"></a>2.4 ES6</h2><ol><li><p>规范说明</p><ul><li><p>依赖的模块需要打包处理，浏览器不知道ES6打包语法</p></li><li><p>需要安装babel-cli、babel-preset-es2015和browserify：将es高级语法转为es2015</p></li><li><p>定义.babelrc文件：bable-cli读取配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;es2015&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>基本语法</p><ul><li><p>定义模块export</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出默认单个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">obj</span>:&#123;&#125;,</span><br><span class="line">    <span class="attr">key</span>:value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 分别暴露多个对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> key = value</span><br><span class="line"></span><br><span class="line"><span class="comment">// 统一暴露多个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> key = value</span><br><span class="line"><span class="keyword">export</span> &#123;fun,obj,key&#125;</span><br></pre></td></tr></table></figure></li><li><p>引入模块import</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import 默认模块</span></span><br><span class="line"><span class="keyword">import</span> 自定义名称 form <span class="string">&#x27;模块路径&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import 解构变量</span></span><br><span class="line"><span class="keyword">import</span> &#123;fun,obj,key&#125; form <span class="string">&#x27;模块路径&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-模块化概述&quot;&gt;&lt;a href=&quot;#第一章-模块化概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 模块化概述&quot;&gt;&lt;/a&gt;第一章 模块化概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-模块化历程&quot;&gt;&lt;a href=&quot;#1-1-模块化历程&quot; class
      
    
    </summary>
    
    
      <category term="前端全栈" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JSFW" scheme="http://yoursite.com/tags/JSFW/"/>
    
  </entry>
  
  <entry>
    <title>0601-JavaScript</title>
    <link href="http://yoursite.com/2006/01/01/0601-JavaScript/"/>
    <id>http://yoursite.com/2006/01/01/0601-JavaScript/</id>
    <published>2005-12-31T16:03:00.000Z</published>
    <updated>2022-04-09T00:10:10.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-JavaScript概述"><a href="#第一章-JavaScript概述" class="headerlink" title="第一章 JavaScript概述"></a>第一章 JavaScript概述</h1><h2 id="1-1-JavaScript介绍"><a href="#1-1-JavaScript介绍" class="headerlink" title="1.1 JavaScript介绍"></a>1.1 JavaScript介绍</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>1995 年 2 月，Netscape 公司发布 Netscape Navigator 2 浏览器，并在这个浏览器中免费提供了一个开发工具：<strong>LiveScript</strong>。这是最初的 JavaScript 1.0 版本。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>由于 JavaScript 1.0 很受欢迎，微软在 Internet Explorer 3 中也加入了脚本编程功能。将其命名为 JScript。1997 年，欧洲计算机制造商协会（ECMA）以 JavaScript 1.1 为基础制订了脚本语言标准——ECMA-262，并命名为 ECMAScript，至此ECMAScript成为JavaScript语法标准；</p><h2 id="1-2-JavaScript发展史"><a href="#1-2-JavaScript发展史" class="headerlink" title="1.2 JavaScript发展史"></a>1.2 JavaScript发展史</h2><table><thead><tr><th>发展年份</th><th>版本说明</th></tr></thead><tbody><tr><td>1997 年</td><td>ECMA 发布 262 号标准文件（ECMA-262）的第一版也就是 ECMAScript 1.0 版</td></tr><tr><td>1998 年 6 月</td><td>ECMAScript 2.0 版发布</td></tr><tr><td>1999 年 12 月</td><td>ECMAScript 3.0 版发布，并成为 JavaScript 的通用标准，获得广泛支持</td></tr><tr><td>2007 年 10 月</td><td>ECMAScript 4.0 版草案发布，由于 4.0 版的目标过于激进，各方产生严重分歧</td></tr><tr><td>2008 年 7月</td><td>中止 ECMAScript 4.0 的开发，发布为 ECMAScript 3.1后来改名改名为 ECMAScript 5</td></tr><tr><td>2009 年 12 月</td><td>ECMAScript 5.0 版正式发布</td></tr><tr><td>2011 年 6 月</td><td>ECMAScript 5.1 版发布，并且成为 ISO 国际标准</td></tr><tr><td>2013 年 12 月</td><td>ECMAScript 6 版草案发布</td></tr><tr><td>2015 年 6 月</td><td>ECMAScript 6 发布正式版本，并更名为 ECMAScript 2015</td></tr><tr><td>从此以后</td><td>JavaScript 开始以年份命名，新版本将按照 “ECMAScript+年份” 的形式发布</td></tr></tbody></table><h2 id="1-3-JavaScript组成"><a href="#1-3-JavaScript组成" class="headerlink" title="1.3 JavaScript组成"></a>1.3 JavaScript组成</h2><ul><li><strong>核心（ECMAScript）</strong>：语言核心部分。</li><li><strong>文档对象模型（Document Object Model，DOM）</strong>：网页文档操作标准。</li><li><strong>浏览器对象模型（BOM）</strong>：客户端和浏览器窗口操作基础。</li></ul><h2 id="1-4-JavaScript特点"><a href="#1-4-JavaScript特点" class="headerlink" title="1.4 JavaScript特点"></a>1.4 JavaScript特点</h2><ol><li><strong>脚本语言</strong>：JavaScript是一种解释型的脚本语言</li><li><strong>基于对象</strong>：JavaScript是一种基于对象的脚本语言,它不仅可以创建对象,也能使用现有的对象。</li><li><strong>简单</strong>：JavaScript语言中采用的是弱类型的变量类型，对使用的数据类型未做出严格的要求，是基于Java基本语句和控制的脚本语言，其设计简单紧凑。</li><li><strong>动态性</strong>：JavaScript是一种采用事件驱动的脚本语言,它不需要经过Web服务器就可以对用户的输入做出响应。</li><li><strong>跨平台性</strong>：JavaScript脚本语言不依赖于操作系统,仅需要浏览器的支持。因此一个JavaScript脚本在编写后可以带到任意机器上使用,前提上机器上的浏览器支 持JavaScript脚本语言,JavaScript已被大多数的浏览器所支持。</li><li>不需要服务器的支持。所以在早期程序员比较青睐于JavaScript以减少对服务器的负担，而与此同时也带来另一个问题：安全性。</li><li>而随着服务器的强壮，虽然程序员更喜欢运行于服务端的脚本以保证安全，但JavaScript仍然以其跨平台、容易上手等优势大行其道。同时，有些特殊功能（如AJAX）必须依赖Javascript在客户端进行支持。</li></ol><h2 id="1-5-JavaScript书写格式"><a href="#1-5-JavaScript书写格式" class="headerlink" title="1.5 JavaScript书写格式"></a>1.5 JavaScript书写格式</h2><ol><li><p><strong>行内式</strong>：在html标签中定义JavaScript代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 在事件中使用JavaScript代码</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alter(1);&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">2. 在超链接中定义JavaScript代码</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:alter(1);&quot;</span>&gt;</span>超链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>内嵌式</strong>：在HTML页面中嵌入JavaScript脚本：在 HTML 页面中嵌入 JavaScript 脚本需要使用 <code>&lt;script&gt;</code>标签，用户可以在<code>&lt;script&gt;</code>标签中直接编写 JavaScript 代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个JavaScript程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;Hi,JavaScript!&lt;/h1&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>引用式</strong>：在HTML页面中引入外部的JavaScript脚本文件</p><ul><li><p>定义JavaScript脚本文件：xxx.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;h1&gt;Hi,JavaScript!&lt;/h1&gt;&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>在HTML页面中引入外部的xxx.js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>第一个JavaScript程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;xxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h1 id="第二章-JavaScript基础"><a href="#第二章-JavaScript基础" class="headerlink" title="第二章 JavaScript基础"></a>第二章 JavaScript基础</h1><h2 id="2-1-标识符-关键字-保留字"><a href="#2-1-标识符-关键字-保留字" class="headerlink" title="2.1 标识符/关键字/保留字"></a>2.1 标识符/关键字/保留字</h2><ol><li><p><strong>标识符</strong>：就是名称的专业术语。JavaScript 标识符包括变量名、函数名、参数名和属性名</p><ul><li>第一个字符必须是字母、下划线（_）或美元符号（$）。</li><li>除了第一个字符外，其他位置可以使用 Unicode 字符。一般建议仅使用 ASCII 编码的字母，不建议使用双字节的字符。</li><li>不能与 JavaScript 关键字、保留字重名。</li><li>可以使用 Unicode 转义序列。例如，字符 a 可以使用“\u0061”表示。</li></ul></li><li><p><strong>关键字</strong>：是 ECMA-262 规定的 JavaScript 语言内部使用的一组名称（或称为命令）。这些名称具有特定的用途，用户不能自定义同名的标识符</p><table><thead><tr><th>break</th><th>delete</th><th>if</th><th>this</th><th>while</th></tr></thead><tbody><tr><td><strong>case</strong></td><td><strong>do</strong></td><td><strong>in</strong></td><td><strong>throw</strong></td><td><strong>with</strong></td></tr><tr><td><strong>catch</strong></td><td><strong>else</strong></td><td><strong>instanceof</strong></td><td><strong>try</strong></td><td></td></tr><tr><td><strong>continue</strong></td><td><strong>finally</strong></td><td><strong>new</strong></td><td><strong>typeof</strong></td><td></td></tr><tr><td><strong>debugger（ECMAScript 5 新增）</strong></td><td><strong>for</strong></td><td><strong>return</strong></td><td><strong>var</strong></td><td></td></tr><tr><td><strong>default</strong></td><td><strong>function</strong></td><td><strong>switch</strong></td><td><strong>void</strong></td><td></td></tr></tbody></table></li><li><p><strong>保留字</strong>：是 ECMA-262 规定的 JavaScript 语言内部预备使用的一组名称（或称为命令）。这些名称目前还没有具体的用途，是为 JavaScript 升级版本预留备用的，建议用户不要使用</p><ul><li><p>ECMAScript 保留字</p><table><thead><tr><th>abstract</th><th>double</th><th>goto</th><th>native</th><th>static</th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><strong>enum</strong></td><td><strong>implements</strong></td><td><strong>package</strong></td><td><strong>super</strong></td></tr><tr><td><strong>byte</strong></td><td><strong>export</strong></td><td><strong>import</strong></td><td><strong>private</strong></td><td><strong>synchronized</strong></td></tr><tr><td><strong>char</strong></td><td><strong>extends</strong></td><td><strong>int</strong></td><td><strong>protected</strong></td><td><strong>throws</strong></td></tr><tr><td><strong>class</strong></td><td><strong>final</strong></td><td><strong>interface</strong></td><td><strong>public</strong></td><td><strong>transient</strong></td></tr><tr><td><strong>const</strong></td><td><strong>float</strong></td><td><strong>long</strong></td><td><strong>short</strong></td><td><strong>volatile</strong></td></tr></tbody></table></li><li><p>ECMAScript 3 将 Java 所有关键字都列为保留字，JavaScript 预定义全局变量和函数</p><table><thead><tr><th>arguments</th><th>encodeURL</th><th>Infinity</th><th>Number</th><th>RegExp</th></tr></thead><tbody><tr><td><strong>Array</strong></td><td><strong>encodeURLComponent</strong></td><td><strong>isFinite</strong></td><td><strong>Object</strong></td><td><strong>String</strong></td></tr><tr><td><strong>Boolean</strong></td><td><strong>Error</strong></td><td><strong>isNaN</strong></td><td><strong>parseFloat</strong></td><td><strong>SyntaxError</strong></td></tr><tr><td><strong>Date</strong></td><td><strong>eval</strong></td><td><strong>JSON</strong></td><td><strong>parseInt</strong></td><td><strong>TypeError</strong></td></tr><tr><td><strong>decodeURL</strong></td><td><strong>EvalError</strong></td><td><strong>Math</strong></td><td><strong>RangeError</strong></td><td><strong>undefined</strong></td></tr><tr><td><strong>decodeURLComponent</strong></td><td><strong>Function</strong></td><td><strong>NaN</strong></td><td><strong>ReferenceError</strong></td><td><strong>URLError</strong></td></tr></tbody></table></li></ul></li></ol><h2 id="2-2-数据类型"><a href="#2-2-数据类型" class="headerlink" title="2.2 数据类型"></a>2.2 数据类型</h2><table><thead><tr><th align="center">数据类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">null</td><td align="center">空值，表示非对象</td></tr><tr><td align="center">undefined</td><td align="center">未定义的值，表示未赋值的初始化值</td></tr><tr><td align="center">number</td><td align="center">数字，数学运算的值</td></tr><tr><td align="center">string</td><td align="center">字符串，表示信息流</td></tr><tr><td align="center">boolean</td><td align="center">布尔值，逻辑运算的值</td></tr><tr><td align="center">object</td><td align="center">对象，表示复合结构的数据集</td></tr></tbody></table><ol><li><strong>基本数据类型</strong>：被定义在栈中，栈属于key：value结构的，基本数据的类型的在栈中key是变量名，value是变量的值<ul><li>null</li><li>undefined</li><li>number</li><li>string</li><li>boolean</li></ul></li><li><strong>引用数据类型</strong>：引用数据类型中是被定义在堆空间中，引用数据类型的变量名是定义在栈中的，栈中的key存储引用数据类型的名称，栈中value保存的引用数据类型的内存地址，所有被称为应用数据类型；<ul><li>object</li></ul></li></ol><h2 id="2-3-运算符"><a href="#2-3-运算符" class="headerlink" title="2.3 运算符"></a>2.3 运算符</h2><h3 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1. 算术运算符"></a>1. 算术运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td></tr><tr><td align="left">-</td><td align="left">减法</td></tr><tr><td align="left">*</td><td align="left">乘法</td></tr><tr><td align="left">**</td><td align="left">幂（<a href="https://www.w3school.com.cn/js/js_es6.asp">ES2016</a>）</td></tr><tr><td align="left">/</td><td align="left">除法</td></tr><tr><td align="left">%</td><td align="left">系数</td></tr><tr><td align="left">++</td><td align="left">递增</td></tr><tr><td align="left">–</td><td align="left">递减</td></tr></tbody></table><h3 id="2-赋值运算符"><a href="#2-赋值运算符" class="headerlink" title="2. 赋值运算符"></a>2. 赋值运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">例子</th><th align="left">等同于</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">x = y</td><td align="left">x = y</td></tr><tr><td align="left">+=</td><td align="left">x += y</td><td align="left">x = x + y</td></tr><tr><td align="left">-=</td><td align="left">x -= y</td><td align="left">x = x - y</td></tr><tr><td align="left">*=</td><td align="left">x *= y</td><td align="left">x = x * y</td></tr><tr><td align="left">/=</td><td align="left">x /= y</td><td align="left">x = x / y</td></tr><tr><td align="left">%=</td><td align="left">x %= y</td><td align="left">x = x % y</td></tr><tr><td align="left">&lt;&lt;=</td><td align="left">x &lt;&lt;= y</td><td align="left">x = x &lt;&lt; y</td></tr><tr><td align="left">&gt;&gt;=</td><td align="left">x &gt;&gt;= y</td><td align="left">x = x &gt;&gt; y</td></tr><tr><td align="left">&gt;&gt;&gt;=</td><td align="left">x &gt;&gt;&gt;= y</td><td align="left">x = x &gt;&gt;&gt; y</td></tr><tr><td align="left">&amp;=</td><td align="left">x &amp;= y</td><td align="left">x = x &amp; y</td></tr><tr><td align="left">^=</td><td align="left">x ^= y</td><td align="left">x = x ^ y</td></tr><tr><td align="left">|=</td><td align="left">x |= y</td><td align="left">x = x | y</td></tr><tr><td align="left">**=</td><td align="left">x **= y</td><td align="left">x = x ** y</td></tr></tbody></table><h3 id="3-比较运算符"><a href="#3-比较运算符" class="headerlink" title="3. 比较运算符"></a>3. 比较运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">==</td><td align="left">等于</td></tr><tr><td align="left">===</td><td align="left">等值等型</td></tr><tr><td align="left">!=</td><td align="left">不相等</td></tr><tr><td align="left">!==</td><td align="left">不等值或不等型</td></tr><tr><td align="left">&gt;</td><td align="left">大于</td></tr><tr><td align="left">&lt;</td><td align="left">小于</td></tr><tr><td align="left">&gt;=</td><td align="left">大于或等于</td></tr><tr><td align="left">&lt;=</td><td align="left">小于或等于</td></tr><tr><td align="left">?</td><td align="left">三元运算符</td></tr></tbody></table><h3 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4. 逻辑运算符"></a>4. 逻辑运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">!</td><td align="left">逻辑非</td></tr></tbody></table><h3 id="5-类型运算符"><a href="#5-类型运算符" class="headerlink" title="5. 类型运算符"></a>5. 类型运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">typeof</td><td align="left">返回变量的类型。</td></tr><tr><td align="left">instanceof</td><td align="left">返回 true，如果对象是对象类型的实例</td></tr></tbody></table><h3 id="6-位运算符"><a href="#6-位运算符" class="headerlink" title="6. 位运算符"></a>6. 位运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th><th align="left">例子</th><th align="left">等同于</th><th align="left">结果</th><th align="left">十进制</th></tr></thead><tbody><tr><td align="left">&amp;</td><td align="left">与</td><td align="left">5 &amp; 1</td><td align="left">0101 &amp; 0001</td><td align="left">0001</td><td align="left">1</td></tr><tr><td align="left">|</td><td align="left">或</td><td align="left">5 | 1</td><td align="left">0101 | 0001</td><td align="left">0101</td><td align="left">5</td></tr><tr><td align="left">~</td><td align="left">非</td><td align="left">~ 5</td><td align="left">~0101</td><td align="left">1010</td><td align="left">10</td></tr><tr><td align="left">^</td><td align="left">异或</td><td align="left">5 ^ 1</td><td align="left">0101 ^ 0001</td><td align="left">0100</td><td align="left">4</td></tr><tr><td align="left">&lt;&lt;</td><td align="left">零填充左位移</td><td align="left">5 &lt;&lt; 1</td><td align="left">0101 &lt;&lt; 1</td><td align="left">1010</td><td align="left">10</td></tr><tr><td align="left">&gt;&gt;</td><td align="left">有符号右位移</td><td align="left">5 &gt;&gt; 1</td><td align="left">0101 &gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr><tr><td align="left">&gt;&gt;&gt;</td><td align="left">零填充右位移</td><td align="left">5 &gt;&gt;&gt; 1</td><td align="left">0101 &gt;&gt;&gt; 1</td><td align="left">0010</td><td align="left">2</td></tr></tbody></table><h3 id="7-运算符优先级"><a href="#7-运算符优先级" class="headerlink" title="7. 运算符优先级"></a>7. 运算符优先级</h3><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>. [] ()</td><td>字段访问、数组下标、函数调用以及表达式分组</td></tr><tr><td>++ – - ~ ! delete new typeof void</td><td>一元运算符、返回数据类型、对象创建、未定义值</td></tr><tr><td>* / %</td><td>乘法、除法、取模</td></tr><tr><td>+ - +</td><td>加法、减法、字符串连接</td></tr><tr><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td>移位</td></tr><tr><td>&lt; &lt;= &gt; &gt;= instanceof</td><td>小于、小于等于、大于、大于等于、instanceof</td></tr><tr><td>==  !=  ===    !==</td><td>等于、不等于、严格相等、非严格相等</td></tr><tr><td>&amp;</td><td>按位与</td></tr><tr><td>^</td><td>按位异或</td></tr><tr><td>|</td><td>按位或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>||</td><td>逻辑或</td></tr><tr><td>?:</td><td>条件</td></tr><tr><td>= oP=</td><td>赋值、运算赋值</td></tr><tr><td>,</td><td>多重求值</td></tr></tbody></table><h2 id="2-4-常量-变量-字面量"><a href="#2-4-常量-变量-字面量" class="headerlink" title="2.4 常量/变量/字面量"></a>2.4 常量/变量/字面量</h2><ul><li>字面量：在计算机科学中，字面量（literal）是用于表达源代码中一个固定值的表示法（notation</li><li>变量：计算机中数据是存储在内存中，程序员为这块内存定义的名称称为变量；变量是存储数据的盒子，盒子内的元素可以改变，但是盒子会变；</li><li>常量：有些数据可以在程序使用之前预先设定并在整个运行过程中没有变化，这称为常量</li></ul><h2 id="2-5-程序控制语句"><a href="#2-5-程序控制语句" class="headerlink" title="2.5 程序控制语句"></a>2.5 程序控制语句</h2><h3 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h3><h3 id="2-分支结构"><a href="#2-分支结构" class="headerlink" title="2. 分支结构"></a>2. 分支结构</h3><ul><li><p>if</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (laber&lt; <span class="number">50</span>) &#123;</span><br><span class="line"><span class="comment">// 语句块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if-else</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (laber &gt; <span class="number">50</span>) &#123;</span><br><span class="line">    <span class="comment">//条件为true，执行这个代码块</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//条件为false，执行这个代码块</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>if-else if-else</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laber = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (laber &gt;= <span class="number">100</span>) &#123;                        <span class="comment">//如果满足条件，不会执行下面任何分支</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;甲&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (laber&gt;= <span class="number">90</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;乙&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (laber &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;丙&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (laber &gt;= <span class="number">70</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;丁&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (laber &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;及格&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;                                <span class="comment">//如果以上都不满足，则输出不及格</span></span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&#x27;不及格&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch-case</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laber = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">switch</span> ( laber) &#123;                            <span class="comment">//用于判断box相等的多个值</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;                        <span class="comment">//break;用于防止语句的穿透</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span> : </span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span> : </span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;three&#x27;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span> :                            <span class="comment">//相当于if语句里的else，否则的意思</span></span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3. 循环结构"></a>3. 循环结构</h3><ul><li><p><strong>for</strong>：是一种先判断，后运行的循环语句。但它具有在执行循环之前初始变量和定义循环后要执行代码的能力。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一步，声明变量var laber = 1;</span></span><br><span class="line"><span class="comment">// 第二步，判断laber &lt;= 5</span></span><br><span class="line"><span class="comment">// 第三步，alert(laber )</span></span><br><span class="line"><span class="comment">// 第四步，laber ++</span></span><br><span class="line"><span class="comment">// 第五步，从第二步再来，直到判断为false</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> laber = <span class="number">1</span>; laber &lt;= <span class="number">5</span> ; laber ++) &#123;        </span><br><span class="line">    <span class="title function_">alert</span>(laber );                                  </span><br><span class="line">&#125;                                         </span><br></pre></td></tr></table></figure></li><li><p><strong>for…in</strong>：是一种精准的迭代语句，可以用来枚举对象的属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laber = &#123;                            <span class="comment">//创建一个对象</span></span><br><span class="line">    <span class="string">&#x27;name&#x27;</span> : <span class="string">&#x27;moxiaobo&#x27;</span>,                    <span class="comment">//键值对，左边是属性名，右边是值</span></span><br><span class="line">    <span class="string">&#x27;age&#x27;</span> : <span class="number">28</span>,</span><br><span class="line">    <span class="string">&#x27;height&#x27;</span> : <span class="number">178</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> p <span class="keyword">in</span> laber) &#123;                     <span class="comment">//列举出对象的所有属性</span></span><br><span class="line">    <span class="title function_">alert</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>while</strong>：是一种先判断，后运行的循环语句。也就是说，必须满足条件了之后，方可运行循环体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laber = <span class="number">1</span>;        </span><br><span class="line"><span class="comment">// 先判断，再执行</span></span><br><span class="line"><span class="keyword">while</span> (laber &lt;= <span class="number">5</span>) &#123;                        </span><br><span class="line">    <span class="title function_">alert</span>(laber);</span><br><span class="line">    laber++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>do…while</strong>：是一种先运行，后判断的循环语句。也就是说，不管条件是否满足，至少先运行一次循环体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> laber = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先运行一次，再判断</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="title function_">alert</span>(laber);</span><br><span class="line">    laber++;</span><br><span class="line">&#125; <span class="keyword">while</span> (laber&lt;= <span class="number">5</span>);                        </span><br></pre></td></tr></table></figure></li></ul><h3 id="4-流程控制"><a href="#4-流程控制" class="headerlink" title="4. 流程控制"></a>4. 流程控制</h3><ul><li><p><strong>return</strong>：终止当前流程的执行，无论是分支结构还是循环结构或顺序结构；</p></li><li><p><strong>break</strong>：用于在循环中精确地控制代码的执行。break语句会立即退出循环，强制继续执行循环体后面的语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> laber = <span class="number">1</span>; laber &lt;= <span class="number">10</span>; laber++) &#123;</span><br><span class="line">    <span class="comment">//如果laber 是5，就退出循环</span></span><br><span class="line">    <span class="keyword">if</span> (laber == <span class="number">5</span>) <span class="keyword">break</span>;                        </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(laber );</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br /&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>continue</strong>：用于在循环中精确地控制代码的执行。continue语句退出当前循环，继续后面的循环。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> laber = <span class="number">1</span>; laber &lt;= <span class="number">10</span>; laber++) &#123;</span><br><span class="line">    <span class="comment">// 如果laber 是5，就退出当前循环</span></span><br><span class="line">    <span class="keyword">if</span> (laber == <span class="number">5</span>) <span class="keyword">continue</span>;                    </span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(laber );</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&#x27;&lt;br /&gt;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>throw</strong>：</p><ul><li><p><strong>ECMA-262 规范了 7 种错误类型，具体说明如下。其中 Error 是基类，其他 6 种错误类型是子类，都继承 Error 基类</strong>。</p><ul><li>Error：普通异常。主要用途是自定义错误对象。属性 name 可以读写异常类型，message 属性可以读写详细错误信息。</li><li>EvalError：不正确的使用 eval() 方法时抛出。</li><li>SyntaxError：出现语法错误时抛出。</li><li>RangeError：数字超出合法范围时抛出、</li><li>ReferenceError：读取不存在的变量时抛出。</li><li>TypeError：值得类型发生错误时抛出。</li><li>URIError：URI 编码和解码错误时抛出。</li></ul></li><li><p><strong>throw</strong>：能够主动抛出异常</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> 异常类();</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="5-异常"><a href="#5-异常" class="headerlink" title="5. 异常"></a>5. 异常</h3><ul><li><p><strong>try {} catch () {}</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">5</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;年龄太小啦&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>try {} catch () {} finally {}</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">var</span> age=<span class="number">5</span>;</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;<span class="comment">//e是异常的封装对象</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;出错：&quot;</span>+e.<span class="property">message</span>);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;总会执行的finally块&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="第三章-对象"><a href="#第三章-对象" class="headerlink" title="第三章 对象"></a>第三章 对象</h1><h2 id="4-1-对象概述"><a href="#4-1-对象概述" class="headerlink" title="4.1 对象概述"></a>4.1 对象概述</h2><ol><li><strong>对象介绍</strong><ul><li>JavaScript的数据类型中除了基本数据类型（number，boolean，string，undefined，null），其他都是属于引用数据类型（object）；基本数据类型特点：基本数据类型的值存在栈,值与值之间独立存在，修改一个值不会影响其他变量；引用数据类型：对象保存在堆内存中，每创建一个新的对象就会在堆内存开辟一个新的空间，变量保存的是内存地址；</li><li>对象的数据类型Object：是JavaScript中所有对象的基类</li><li>JavaScript对象也是一种符合数据类型：可以聚合很多值，通过名字可以访问这些值。JavaScript对象也可以看做属性的无序集合：每个属性都是一个键值对，属性名是字符串；JavaScript对象还可以从一个称为原型的对象继承属性：对象的方法通常是继承的属性；</li></ul></li><li><strong>对象的分类</strong><ul><li>内置对象：是EcmaScript内置的JavaScript对象</li><li>宿主对象：是由JavaScript代码运行环境提供的对象</li><li>自定义对象：通过自定义构造函数创建的对象</li></ul></li><li><strong>对象的相关概念</strong><ul><li>类型</li><li>实例</li><li>属性</li><li>方法</li><li>原型</li></ul></li></ol><h2 id="4-2-对象的基本操作"><a href="#4-2-对象的基本操作" class="headerlink" title="4.2 对象的基本操作"></a>4.2 对象的基本操作</h2><ol><li><p>创建对象</p><ul><li><p>方式一：使用Object的构造方法创建对象，通过对创建的对象的属性扩展完成对象的自定义</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure></li><li><p>方式二：使用对象字面量创建对象，<code>&#123;&#125;</code> - 一对花括号称为对象字面量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量创建空对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 使用对象字面量创建对象并设置属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;属性名:属性值&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式三：使用构造函数创建对象，通过构造函数创建的对象是同一类型的对象，在面向对象对象的概念中，创建同一种类型的对象的构造函数称为类，由类new出来的对象称为改类的实例对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol start="2"><li><p>对象属性：对象是属性名没有强制约束标识符规范，属性名如果是包含特殊字符需要使用方括号将属性名字符串包裹，并且读取该属性时候也需要使用方括号；对象的属性值可以是任意数据类；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 为特殊属性赋值</span></span><br><span class="line">obj[<span class="string">&quot;123&quot;</span>] = 属性值</span><br><span class="line"><span class="comment">// 获取对象中特殊属性的属性值</span></span><br><span class="line"><span class="keyword">var</span> value = obj[<span class="string">&quot;123&quot;</span>]</span><br></pre></td></tr></table></figure></li><li><p>对象属性的赋值和修改</p></li><li><p>删除对象属性：关键字delete</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj.<span class="property">name</span> = 属性值</span><br><span class="line"><span class="comment">// 删除对象中的属性</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">name</span></span><br></pre></td></tr></table></figure></li><li><p>判断属性是否存在：in运算符</p></li><li><p>遍历属性：for-in语句</p></li></ol><h2 id="4-2-this"><a href="#4-2-this" class="headerlink" title="4.2 this"></a>4.2 this</h2><ul><li>this指向的是一个对象：这个对象被称为函数执行的上下文对象，根据调用者的不同，this会指向当前调用对象的应用；</li></ul><h2 id="4-3-对象原型"><a href="#4-3-对象原型" class="headerlink" title="4.3 对象原型"></a>4.3 对象原型</h2><ol><li><p><strong>构造函数的执行流程</strong></p><ul><li>调用函数构造器在堆空间创建出一个对象</li><li>将新建的对象的引用赋值给this关键字</li><li>顺序执行函数体中的代码，初始化对象相关属性（每次构造函数都会在函数内部完成全部的构建）</li><li>将new出的对象作为返回值返回</li></ul></li><li><p><strong>原型的详解：prototype</strong></p><ul><li>每创建一个函数对象，解析器都会为这个函数添加一个prototype对象被称为原型对象</li><li>如果函数是普通函数，prototype也是函数本身；</li><li>如果使用函数构造器，创建的实例对象也有prototype属性并指向和构造器同一个prototype</li><li>给prototype对象扩展属性，则该类创建的实例对象都会包含这些属性</li><li>访问对象属性，如果实例对象没有则会在原型对象中查找，原型对象没有则会去父类的原型对象中查找，知道Object的对象中</li></ul></li><li><p><strong>属性判断（只判断当前对象不包括原型对象中的属性）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实例对象.<span class="title function_">hasOwnProperty</span>();</span><br></pre></td></tr></table></figure></li></ol><h1 id="第四章-函数"><a href="#第四章-函数" class="headerlink" title="第四章 函数"></a>第四章 函数</h1><h2 id="4-1-函数概念"><a href="#4-1-函数概念" class="headerlink" title="4.1 函数概念"></a>4.1 函数概念</h2><ul><li>函数是由事件驱动的或者当它被调用时执行的可重复使用的具有特定功能的代码块；JavaScript函数是属于Function类型的一种对象；</li><li>函数是分类：①普通函数②构造函数③匿名函数</li></ul><h2 id="4-2-函数定义"><a href="#4-2-函数定义" class="headerlink" title="4.2 函数定义"></a>4.2 函数定义</h2><ol><li><p><strong>普通函数</strong>：定义函数关键字<code>function</code></p><ul><li><p><strong>Function对象</strong>，函数体是一段字符串格式的JavaScript脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名 = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&quot;函数体&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>声明式函数</strong>：使用var关键字定义的函数，函是声明会提前，函数的定义根据函数为的位置顺序执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 函数名 = <span class="keyword">function</span>(<span class="params">[形参列表]</span>)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>函数表达式</strong>：函数的定义在索引的代码之前被创建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名([形参列表])&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>构造函数：使用new关键字调用的函数称为构造函数；构造函数是一种特殊的函数，约定构造函数的函数名使用首字母大写</p><ul><li><p>定义构造函数：构造函数和普通函数相同，如果不用new关键字，其本身就是一个函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 首字母大写()&#123;</span><br><span class="line"><span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造函数的使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 构造实例 = <span class="keyword">new</span> 构造函数名();</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名函数：没有名称的函数称为匿名函数，匿名函数没有名称所有无法手动调用，必须在编译器加载JavaScript脚本时候执行一次，加载完成便不会再执行</p><ul><li><p>匿名函数的定义：定义普通函数一样，匿名函数不给指定函数名称</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>由于匿名函数不符合JavaScript语法规范，JavaScript执行器会不识别这段代码，需要使用括号标注这段代码是一个整体</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>匿名函数只是声明如果不调用是不会执行的，所以匿名函数在声明后必须调用，否则这段代码会是无效代码，匿名函数的调用也称为自调用函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">[形参列表]</span>)&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;)([实参列表])</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="4-3-函数调用"><a href="#4-3-函数调用" class="headerlink" title="4.3 函数调用"></a>4.3 函数调用</h2><ul><li><p>函数调用：使用函数名并传递实际参数，参数要用圆括号之内，不能省略，如果省略则属于函数对象引用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名([实际参数]);</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-函数参数"><a href="#4-4-函数参数" class="headerlink" title="4.4 函数参数"></a>4.4 函数参数</h2><ol><li><p><strong>形式参数</strong>：是在定义函数时候设置的参数，形式参数作为函数体的一部分，但是参数值的实际值由函数调用的实际参数决定；</p></li><li><p><strong>实际参数</strong>：调用函数时候传递的参数称为实际参数，</p><ul><li>实际参数可以是任意数据类型；</li><li>实际参数根据参数位置对应着形式参数，多余的实际参数不会被处理，多余的形式参数值是undefined；</li><li>实际参数是基本数据类型：是将数据的值传递给形式参数；</li><li>实际参数是引用数据类型：是将数据的地址引用传递给实际参数；</li></ul></li></ol><h2 id="4-5-函数返回值"><a href="#4-5-函数返回值" class="headerlink" title="4.5 函数返回值"></a>4.5 函数返回值</h2><ul><li><strong>关键字return</strong>：return语句将终止当前函数并返回当前函数的值；return后面可以跟一个value，可以是javascript中的任何数据类型，数字，字符串，对象等，也可是再返回一个函数</li></ul><h2 id="4-6-全局作用域和局部作用域"><a href="#4-6-全局作用域和局部作用域" class="headerlink" title="4.6 全局作用域和局部作用域"></a>4.6 全局作用域和局部作用域</h2><ul><li><strong>全局作用域</strong>：定义在<code>&lt;script&gt;</code>标签内的变量并且在function的函数体以外的变量都属于全局作用域，全局作用域的变量属于window对象的属性</li><li><strong>局部作用域</strong>：定义在function的函数体内部的变量作用范围再函数内有效，属于局部作用域；</li></ul><h2 id="4-7-闭包"><a href="#4-7-闭包" class="headerlink" title="4.7 闭包"></a>4.7 闭包</h2><h1 id="第五章-内置对象"><a href="#第五章-内置对象" class="headerlink" title="第五章 内置对象"></a>第五章 内置对象</h1><h2 id="5-1-全局属性"><a href="#5-1-全局属性" class="headerlink" title="5.1 全局属性"></a>5.1 全局属性</h2><table><thead><tr><th>属性名称</th><th>属性说明</th></tr></thead><tbody><tr><td>Infinity</td><td></td></tr><tr><td>NaN</td><td></td></tr><tr><td>undefined</td><td></td></tr><tr><td>globalThis</td><td></td></tr></tbody></table><h2 id="5-2-全局函数"><a href="#5-2-全局函数" class="headerlink" title="5.2 全局函数"></a>5.2 全局函数</h2><table><thead><tr><th>函数名称</th><th>使用说明</th></tr></thead><tbody><tr><td>eval()</td><td></td></tr><tr><td>uneval()</td><td></td></tr><tr><td>isFinite()</td><td></td></tr><tr><td>isNaN()</td><td></td></tr><tr><td>decodeURI()</td><td></td></tr><tr><td>decodeURIComponent()</td><td></td></tr><tr><td>encodeURI()</td><td></td></tr><tr><td>encodeURIComponent()</td><td></td></tr></tbody></table><h2 id="5-3-数字对象"><a href="#5-3-数字对象" class="headerlink" title="5.3 数字对象"></a>5.3 数字对象</h2><table><thead><tr><th>数字对象</th><th>说明</th></tr></thead><tbody><tr><td>Number</td><td></td></tr><tr><td>BigInt</td><td></td></tr><tr><td>Math</td><td></td></tr></tbody></table><h2 id="5-4-日期对象"><a href="#5-4-日期对象" class="headerlink" title="5.4 日期对象"></a>5.4 日期对象</h2><ul><li>Date</li></ul><h2 id="5-5-字符串"><a href="#5-5-字符串" class="headerlink" title="5.5 字符串"></a>5.5 字符串</h2><table><thead><tr><th>字符串对象</th><th>说明</th></tr></thead><tbody><tr><td>String</td><td></td></tr><tr><td>RegExp</td><td></td></tr></tbody></table><h2 id="5-6-可索引的集合对象"><a href="#5-6-可索引的集合对象" class="headerlink" title="5.6 可索引的集合对象"></a>5.6 可索引的集合对象</h2><table><thead><tr><th>集合对象</th><th>说明</th></tr></thead><tbody><tr><td>Array</td><td></td></tr><tr><td>Int8Array</td><td></td></tr><tr><td>Uint8Array</td><td></td></tr><tr><td>Uint8ClampedArray</td><td></td></tr><tr><td>Int16Array</td><td></td></tr><tr><td>Uint16Array</td><td></td></tr><tr><td>Int32Array</td><td></td></tr><tr><td>Uint32Array</td><td></td></tr><tr><td>Float32Array</td><td></td></tr><tr><td>Float64Array</td><td></td></tr><tr><td>BigInt64Array</td><td></td></tr><tr><td>BigUint64Array</td><td></td></tr></tbody></table><h2 id="5-7-使用键的集合对象"><a href="#5-7-使用键的集合对象" class="headerlink" title="5.7 使用键的集合对象"></a>5.7 使用键的集合对象</h2><table><thead><tr><th>键集合对象</th><th>说明</th></tr></thead><tbody><tr><td>Map</td><td></td></tr><tr><td>Set</td><td></td></tr><tr><td>WeakMap</td><td></td></tr><tr><td>WeakSet</td><td></td></tr></tbody></table><h2 id="5-8-结构化对象"><a href="#5-8-结构化对象" class="headerlink" title="5.8 结构化对象"></a>5.8 结构化对象</h2><table><thead><tr><th>结构化对象</th><th>说明</th></tr></thead><tbody><tr><td>ArrayBuffer</td><td></td></tr><tr><td>SharedArrayBuffer</td><td></td></tr><tr><td>Atomics</td><td></td></tr><tr><td>DataView</td><td></td></tr><tr><td>JSON</td><td></td></tr></tbody></table><h2 id="5-9-控制抽象对象"><a href="#5-9-控制抽象对象" class="headerlink" title="5.9 控制抽象对象"></a>5.9 控制抽象对象</h2><table><thead><tr><th>控制对象</th><th>说明</th></tr></thead><tbody><tr><td>Promise</td><td></td></tr><tr><td>Generator</td><td></td></tr><tr><td>GeneratorFunction</td><td></td></tr><tr><td>AsyncFunction</td><td></td></tr></tbody></table><h2 id="5-10-反射"><a href="#5-10-反射" class="headerlink" title="5.10 反射"></a>5.10 反射</h2><table><thead><tr><th>反射</th><th>说明</th></tr></thead><tbody><tr><td>Reflect</td><td></td></tr><tr><td>Proxy</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-JavaScript概述&quot;&gt;&lt;a href=&quot;#第一章-JavaScript概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 JavaScript概述&quot;&gt;&lt;/a&gt;第一章 JavaScript概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-JavaS
      
    
    </summary>
    
    
      <category term="前端全栈" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="JS" scheme="http://yoursite.com/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>0601-CSS</title>
    <link href="http://yoursite.com/2006/01/01/0601-CSS/"/>
    <id>http://yoursite.com/2006/01/01/0601-CSS/</id>
    <published>2005-12-31T16:02:00.000Z</published>
    <updated>2022-04-11T14:56:31.705Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一部分-HTML"><a href="#第一部分-HTML" class="headerlink" title="第一部分 HTML"></a>第一部分 HTML</h1><h2 id="第一章-网站基础"><a href="#第一章-网站基础" class="headerlink" title="第一章 网站基础"></a>第一章 网站基础</h2><h3 id="1-1-服务器"><a href="#1-1-服务器" class="headerlink" title="1.1 服务器"></a>1.1 服务器</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>服务器可以泛指存储网络资源的电子计算机；</p><h3 id="1-2-浏览器"><a href="#1-2-浏览器" class="headerlink" title="1.2 浏览器"></a>1.2 浏览器</h3><ol><li>五大浏览器<ul><li>IE浏览器：微软公司旗下浏览器，IE诞生于1994年，当时微软为了对抗市场份额占据将近百分之九十的网景Netscape Navigator，于是在Windows中开发了自己的浏览器Internet Explorer，自此也引发了第一次浏览器大战。</li><li>Opera浏览器：挪威Opera Software ASA公司旗下的浏览器。1995年，opera公司发布第一版Opera浏览器，使用自己研发的Presto内核。当时opera公司的开发团队不断完善Presto内核，使Opera浏览器一度成为顶级浏览器。直到2016年奇虎360和昆仑万维收购了Oprea浏览器，从此也丢弃了强大的Presto内核，改用当时Google开源的webkit内核。后来Opera浏览器跟随Google将浏览器内核改为Blink内核。自此Presto内核也淡出了互联网市场。</li><li>Safari浏览器：第二次浏览器大战是从苹果公司发布Safari浏览器开始的。2003年，苹果公司在苹果手机上开发Safari浏览器；</li><li>Firefox浏览器：Mozilla公司旗下浏览器，也是刚才提到的网景公司后来的浏览器。网景被收购后，网景人员创办了Mozilla基金会，这是一个非盈利组织，他们在2004年推出自己的浏览器Firefox。Firefox采用Gecko作为内核。Gecko是一个开源的项目，代码完全公开，因此受到很多人的青睐。Firefox的问世加快了第二次浏览器大战的开始。第二次浏览器大战与第一次二元鼎力的局面不同，这一次的特点就是百家争鸣，也自此打破了IE浏览器从98年网景被收购后独步浏览器市场的局面。</li><li>Chrome浏览器：google旗下的浏览器。Chrome浏览器至发布以来一直讲究简洁、快速、安全，所以Chrome浏览器到现在一直受人追捧。最开始Chrome采用webkit作为浏览器内核，直到2013年，google宣布不再使用苹果的webkit内核，开始使用webkit的分支内核Blink。</li></ul></li><li>四大内核<ul><li>Trident（也称IE内核）</li><li>webkit：chrome 将 Webkit内核 深入人心，殊不知，Webkit 的鼻祖其实是 Safari。现在很多人错误地把 webkit 叫做 chrome内核</li><li>Blink：Blink 其实是 WebKit 的分支</li><li>Gecko：特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。</li></ul></li></ol><h3 id="1-3-网站与html"><a href="#1-3-网站与html" class="headerlink" title="1.3 网站与html"></a>1.3 网站与html</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>网站上由众多的网页构成的，每个网页都是html文件，浏览器将html文件中字符串渲染成为网站可见的文本、图片、链接、视频等等；</p><h3 id="1-4-url与http协议"><a href="#1-4-url与http协议" class="headerlink" title="1.4 url与http协议"></a>1.4 url与http协议</h3><ol><li><p>URL（Uniform Resource Locator）：统一资源定位器；在WWW上，每一信息资源都有统一的且在网上唯一的地址，该地址就叫URL；</p></li><li><p>url格式说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protocol :// hostname[:port] / path / [;parameters][?query]#fragment</span><br></pre></td></tr></table></figure><blockquote><ul><li><strong>protocol（协议）</strong>：指定使用的传输协议；</li><li><strong>hostname（主机名）</strong>：指存放资源的服务器的域名系统(DNS) 主机名或 IP 地址；</li><li><strong>port（端口号）</strong>：整数，可选，省略时使用方案的默认端口，各种传输协议都有默认的端口号；</li><li><strong>path（路径）</strong>：由零或多个“/”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址；</li><li><strong>parameters（参数）</strong>：这是用于指定特殊参数的可选项；</li><li><strong>query(查询)</strong>：可选，用于给动态网页（如使用CGI、ISAPI、PHP/JSP/ASP/ASP.NET等技术制作的网页）传递参数，可有多个参数，用“&amp;”符号隔开，每个参数的名和值用“=”符号隔开；</li><li><strong>fragment（信息片断）</strong>：字符串，用于指定网络资源中的片段。</li></ul></blockquote></li><li><p>http协议概述：HTTP是一个客户端终端（用户）和服务器端（网站）请求和应答的标准（TCP）。通过使用网页浏览器、网络爬虫或者其它的工具，客户端发起一个HTTP请求到服务器上指定端口（默认端口为80）。我们称这个客户端为用户代理程序（user agent）。应答的服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。在用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。</p></li></ol><h2 id="第二章-html发展史"><a href="#第二章-html发展史" class="headerlink" title="第二章 html发展史"></a>第二章 html发展史</h2><ol><li>HTML1.0：在1993年由互联网工程工作小组(IETF)工作草案发布(并非标准，众多不同版本HTML陆续在全球使用，但是始终未能形成一个广泛的有相同标准的版本。</li><li>HTML2.0：HTML2.0相比初版而言，标记得到了极大的丰富。</li><li>HTML3.2：HTML3.2是在1996年提出的规范，注重兼容性的提高，并对之前的版本进行了改进</li><li>HTML4.0：1997年12月推出的HTML4.0，将HTML推向了一个新高度。该版本倡导将文档结构和样式分离，并实现了表格更灵活的控制。</li><li>HTM.401：由1999年提出的4.01版本是在HTML4.0基础上的微小改进</li><li>20世纪90年代是HTML发展速度最快的时期，但是自1999年发布的HTML4.01后，业界普遍认为HTM已经步入瓶颈期，W3C组织开始对Web标准的焦点转向 XHTMI上。</li><li>XHTMI1.0：在2000年由W3C组织提出， XHTMI是一个过渡技术，结合了部分XML的强大功能及大多数HTML的简单特性。</li><li>XHTML1.1：XHTML1.1是模块化的 XHTMI，是货真价实的XML。</li><li>XHTML2.0：XHTML2.0是完全模块化可定制的XHTMI，随着HTML5的兴起，XHTML2.0工作小组被要求停止工作。</li><li>2004年，一些浏览器厂商联合成立了 WHATWG工作组，致力于Web表单和应用程序。此时的W3C组织专注于 XHTML2.0。在2006年，W3C组织组建了新的HTML工作组采纳了 WHATWG的意见，并于2008年发布了HTML5。</li><li>由于HTML5能解决实际的问题，所以在规范还未定稿的情况下，各大浏览器厂家已经开始对旗下产品进行升级以支持HTML5的新功能。因此，HTML5得益于浏览器的实验性反馈并且也得到持续的完善，并以这种方式迅速融入对Web平台的实质性改进中。2014年10月，W3C组织宣布历经8年努力，HTML5标准规范终于定稿。</li></ol><h2 id="第三章-html基础"><a href="#第三章-html基础" class="headerlink" title="第三章 html基础"></a>第三章 html基础</h2><h3 id="3-1-html基本结构"><a href="#3-1-html基本结构" class="headerlink" title="3.1 html基本结构"></a>3.1 html基本结构</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-html基础知识"><a href="#3-2-html基础知识" class="headerlink" title="3.2 html基础知识"></a>3.2 html基础知识</h3><ol><li>文档声明<code>&lt;!DOCTYPE html&gt;</code>：作用是高速浏览器当前html文本的版本，浏览器通过html版本把文本渲染为网页，html表示是HTML5版本，也称为文档类型声明；必须定义在html文档的第一行；</li><li>文档显示语言<code>&lt;html lang=&quot;en&quot;&gt;</code>：用于定义文档默认的显示语言：①en表示是英语②zh-CN表示是中文</li><li>文档字符集<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code>：用于定义文档字符集，浏览器渲染html文档时候根据字进行渲染文档中的文本；</li><li>标签分类</li></ol><h2 id="第四章-html标签"><a href="#第四章-html标签" class="headerlink" title="第四章 html标签"></a>第四章 html标签</h2><h3 id="4-1-元信息"><a href="#4-1-元信息" class="headerlink" title="4.1 元信息"></a>4.1 元信息</h3><table><thead><tr><th><strong>元信息</strong></th><th></th></tr></thead><tbody><tr><td><code>&lt;head&gt;</code></td><td>定义关于文档的信息</td></tr><tr><td><code>&lt;head&gt;</code></td><td>定义关于 HTML 文档的元信息。</td></tr><tr><td><span title="<base href='http://www.runoob.com/images/' target='_blank'>"><code>&lt;base&gt;</code></span></td><td>定义页面中所有链接的默认地址或默认目标。</td></tr></tbody></table><h3 id="4-2-程序脚本"><a href="#4-2-程序脚本" class="headerlink" title="4.2 程序脚本"></a>4.2 程序脚本</h3><table><thead><tr><th><strong>程序</strong></th><th></th></tr></thead><tbody><tr><td><code>&lt;script&gt;</code></td><td>定义客户端JS脚本。</td></tr><tr><td><code>&lt;style&gt;</code></td><td>定义CSS样式脚本</td></tr><tr><td><code>&lt;noscript&gt;</code></td><td>定义针对不支持客户端脚本的用户的替代内容。</td></tr><tr><td><code>&lt;embed&gt;</code></td><td>定义了一个容器，用来嵌入外部应用或者互动程序（插件）。</td></tr><tr><td><code>&lt;object&gt;</code></td><td>定义嵌入的对象。</td></tr><tr><td><code>&lt;param&gt;</code></td><td>定义对象的参数。</td></tr></tbody></table><h3 id="4-3-容器标签"><a href="#4-3-容器标签" class="headerlink" title="4.3 容器标签"></a>4.3 容器标签</h3><table><thead><tr><th><strong>样式/节</strong></th><th></th></tr></thead><tbody><tr><td><code>&lt;div&gt;</code></td><td>定义独占一行的盒子</td></tr><tr><td><code>&lt;span&gt;</code></td><td>定义文档中的节。</td></tr><tr><td><code>&lt;header&gt;</code></td><td>定义一个文档头部部分</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>定义一个文档底部</td></tr><tr><td><code>&lt;section&gt;</code></td><td>定义了文档的某个区域</td></tr><tr><td><code>&lt;article&gt;</code></td><td>定义一个文章内容</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>定义其所处内容之外的内容。</td></tr><tr><td><code>&lt;details&gt;</code></td><td>定义了用户可见的或者隐藏的需求的补充细节。</td></tr><tr><td><code>&lt;dialog&gt;</code></td><td>定义一个对话框或者窗口</td></tr><tr><td><code>&lt;summary&gt;</code></td><td>定义一个可见的标题。 当用户点击标题时会显示出详细信息。<img src="https://www.runoob.com/images/incompatible_ie.gif" alt="Internet Explorer"> <img src="https://www.runoob.com/images/incompatible_firefox.gif" alt="Firefox"> <img src="https://www.runoob.com/images/incompatible_opera.gif" alt="Opera"> <img src="https://www.runoob.com/images/compatible_chrome.gif" alt="Google Chrome"> <img src="https://www.runoob.com/images/compatible_safari.gif" alt="Safari"></td></tr></tbody></table><h3 id="4-4-表格标签"><a href="#4-4-表格标签" class="headerlink" title="4.4 表格标签"></a>4.4 表格标签</h3><h3 id="4-5-表单标签"><a href="#4-5-表单标签" class="headerlink" title="4.5 表单标签"></a>4.5 表单标签</h3><h3 id="4-6-多媒体标签"><a href="#4-6-多媒体标签" class="headerlink" title="4.6 多媒体标签"></a>4.6 多媒体标签</h3><h1 id="第二部分-CSS基础"><a href="#第二部分-CSS基础" class="headerlink" title="第二部分 CSS基础"></a>第二部分 CSS基础</h1><h2 id="第一章-CSS基础法语啊"><a href="#第一章-CSS基础法语啊" class="headerlink" title="第一章 CSS基础法语啊"></a>第一章 CSS基础法语啊</h2><h2 id="第二章-CSS模型"><a href="#第二章-CSS模型" class="headerlink" title="第二章 CSS模型"></a>第二章 CSS模型</h2><h1 id="第三部分-CSS选择器"><a href="#第三部分-CSS选择器" class="headerlink" title="第三部分 CSS选择器"></a>第三部分 CSS选择器</h1><h2 id="第一章-基本选择器"><a href="#第一章-基本选择器" class="headerlink" title="第一章 基本选择器"></a>第一章 基本选择器</h2><table><thead><tr><th>选择器</th><th>示例</th><th>描述</th></tr></thead><tbody><tr><td>通用选择器</td><td>*</td><td>匹配所有选择器</td></tr><tr><td>标签选择器</td><td>标签名称</td><td>根据HTML标签名称匹配元素</td></tr><tr><td>类选择器</td><td>.类名</td><td>匹配标签class属性值的所有元素， 一个元素可以定义多个类，用空格分隔</td></tr><tr><td>ID选择器</td><td>#id属性值</td><td>匹配标签id属性值的一个元素</td></tr></tbody></table><h2 id="第二章-结构选择器"><a href="#第二章-结构选择器" class="headerlink" title="第二章 结构选择器"></a>第二章 结构选择器</h2><h2 id="第三章-属性选择器"><a href="#第三章-属性选择器" class="headerlink" title="第三章 属性选择器"></a>第三章 属性选择器</h2><h2 id="第四章-伪类选择器"><a href="#第四章-伪类选择器" class="headerlink" title="第四章 伪类选择器"></a>第四章 伪类选择器</h2><h2 id="第五章-表达选择器"><a href="#第五章-表达选择器" class="headerlink" title="第五章 表达选择器"></a>第五章 表达选择器</h2><h1 id="第四部分-CSS属性"><a href="#第四部分-CSS属性" class="headerlink" title="第四部分 CSS属性"></a>第四部分 CSS属性</h1><h1 id="第五部分-CSS布局"><a href="#第五部分-CSS布局" class="headerlink" title="第五部分 CSS布局"></a>第五部分 CSS布局</h1><h2 id="第一章-流式布局"><a href="#第一章-流式布局" class="headerlink" title="第一章 流式布局"></a>第一章 流式布局</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><strong>标准流</strong>也称为普通流或文档流，就是指标签按照HTML标签默认方式进行排列；在标准流中的元素分为行内元素、块级元素、行内块元素；其在标准流中排列特点是：</p><ul><li>块级元素：在标准流中独占一行，按顺序从上到下进行排列；</li><li>行内块元素：在标准流中具有width和height属性，按顺序从左到右进行排列，超过父盒子宽度后自动换行；</li><li>行内元素：在标准流中按顺序从左到右进行排列，超过父盒子宽度后会自动换行；</li></ul><h2 id="第二章-浮动布局"><a href="#第二章-浮动布局" class="headerlink" title="第二章 浮动布局"></a>第二章 浮动布局</h2><h3 id="2-1-浮动概述"><a href="#2-1-浮动概述" class="headerlink" title="2.1 浮动概述"></a>2.1 浮动概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在标准流中如果要元素水平排列，虽然可以将元素转换为行内块元素，但是无法控制行内块元素之间的距离，并且水平布局的功能不足以满足网页水平布局的要求；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>浮动流：浮动是给盒子添加float属性，给盒子创建了一个浮动框，具有浮动框的元素会从原标准流的位置脱离出来，浮动框根据浮动属性的值，浮动框的左边缘或右边缘会贴靠到所包含的块边缘或另一个浮动框的左右边缘；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>浮动的注意点：①浮动和标准流的父元素搭配使用（先用标准流排列水平结构，再在水平布局的父元素中定义元素设置浮动属性）②一个元素浮动了理论上该元素的兄弟元素都需要浮动，因为浮动元素会影响后面的标准流；</p><h3 id="2-2-浮动特性"><a href="#2-2-浮动特性" class="headerlink" title="2.2 浮动特性"></a>2.2 浮动特性</h3><ol><li><strong>浮动元素会脱离标准流</strong><ul><li>元素浮动后会基于父元素的位置进行左右排版：父级的盒子如果装不下浮动的元素，后面浮动的元素会另起一行；</li><li>浮动流是一种“半脱离标准流”的排版方式，浮动后会移动到父元素中指定的位置；</li><li>元素浮动后，原来的位置会被释，浮动区域会覆盖掉标准元素，但是浮动的区域不会覆盖对应位置标准流元素中的文本内容</li><li>元素浮动不会超越父元素的padding区域和margin区域；</li></ul></li><li><strong>浮动元素会在一行内显示并且元素顶部对齐</strong><ul><li>相同方向的浮动元素：先浮动的元素会显示在前面，后浮动的元素会显示在后面；</li><li>不同方向的浮动元素：左浮动会找左浮动，右浮动会找右浮动；</li><li>浮动元素浮动后的位置：右浮动元素在浮动之前在标准流中的位置确定，只在原来所在行浮动；</li></ul></li><li><strong>浮动元素具有行内块的特性</strong><ul><li>浮动流是不区分行内元素、块级元素或行内块元素：浮动所有元素都可以设置宽和高；</li><li>浮动元素是不能撑起父元素的高度；</li><li>浮动元素是不可以设置<code>margin 0 auto</code>的；</li></ul></li><li><strong>浮动元素贴靠现象</strong><ul><li>当父元素的宽度足够放置浮动元素时，浮动元素会按顺序贴靠；</li><li>当父元素宽度不够时，浮动元素会找现在贴靠元素的上一个浮动元素，直到贴靠在父元素；</li></ul></li></ol><h3 id="2-3-消除浮动概述"><a href="#2-3-消除浮动概述" class="headerlink" title="2.3 消除浮动概述"></a>2.3 消除浮动概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在实际开发中，浮动元素的标准流的父盒子是不会设置高度的，父盒子的高度应该是被子盒子的内容撑开的，但是父盒子中的所有元素浮动后，浮动元素是撑不开父盒子的高度的，所以会导致父盒子的高度为0，下一个标准流元素会被浮动造的影响：浮动不占有原文档流中的位置，所以会对后面的元素排版产生影响，为了解决这些问题，所以要为该元素清除浮动后造成的影响：元素浮动后不会撑开父元素的高度，父元素的高度为0的问题；清除浮动后父盒子会根据子盒子自动检测高度，就不会影响下面的标准流了；清除浮动属性：clear=both，清除浮动的策略是闭合浮动</p><ol><li>额外标签法：也称隔墙法，是w3c推荐；在最后浮动元素的元素后新增一个空盒子（<strong>必须是块级元素，不能是行内元素</strong>），并且给盒子设置clear属性，缺点是添加无语义的标签，不优雅；</li><li>给父元素添加overflow属性：给父元素添加overflow属性，本义是处理溢出样式的；缺点是无法显示溢出的部分，</li><li>给父元素添加after伪元素：本质是也是隔墙法，只是墙是通过样式添加的；原理是after伪元素必须要用content属性，需要将content转为块级元素（display=block），转为块级元素后可以为元素设置clear属性，并且这个内容不再浏览器显示（visibility=hidden），缺点是IE不兼容，需要给添加额外样式（*zoom=1）</li><li>给父元素添加双伪元素：after是给父盒子后面添加一个虚拟的墙，再加个before属性给父盒子前面添加一个墙，表示浮动元素完全在父盒子中浮动了</li></ol><h3 id="2-4-清除浮动"><a href="#2-4-清除浮动" class="headerlink" title="2.4 清除浮动"></a>2.4 清除浮动</h3><ol><li><p><strong><del>清除浮动方式一</del></strong>：给父元素设置高度：企业开发中一般盒子的高度是由内容决定，所以不推荐使用盒子高度；</p></li><li><p><strong>清除浮动方式二</strong>：为浮动元素添加clear属性：添加了clear属性的元素margin属性会失效；解决浮动的本质是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素；</p></li><li><p><strong>清除浮动方式三</strong>：隔墙法清除浮动</p><ul><li><p>外墙法：在浮动的元素之间添加一个块级元素，并且为该元素设置属性<code>clear: both</code>属性，外墙法的第一个浮动元素不要使用<code>margin-buttom</code>属性，外墙法的第二个浮动元素不要使用<code>margin-top</code>属性，直接为外墙设置高度属性即可；</p></li><li><p>内墙法：在第一个浮动元素的所有子元素之后添加一个块级元素，并且为该元素设置属性<code>clear: both</code>属性，内墙法可以让浮动元素使用margin属性；</p></li><li><p>使用伪元素选择器为元素前后添加块级元素：<code>::before</code> 或<code>::after</code>伪元素的content属性，并且设置<code>height</code>属性设置为0，<code>visibility</code>属性设置为hidden，<code>clear</code>属性设置为both；</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear-fix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;不建议填空&quot;</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0px</span>;</span><br><span class="line">    visibality:hidden;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 伪元素有兼容问题:添加兼容处理方式 */</span></span><br><span class="line"><span class="selector-class">.clear-fix</span>&#123;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>双伪元素清除浮动：触发bfc，防止外边距合并</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear-fix</span><span class="selector-pseudo">:after</span>,<span class="selector-class">.clear-fix</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear-fix</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** 伪元素有兼容问题:添加兼容处理方式 */</span></span><br><span class="line"><span class="selector-class">.clear-fix</span>&#123;</span><br><span class="line">    *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>清除浮动方式四</strong>：使用<code>overflow: hidden</code>属性：在IE6中无效，需要添加兼容属性<code>*zoom:1</code>值；缺点子元素中过多的内容被隐藏；</p></li></ol><h2 id="第三章-定位布局"><a href="#第三章-定位布局" class="headerlink" title="第三章 定位布局"></a>第三章 定位布局</h2><h3 id="3-1-定位概述"><a href="#3-1-定位概述" class="headerlink" title="3.1 定位概述"></a>3.1 定位概述</h3><h2 id="第四章-栅格布局"><a href="#第四章-栅格布局" class="headerlink" title="第四章 栅格布局"></a>第四章 栅格布局</h2><h2 id="第五章-flex布局"><a href="#第五章-flex布局" class="headerlink" title="第五章 flex布局"></a>第五章 flex布局</h2><h3 id="5-1-Flex布局特点"><a href="#5-1-Flex布局特点" class="headerlink" title="5.1 Flex布局特点"></a>5.1 Flex布局特点</h3><ul><li><strong>传统布局特点</strong>：①兼容性好（PC和移动端都适应）、②布局繁琐（布局属性多且乱）、③局限性，在移动端效果不好</li><li><strong>Flex布局特点</strong>：①操作方便，布局极为简单、②是CSS新特性，对PC端浏览器支持较差</li></ul><h3 id="5-2-Flex布局原理"><a href="#5-2-Flex布局原理" class="headerlink" title="5.2 Flex布局原理"></a>5.2 Flex布局原理</h3><ol><li><p>Flex是Flexible Box的（弹性盒子）缩写，用来为盒装模型提供最大的灵活性，任何一个容器都可以指定为flex布局。</p></li><li><p>采用了flex的元素称为Flex Container，容器中所有的元素自动称为容器中的Flex Item；</p><ul><li>Flex Container（FLex容器）：默认有两条轴：默认主轴是水平方向向右，默认测轴是垂直方向向下</li><li>Flex Item（项）：元素的float、clear、vertical-align 的属性将会失效</li></ul></li><li><p><strong>布局原理</strong>：Flex布局就是通过flex container中属性的item的属性设置子元素在主轴方向和测轴方向的摆放方式；一句话总结就是：通过给父盒子添加flex属性，表示父盒子中所有子元素被flex布局方式排列；</p></li><li><p><strong>display：flex</strong>：①flex：父盒子是块级元素，使用flex属性值后父盒子仍然保留块级元素特点，独占一行②inline-flex：父盒子是块级元素，使用inline-flex属性值后父盒子会有行内块元素特点（如果设置父盒子的宽度和高度，flex容器的的宽度将有子元素宽度决定）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex | inline-flex;       //可以有两种取值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>例：<img src="https://s3.ax1x.com/2021/01/23/sTMZ60.png" alt="sTMZ60.png" border="0" /></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Container<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span> &#123;<span class="attribute">background</span>: red;<span class="attribute">display</span>: flex;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span> <span class="selector-tag">div</span> &#123; <span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: <span class="number">50px</span>;<span class="attribute">background</span>: green;&#125;</span></span><br><span class="line"><span class="language-css">        </span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box2</span> &#123;<span class="attribute">background</span>: red; <span class="attribute">display</span>: inline-flex;&#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box2</span> <span class="selector-tag">div</span> &#123;<span class="attribute">width</span>: <span class="number">100px</span>;<span class="attribute">height</span>: background: green;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="5-3-Flex-Container"><a href="#5-3-Flex-Container" class="headerlink" title="5.3 Flex Container"></a>5.3 Flex Container</h3><table><thead><tr><th>容器属性</th><th>属性值及说明</th></tr></thead><tbody><tr><td><strong>flex-direction</strong></td><td><strong><span title='作用：容器内的item从主轴的起点根据主轴的方向依次排列'>设置主轴的方向</span></strong><br />row：默认值，主轴为水平方向，从左向右<br />row-reverse：主轴为水平方向，从右向左<br />column：主轴为垂直方向，从上向下<br />column-reverse：主轴为垂直方向，从下向上</td></tr><tr><td><strong>justify-content</strong></td><td><strong>定义了容器内的item在主轴的对齐方式。</strong><br />flex-start：默认值，左对齐<br />flex-end：右对齐<br />center：居中<br />space-between：两端对齐，item之间的间隔相等，即剩余空间等分成间隙。<br />space-around：每个item两侧的间隔相等</td></tr><tr><td><strong>flex-wrap</strong></td><td><strong>设置容器内item是否可换行：如果支持换行，侧轴可以有多条</strong><br />nowrap：不换行，当主轴尺寸固定但当空间不足时，item尺寸会调整而并不会挤到下一行。<br/>wrap：item主轴总尺寸超出容器时换行，第一行在上方<br />wrap-reverse：item主轴总尺寸超出容器时换行，，第一行在下方</td></tr><tr><td><strong>align-items</strong></td><td><strong>定义了item在侧轴上的对齐方式</strong><br />默认值为 stretch 即如果item未设置高度或者设为 auto，将占满整个容器的高度。<br />flex-start：交叉轴的起点对齐<br />flex-end：交叉轴的终点对齐<br />center：交叉轴的中点对齐<br />baseline: item的第一行文字的基线对齐</td></tr><tr><td><strong>align-content</strong></td><td><strong>定义了多根轴线的对齐方式，如果item只有一根轴线，那么该属性将不起作用</strong><br />默认值为 stretch多条轴线平分容器的垂直方向上的空间。<br />flex-start：轴线全部在交叉轴上的起点对齐<br />flex-end：轴线全部在交叉轴上的终点对齐<br />center：轴线全部在交叉轴上的中间对齐<br />space-between：轴线两端对齐，之间的间隔相等，即剩余空间等分成间隙。<br />space-around：每个轴线两侧的间隔相等</td></tr><tr><td>flex-flow</td><td><strong>flex-direction 和 flex-wrap 的简写形式</strong></td></tr></tbody></table><h3 id="5-3-Flex-Item属性"><a href="#5-3-Flex-Item属性" class="headerlink" title="5.3 Flex Item属性"></a>5.3 Flex Item属性</h3><table><thead><tr><th>item属性</th><th>属性说明</th></tr></thead><tbody><tr><td><strong>flex</strong></td><td><strong>flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</strong><br />该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</td></tr><tr><td><strong>flex-grow</strong></td><td><strong>定义item的放大比例，默认为0</strong><br />如果所有的item 的flex-grow的值都是一样的话那就是以item 的width为最小值平均分配主轴上的宽度<br />如果item没有设置width则所有的item平分主轴上的剩余宽度<br />如果item的flex-grow的值不一样，那就是根据对应的比例来分配主轴上的剩余宽度</td></tr><tr><td><strong>flex-shrink</strong></td><td><strong>定义了item的缩小比例，默认为1，即如果空间不足，该item将缩小</strong><br />如果所有item的flex-shrink属性都为1，当空间不足时，都将等比例缩小<br />如果一个item的flex-shrink属性为0，其他item都为1，则空间不足时，前者不缩小。</td></tr><tr><td><strong>flex-basis</strong></td><td><strong>定义了在分配多余空间之前，item占据的主轴空间（main size）</strong><br />浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即item的本来大小。</td></tr><tr><td><strong>align-self</strong></td><td><strong>item设置自己在测轴的排列方式</strong><br /></td></tr><tr><td><strong>order</strong></td><td><strong>定义item在容器中的排列顺序</strong><br />数值越小，排列越靠前，默认值为 0</td></tr></tbody></table><h1 id="第六部分-CSS动画"><a href="#第六部分-CSS动画" class="headerlink" title="第六部分 CSS动画"></a>第六部分 CSS动画</h1><h1 id="第七部分-移动端开发"><a href="#第七部分-移动端开发" class="headerlink" title="第七部分 移动端开发"></a>第七部分 移动端开发</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一部分-HTML&quot;&gt;&lt;a href=&quot;#第一部分-HTML&quot; class=&quot;headerlink&quot; title=&quot;第一部分 HTML&quot;&gt;&lt;/a&gt;第一部分 HTML&lt;/h1&gt;&lt;h2 id=&quot;第一章-网站基础&quot;&gt;&lt;a href=&quot;#第一章-网站基础&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="前端全栈" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>0507-logback</title>
    <link href="http://yoursite.com/2005/07/01/0507-logback/"/>
    <id>http://yoursite.com/2005/07/01/0507-logback/</id>
    <published>2005-06-30T16:01:00.000Z</published>
    <updated>2022-04-09T00:10:10.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-日志框架介绍"><a href="#第一章-日志框架介绍" class="headerlink" title="第一章 日志框架介绍"></a>第一章 日志框架介绍</h1><h2 id="1-1-日志框架"><a href="#1-1-日志框架" class="headerlink" title="1.1 日志框架"></a>1.1 日志框架</h2><table><thead><tr><th>接口层</th><th>实现层</th></tr></thead><tbody><tr><td>jboss-logging</td><td>日志框架稍微高级,使用难度较高</td></tr><tr><td>JCL( jakarta commons logging )</td><td>Apache开发的Commons logging日志</td></tr><tr><td>SLF4j</td><td>① SLF4j日志接口层是log4j而开发 <br />② JUL是java为了和log4j挣市场开发的 <br />③ log4j 缺陷太多,升级版是logback <br />④ Log4j2 是Apache新开发的日志,功能先进但是没有广泛适配</td></tr></tbody></table><h1 id="第二章-Logback术语"><a href="#第二章-Logback术语" class="headerlink" title="第二章 Logback术语"></a>第二章 Logback术语</h1><h3 id="1-日志级别"><a href="#1-日志级别" class="headerlink" title="1. 日志级别"></a>1. 日志级别</h3><ul><li>日志级别定义在定义于ch.qos.logback.classic.Level类中：包括：TRACE、DEBUG、INFO、WARN 和 ERROR如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。</li></ul><h3 id="2-日志格式"><a href="#2-日志格式" class="headerlink" title="2. 日志格式"></a>2. 日志格式</h3><ul><li><p><strong>格式转换符</strong>：在日志配置中格式转换符需要添加前缀百分号%</p><table><thead><tr><th>日志格式转换符</th><th>说明</th></tr></thead><tbody><tr><td>d{pattern}<br />date{pattern}</td><td><strong>输出</strong>日志的打印日志，模式语法与<code>java.text.SimpleDateFormat</code> 兼容</td></tr><tr><td>p<br />le<br />level</td><td><strong>输出</strong>日志级别。</td></tr><tr><td>t<br />thread</td><td><strong>输出</strong>产生日志的线程名。</td></tr><tr><td>r<br />relative</td><td><strong>输出</strong>从程序启动到创建日志记录的时间，单位是<strong>毫秒</strong></td></tr><tr><td>c{length} <br />lo{length} <br />logger{length}</td><td><strong>输出</strong>日志的logger名，可有一个整形参数，功能是缩短<br />logger名 %logger    == mainPackage.sub.sample.Bar == mainPackage.sub.sample.Bar <br />%logger{0}== mainPackage.sub.sample.Bar == Bar <br />%logger{5}== mainPackage.sub.sample.Bar == m.s.s.Bar</td></tr><tr><td>cn<br />contextName</td><td><strong>输出</strong>上下文名称。</td></tr><tr><td>m<br />msg<br />message</td><td><strong>输出</strong>应用程序提供的信息。</td></tr><tr><td>n</td><td><strong>输出</strong>平台先关的分行符</td></tr></tbody></table></li><li><p><strong>格式修饰符</strong>：可选的格式修饰符位于“%”和转换符之间。</p><table><thead><tr><th>格式修饰符</th><th>说明</th></tr></thead><tbody><tr><td>减号“-”</td><td><strong>左对齐</strong></td></tr><tr><td>十进制数</td><td><strong>最小宽度修饰符<br /></strong>如果字符小于最小宽度，则左填充或右填充，默认是左填充（即右对齐）<br />如果字符大于最小宽度，字符永远不会被截断</td></tr><tr><td>点号”.”后面加十进制数</td><td><strong>最大宽度修饰符<br /></strong>如果字符大于最大宽度，则从前面截断<br />点符号“.”后面加减号“-”在加数字，表示从尾部截断。</td></tr></tbody></table></li></ul><h1 id="第三章-Logback配置详解"><a href="#第三章-Logback配置详解" class="headerlink" title="第三章 Logback配置详解"></a>第三章 Logback配置详解</h1><h2 id="3-1-configuration"><a href="#3-1-configuration" class="headerlink" title="3.1 configuration"></a>3.1 configuration</h2><ol><li><p>根节点<code>&lt;configuration&gt;</code>，包含下面三个属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>scan</td><td>默认值为true：修改文件后是否被扫描并重新加载</td></tr><tr><td>scanPeriod</td><td>设置监测配置文件是否有修改的时间间隔，默认单位是毫秒</td></tr><tr><td>debug</td><td>默认值为false：是否打印出logback内部日志信息</td></tr></tbody></table></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span> </span><br><span class="line">　　  <span class="comment">&lt;!--其他配置省略--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>　</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-2-contextName"><a href="#3-2-contextName" class="headerlink" title="3.2 contextName"></a>3.2 contextName</h2><ol><li><p>子节点<code>&lt;contextName&gt;</code>：用来设置上下文名称，每个logger都关联到logger上下文用于区分不同应用程序的记录。一旦设置，不能修改。</p></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>myAppName<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span>    </span><br></pre></td></tr></table></figure></li></ol><h2 id="3-3-property"><a href="#3-3-property" class="headerlink" title="3.3 property"></a>3.3 property</h2><ol><li><p>子节点<code>&lt;property&gt;</code> ：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>变量的名称<br/></td></tr><tr><td>value</td><td>变量定义的值</td></tr></tbody></table></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span> </span><br><span class="line">　　　<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;APP_Name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;myAppName&quot;</span> /&gt;</span> </span><br><span class="line">　　　<span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_Name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-4-timestamp"><a href="#3-4-timestamp" class="headerlink" title="3.4 timestamp"></a>3.4 timestamp</h2><ol><li><p>子节点<code>&lt;timestamp&gt;</code>：将解析配置文件的时间格式化为指定格式，解析完成之后这个时间值才会改变；他有两个属性key和datePattern</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>key</td><td>标识此<timestamp> 的名字，可用${}获取到该值</td></tr><tr><td>datePattern</td><td>解析配置文件时间的字符模式</td></tr></tbody></table></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">&quot;bySecond&quot;</span> <span class="attr">datePattern</span>=<span class="string">&quot;yyyyMMdd&#x27;T&#x27;HHmmss&quot;</span>/&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;bySecond&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 其他配置省略--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-5-appender"><a href="#3-5-appender" class="headerlink" title="3.5 appender"></a>3.5 appender</h2><h3 id="1-ConsoleAppender"><a href="#1-ConsoleAppender" class="headerlink" title="1. ConsoleAppender"></a>1. ConsoleAppender</h3><ul><li><p>把日志输出到控制台，有以下子节点</p><table><thead><tr><th>子节点</th><th>说明</th></tr></thead><tbody><tr><td>encoder &gt; pattern</td><td>对日志进行格式化</td></tr><tr><td>target</td><td>字符串System.out(默认)或者System.err</td></tr></tbody></table></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;记录器名称&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;日志记录级别&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;记录器名称&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-FileAppender"><a href="#2-FileAppender" class="headerlink" title="2. FileAppender"></a>2. FileAppender</h3><ul><li><p>把日志添加到文件</p><table><thead><tr><th>子节点</th><th>说明</th></tr></thead><tbody><tr><td>file</td><td>被写入的文件名，可以是相对目录，也可以是绝对目录</td></tr><tr><td>append</td><td>默认是true，追加到文件结尾；如果是false是指清空后新增</td></tr><tr><td>encoder &gt; pattern</td><td>对记录事件进行格式化</td></tr><tr><td>prudent</td><td>默认是 false，日志会被安全的写入文件；如果是 true则效率低</td></tr></tbody></table></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;记录器名称&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.FileAppender&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>testFile.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;记录器名称&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-RollingFileAppender"><a href="#3-RollingFileAppender" class="headerlink" title="3. RollingFileAppender"></a>3. RollingFileAppender</h3><ul><li><p><strong>滚动记录文件</strong>，先将日志记录到指定文件，当符合某个条件时（比如按时间滚动、按文件大小滚动），将日志记录到其他文件。有以下子节点：</p><table><thead><tr><th>子节点</th><th>说明</th></tr></thead><tbody><tr><td>file</td><td>被写入的文件名，可以是相对目录，也可以是绝对目录</td></tr><tr><td>append</td><td>默认是true，追加到文件结尾；如果是false是指清空后新增</td></tr><tr><td>rollingPolicy</td><td>当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名</td></tr></tbody></table></li><li><p><strong>rollingPolicy滚动策略说明</strong> </p><ol><li><p>TimeBasedRollingPolicy：根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：</p><table><thead><tr><th>子节点</th><th>说明</th></tr></thead><tbody><tr><td>fileNamePattern</td><td>滚动后归档的文件命名格式：%d的时间格式，默认格式是 yyyy-MM-dd</td></tr><tr><td>maxHistory</td><td>控制保留的归档文件的最大数量，超出数量就删除旧文件。</td></tr></tbody></table></li><li><p>SizeBasedTriggeringPolicy：查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。</p><table><thead><tr><th>子节点</th><th>说明</th></tr></thead><tbody><tr><td>maxFileSize</td><td>活动文件的大小，默认值是10MB。</td></tr></tbody></table></li><li><p>SizeAndTimeBasedRollingPolicy：根据日期和大小生成日志</p><table><thead><tr><th>子节点</th><th>说明</th></tr></thead><tbody><tr><td>fileNamePattern</td><td>必须包含“%i”，表示滚动后文件序号</td></tr><tr><td>maxFileSize</td><td>活动文件的大小，默认值是10MB。</td></tr><tr><td>maxHistory</td><td>最大保存时间</td></tr><tr><td>totalSizeCap</td><td>最大文件容量</td></tr><tr><td>cleanHistoryOnStart</td><td>清除历史记录</td></tr></tbody></table></li></ol></li><li><p>配置案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;LOG_FILE_PATH&#125;/$&#123;APP_NAME&#125;.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>5KB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>1<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>2GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">cleanHistoryOnStart</span>&gt;</span>true<span class="tag">&lt;/<span class="name">cleanHistoryOnStart</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%15thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span> </span><br></pre></td></tr></table></figure></li></ul><h2 id="3-6-appender-gt-filter"><a href="#3-6-appender-gt-filter" class="headerlink" title="3.6 appender &gt; filter"></a>3.6 appender &gt; filter</h2><h2 id="3-7-loger"><a href="#3-7-loger" class="headerlink" title="3.7 loger"></a>3.7 loger</h2><ol><li><p>用来设置某一个包或具体的某一个类的日志打印级别、以及指定<code>&lt;appender&gt;</code>。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>name</td><td>用来指定受此loger约束的某一个包或者具体的某一个类。</td></tr><tr><td>level</td><td>可选：用来设置打印级别，大小写无关</td></tr><tr><td>addtivity</td><td>可选：是否向上级loger传递打印信息。默认是true</td></tr><tr><td><strong>子标签</strong></td><td><strong>说明</strong></td></tr><tr><td><code>&lt;appender-ref&gt;</code></td><td>标识这个appender将会添加到这个loger。</td></tr></tbody></table></li><li><p>配置案例：根据日志记录器配一个自己的日志，比如可以单独定义个mybatis的日志记录器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.panda.module.mybatis.mapper&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;MYBATIS&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="3-8-root"><a href="#3-8-root" class="headerlink" title="3.8 root"></a>3.8 root</h2><ol><li><p>它也是<code>&lt;loger&gt;</code>元素，但是它是根loger,是所有<code>&lt;loger&gt;</code>的上级。只有一个level属性，因为name已经被命名为”root”,且已经是最上级了。</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>level</td><td>可选：默认是DEBUG，用来设置打印级别，大小写无关</td></tr><tr><td><strong>子标签</strong></td><td><strong>说明</strong></td></tr><tr><td><code>&lt;appender-ref&gt;</code></td><td>标识这个appender将会添加到这个loger。</td></tr></tbody></table></li><li><p>配置案例：比如在根logger中添加多个记录器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>       </span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;FILE&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="第四章-SpringBoot-Logback"><a href="#第四章-SpringBoot-Logback" class="headerlink" title="第四章 SpringBoot Logback"></a>第四章 SpringBoot Logback</h1><h2 id="4-1-属性配置"><a href="#4-1-属性配置" class="headerlink" title="4.1 属性配置"></a>4.1 属性配置</h2><ul><li><p>读取Spring属性：<code>&lt;springProperty&gt;</code>标签允许读取Spring中配置的属性，Environment 以便在Logback中使用；标签的工作方式与Logback的标准 <code>&lt;property&gt;</code>标签类似，但不是直接value 指定source属性（从Environment）指定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.application.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;springBoot&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>scope：如果需要将属性存储在local范围之外的其他位置，则可以使用该属性；</li><li>defaultValue：如果需要一个后备值，以防该属性未设置；</li></ul></li><li><pre><code class="xml"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">"context"</span> <span class="attr">name</span>=<span class="string">"EXCEPTION_LOCATION"</span> <span class="attr">source</span>=<span class="string">"exception-location"</span>/&gt;</span><span class="comment"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 4.2 读取配置文件</span><br><span class="line"></span><br><span class="line">&lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt;logback默认加载的日志文件名称是logback.xml，并且logback.xml加载早于application.properties，所以如果你在logback.xml使用了变量时，而恰好这个变量是写在application.properties时，那么就会获取不到；SpringBoot对Logback做了扩展，如果logback的配置文件改成logback-spring.xml则SpringBoot会首先会加载配置文件并处理配置文件，然后将处理好的配置文件交给Logback框架，使得logback-spring.xml具有是SpringBoot的Profile特性；</span><br><span class="line"></span><br><span class="line">### 4.3 Profile</span><br><span class="line"></span><br><span class="line">- springProfile的name属性指定SpringBoot项目运行的Profile环境，不同的环境可以指定不同的日志记录器；</span><br><span class="line"></span><br><span class="line">  ```xml</span><br><span class="line">  在logback-spring.xml中</span><br><span class="line">  &lt;springProfile name=&quot;dev&quot;&gt;</span><br><span class="line">      &lt;!-- 开发环境时激活 --&gt;</span><br><span class="line">  &lt;/springProfile&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;springProfile name=&quot;dev,test&quot;&gt;</span><br><span class="line">      &lt;!-- 开发，测试的时候激活--&gt;</span><br><span class="line">  &lt;/springProfile&gt;</span><br><span class="line">   </span><br><span class="line">  &lt;springProfile name=&quot;!prod&quot;&gt;</span><br><span class="line">      &lt;!-- 当 &quot;生产&quot; 环境时，该配置不激活--&gt;</span><br><span class="line">  &lt;/springProfile&gt;</span><br></pre></td></tr></table></figure></span></code></pre></li></ul><h1 id="第五章-Logback-MDC"><a href="#第五章-Logback-MDC" class="headerlink" title="第五章 Logback MDC"></a>第五章 Logback MDC</h1><h2 id="5-1-MDC概述"><a href="#5-1-MDC概述" class="headerlink" title="5.1 MDC概述"></a>5.1 MDC概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Logback是在logback-classic模块中实现了SLF4J的MDC功能。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>MDC中管理的数据（简称MDC数据）是以单个线程为单位进行访问的，即对MDC数据的操作（如put, get）只对当前线程有效，所以也永远是线程安全的。在服务端，为每个请求分配一个线程进行处理，所以每个服务端线程处理的请求，都具有唯一的MDC上下文数据。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>子线程不会自动继承父线程的MDC数据。所以在创建子线程时，可以先调用MDC的getCopyOfContextMap()方法以返回一个Map&lt;String, String&gt;对象，从而获取父线程的MDC数据，然后再在子线程的开始处，最先调用MDC的setContextMap()方法为子线程设置父线程的MDC数据。从而能够在子线程中访问父线程的MDC数据。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在使用java.util.concurrent.Executors管理线程时，使用同样的方法让子线程继承主线程的MDC数据。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>但是，在Web应用中，一个请求可能在不同的阶段被多个线程处理。这时，只是在服务端的处理线程中设置MDC数据，并不能保证请求的某些信息（如用户的认证信息等）总是能够被处理线程访问到。为了在处理一个请求时能够保证某些信息总是可访问，建议使用Servlet Filter，在请求到来时就将信息装入到MDC中，在完成所有的后续处理后，再次通过过滤器时将MDC数据移除。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, </span></span><br><span class="line"><span class="params">                         ServletResponse response,</span></span><br><span class="line"><span class="params">                         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">            MDC.put(KEY, VALUE);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (MDC.contains(KEY)) &#123;</span><br><span class="line">                    MDC.remove(KEY);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-2-MDCInsertingServletFilter"><a href="#5-2-MDCInsertingServletFilter" class="headerlink" title="5.2 MDCInsertingServletFilter"></a>5.2 MDCInsertingServletFilter</h2><ul><li><p>Logback自带的ch.qos.logback.classic.helpers.MDCInsertingServletFilter能够将HTTP请求的hostname, request URI, user-agent等信息装入MDC，只需要将MDCInsertingServletFilter添加到WEB容器，后续处理过程就可以直接访问如下请求参数的值：</p><ul><li>req.remoteHost</li><li>req.xForwardedFor</li><li>req.method</li><li>req.requestURI</li><li>req.requestURL</li><li>req.queryString</li><li>req.userAgent</li></ul></li><li><p>pattern案例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志依赖的渲染类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wex&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;wEx&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;$&#123;CONSOLE_LOG_PATTERN:-%clr(%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;)&#123;faint&#125; %clr($&#123;LOG_LEVEL_PATTERN:-%5p&#125;) %clr($&#123;PID:- &#125;)&#123;magenta&#125; %clr(--)&#123;faint&#125; %clr([%15.15t])&#123;faint&#125; %clr(%-40.40logger&#123;39&#125;)&#123;cyan&#125; %clr(:)&#123;faint&#125; %m%n$&#123;LOG_EXCEPTION_CONVERSION_WORD:-%wEx&#125;&#125;&quot;</span>/&gt;</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">name</span>=<span class="string">&quot;MDC_LOG_PATTERN&quot;</span> </span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;IP:%X&#123;req.remoteHost&#125; -url:%X&#123;req.requestURI&#125; -Method:%X&#123;req.method&#125; - QueryString:%X&#123;req.queryString&#125; - device:%X&#123;req.userAgent&#125;  -ips:%X&#123;req.xForwardedFor&#125;  - %m%n &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;MDC_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="5-3-自定义MDC-Filter实现日志链路"><a href="#5-3-自定义MDC-Filter实现日志链路" class="headerlink" title="5.3 自定义MDC Filter实现日志链路"></a>5.3 自定义MDC Filter实现日志链路</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-日志框架介绍&quot;&gt;&lt;a href=&quot;#第一章-日志框架介绍&quot; class=&quot;headerlink&quot; title=&quot;第一章 日志框架介绍&quot;&gt;&lt;/a&gt;第一章 日志框架介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-日志框架&quot;&gt;&lt;a href=&quot;#1-1-日志框架&quot; cla
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java工具" scheme="http://yoursite.com/tags/Java%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>0506-Gateway</title>
    <link href="http://yoursite.com/2005/06/01/0506-Gateway/"/>
    <id>http://yoursite.com/2005/06/01/0506-Gateway/</id>
    <published>2005-05-31T16:11:00.000Z</published>
    <updated>2022-04-09T00:10:10.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-SpringCloudGateway概述"><a href="#第一章-SpringCloudGateway概述" class="headerlink" title="第一章 SpringCloudGateway概述"></a>第一章 SpringCloudGateway概述</h1><h2 id="1-1-Gateway介绍"><a href="#1-1-Gateway介绍" class="headerlink" title="1.1 Gateway介绍"></a>1.1 Gateway介绍</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，该项目是基于 Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>SpringCloud Gateway 作为 Spring Cloud 生态系统中的网关，目标是替代 Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 2.0之前的非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Spring Cloud Gateway 的目标，不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控/指标，和限流。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Spring Cloud Gateway 底层使用了高性能的通信框架Netty。</p><h2 id="1-2-Gateway特征"><a href="#1-2-Gateway特征" class="headerlink" title="1.2 Gateway特征"></a>1.2 Gateway特征</h2><ol><li>基于 Spring Framework 5，Project Reactor 和 Spring Boot 2.0</li><li>集成 Hystrix 断路器</li><li>集成 Spring Cloud DiscoveryClient</li><li>Predicates 和 Filters 作用于特定路由，易于编写的 Predicates 和 Filters</li><li>具备一些网关的高级功能：动态路由、限流、路径重写</li></ol><h2 id="1-3-Gateway相关术语解释"><a href="#1-3-Gateway相关术语解释" class="headerlink" title="1.3 Gateway相关术语解释"></a>1.3 Gateway相关术语解释</h2><ol><li><strong>Filter（过滤器）</strong>：和Zuul的过滤器在概念上类似，可以使用它拦截和修改请求，并且对上游的响应，进行二次处理。过滤器为org.springframework.cloud.gateway.filter.GatewayFilter类的实例。</li><li><strong>Route（路由）</strong>：网关配置的基本组成模块，和Zuul的路由配置模块类似。一个<strong>Route模块</strong>由一个 ID，一个目标 URI，一组断言和一组过滤器定义。如果断言为真，则路由匹配，目标URI会被访问。</li><li><strong>Predicate（断言）：</strong>这是一个 Java 8 的 Predicate，可以使用它来匹配来自 HTTP 请求的任何内容，例如 headers 或参数。断言的输入类型是一个 ServerWebExchange。</li></ol><h1 id="第二章-SpringCloudGateway架构"><a href="#第二章-SpringCloudGateway架构" class="headerlink" title="第二章 SpringCloudGateway架构"></a>第二章 SpringCloudGateway架构</h1><h2 id="2-1-SpringCloud-Zuul的IO模型"><a href="#2-1-SpringCloud-Zuul的IO模型" class="headerlink" title="2.1 SpringCloud Zuul的IO模型"></a>2.1 SpringCloud Zuul的IO模型</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Servlet IO处理模型；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>servlet由servlet container进行生命周期管理：container启动时构造servlet对象并调用servlet init()进行初始化；container关闭时调用servlet destory()销毁servlet；container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service()。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>弊端：servlet是一个简单的网络IO模型，当请求进入servlet container时，servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的，但是一旦并发上升，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单的业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>所以Springcloud Zuul 是基于servlet之上的一个阻塞式处理模型，即spring实现了处理所有request请求的一个servlet（DispatcherServlet），并由该servlet阻塞式处理处理。所以Springcloud Zuul无法摆脱servlet模型的弊端。虽然Zuul 2.0开始，使用了Netty，并且已经有了大规模Zuul 2.0集群部署的成熟案例，但是，Springcloud官方已经没有集成改版本的计划了。</p><h2 id="2-2-Webflux-服务器"><a href="#2-2-Webflux-服务器" class="headerlink" title="2.2 Webflux 服务器"></a>2.2 Webflux 服务器</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Spring在2017年下半年迎来了Webflux，Webflux的出现填补了Spring在响应式编程上的空白，Webflux的响应式编程不仅仅是编程风格的改变，而且对于一系列的著名框架，都提供了响应式访问的开发包，比如Netty、Redis等等。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Webflux模式替换了旧的Servlet线程模型。用少量的线程处理request和response io操作，这些线程称为Loop线程，而业务交给响应式编程框架处理，响应式编程是非常灵活的，用户可以将业务中阻塞的操作提交到响应式框架的work线程中执行，而不阻塞的操作依然可以在Loop线程中进行处理，大大提高了Loop线程的利用率。Webflux虽然可以兼容多个底层的通信框架，但是一般情况下，底层使用的还是Netty；</p><h2 id="2-3-Spring-Cloud-Gateway的处理流程"><a href="#2-3-Spring-Cloud-Gateway的处理流程" class="headerlink" title="2.3 Spring Cloud Gateway的处理流程"></a>2.3 Spring Cloud Gateway的处理流程</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>客户端向 Spring Cloud Gateway 发出请求。然后在 Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到 Gateway Web Handler。Handler 再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前（“pre”）或之后（“post”）执行业务逻辑。</p><img src="https://z3.ax1x.com/2021/05/30/2V8bX4.jpg" alt="2V8bX4.jpg" border="0" /><h2 id="2-4-SpringCloudGateway配置方式"><a href="#2-4-SpringCloudGateway配置方式" class="headerlink" title="2.4 SpringCloudGateway配置方式"></a>2.4 SpringCloudGateway配置方式</h2><ol><li><p>基于配置文件网关路由</p><ul><li><p>配置相关属性是数据结构如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;spring.cloud.routes&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;自定义的路由 ID，保持唯一&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span><span class="string">&quot;目标服务地址&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;predicates&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;路由条件，Predicate 接受输入参数，返回一个布尔值结果&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件基本案例（yaml个数）：如下配置说明意思是：配置了一个 id 为 url-proxy-1的URI代理规则，路由的规则为：</p><p>当访问地址<code>http://localhost:8080/csdn/1.jsp</code>时，会路由到上游地址<code>https://blog.csdn.net/1.jsp</code>。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="string">-id:</span> <span class="string">url-proxy-1</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">https://blog.csdn.net</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="string">-Path=/csdn</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>基于代码的网关路由</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouteConfigure</span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RouteLocator <span class="title function_">customRouteLocator</span><span class="params">(RouteLocatorBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.routes()</span><br><span class="line">                .route(<span class="string">&quot;path_route&quot;</span>, r -&gt; r.path(<span class="string">&quot;/csdn&quot;</span>)</span><br><span class="line">                        .uri(<span class="string">&quot;https://blog.csdn.net&quot;</span>))</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第三章-SpringCloudGateway路由配置"><a href="#第三章-SpringCloudGateway路由配置" class="headerlink" title="第三章 SpringCloudGateway路由配置"></a>第三章 SpringCloudGateway路由配置</h1><img src="https://z3.ax1x.com/2021/05/30/2VJBz8.png" alt="2VJBz8.png" border="0" /><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Predicate 来源于 Java 8，是 Java 8 中引入的一个函数，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。可以用于接口请求参数校验、判断新老数据是否有变化需要进行更新操作。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在 Spring Cloud Gateway 中 Spring 利用 Predicate 的特性实现了各种路由匹配规则，有通过 Header、请求参数等不同的条件来进行作为条件匹配到对应的路由。上图总结了 Spring Cloud 内置的几种 Predicate 的实现。</p><table><thead><tr><th align="left">规则</th><th align="left">实例</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Path</td><td align="left">- Path=/gate/<strong>,/rule/</strong></td><td align="left">## 当请求的路径为gate、rule开头的时，转发到<a href="http://localhost:9023服务器上">http://localhost:9023服务器上</a></td></tr><tr><td align="left">Before</td><td align="left">- Before=2017-01-20T17:42:47.789-07:00[America/Denver]</td><td align="left">在某个时间之前的请求才会被转发到 <a href="http://localhost:9023服务器上">http://localhost:9023服务器上</a></td></tr><tr><td align="left">After</td><td align="left">- After=2017-01-20T17:42:47.789-07:00[America/Denver]</td><td align="left">在某个时间之后的请求才会被转发</td></tr><tr><td align="left">Between</td><td align="left">- Between=2017-01-20T17:42:47.789-07:00[America/Denver],2017-01-21T17:42:47.789-07:00[America/Denver]</td><td align="left">在某个时间段之间的才会被转发</td></tr><tr><td align="left">Cookie</td><td align="left">- Cookie=chocolate, ch.p</td><td align="left">名为chocolate的表单或者满足正则ch.p的表单才会被匹配到进行请求转发</td></tr><tr><td align="left">Header</td><td align="left">- Header=X-Request-Id, \d+</td><td align="left">携带参数X-Request-Id或者满足\d+的请求头才会匹配</td></tr><tr><td align="left">Host</td><td align="left">- Host=<a href="http://www.hd123.com">www.hd123.com</a></td><td align="left">当主机名为<a href="http://www.hd123.com的时候直接转发到http://localhost:9023服务器上">www.hd123.com的时候直接转发到http://localhost:9023服务器上</a></td></tr><tr><td align="left">Method</td><td align="left">- Method=GET</td><td align="left">只有GET方法才会匹配转发请求，还可以限定POST、PUT等请求方式</td></tr></tbody></table><h2 id="3-1-通过请求参数匹配"><a href="#3-1-通过请求参数匹配" class="headerlink" title="3.1  通过请求参数匹配"></a>3.1  通过请求参数匹配</h2><p><a href="https://www.cnblogs.com/crazymakercircle/p/11704077.html">https://www.cnblogs.com/crazymakercircle/p/11704077.html</a></p><h2 id="3-2-通过-Header-属性匹配"><a href="#3-2-通过-Header-属性匹配" class="headerlink" title="3.2 通过 Header 属性匹配"></a>3.2 通过 Header 属性匹配</h2><h2 id="3-3-通过-Cookie-匹配"><a href="#3-3-通过-Cookie-匹配" class="headerlink" title="3.3 通过 Cookie 匹配"></a>3.3 通过 Cookie 匹配</h2><h2 id="3-4-通过-Host-匹配"><a href="#3-4-通过-Host-匹配" class="headerlink" title="3.4 通过 Host 匹配"></a>3.4 通过 Host 匹配</h2><h2 id="3-5-通过请求方式匹配"><a href="#3-5-通过请求方式匹配" class="headerlink" title="3.5 通过请求方式匹配"></a>3.5 通过请求方式匹配</h2><h2 id="3-6-通过请求路径匹配"><a href="#3-6-通过请求路径匹配" class="headerlink" title="3.6 通过请求路径匹配"></a>3.6 通过请求路径匹配</h2><h2 id="3-7-通过请求-ip-地址进行匹配"><a href="#3-7-通过请求-ip-地址进行匹配" class="headerlink" title="3.7 通过请求 ip 地址进行匹配"></a>3.7 通过请求 ip 地址进行匹配</h2><h2 id="3-8-组合使用"><a href="#3-8-组合使用" class="headerlink" title="3.8 组合使用"></a>3.8 组合使用</h2><h1 id="第四章-过滤器"><a href="#第四章-过滤器" class="headerlink" title="第四章 过滤器"></a>第四章 过滤器</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-SpringCloudGateway概述&quot;&gt;&lt;a href=&quot;#第一章-SpringCloudGateway概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 SpringCloudGateway概述&quot;&gt;&lt;/a&gt;第一章 SpringClou
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java框架" scheme="http://yoursite.com/tags/Java%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>0505-SpringBoot</title>
    <link href="http://yoursite.com/2005/05/01/0505-SpringBoot/"/>
    <id>http://yoursite.com/2005/05/01/0505-SpringBoot/</id>
    <published>2005-04-30T16:10:00.000Z</published>
    <updated>2022-04-09T00:10:10.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第二章-日志"><a href="#第二章-日志" class="headerlink" title="第二章 日志"></a>第二章 日志</h1><h2 id="2-1-日志框架发展历史"><a href="#2-1-日志框架发展历史" class="headerlink" title="2.1 日志框架发展历史"></a>2.1 日志框架发展历史</h2><ol><li><p>常见的日志框架：JUL（java.util.logging）、JCL（Apache Commons Logging）、Log4j、Log4j2、Logback、SLF4j、joss-logging等。SpringBoot在框架内部使用JCL，Spirng-boot-starter-loggin采用了slf4j+logback的形式</p><table><thead><tr><th>日志门面</th><th>日志实现</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）<br />SLF4j<br />jboss-logging</td><td>JUL<br />Log4j<br />Log4j2<br />Logback</td></tr></tbody></table><blockquote><ul><li>选择一个日志门面，然后选择一个日志实现<ul><li>jboss-logging：使用难度高</li><li>JCL：维护周期长</li><li>JUL：是Java提供的，和Log4j的竞品</li><li>Log4j2：借了Log4j之名，由Apache开发，功能强大，但是适配性差；</li></ul></li><li>选择SLF4作为日志门面：Log4j和Logback是同一个人开发的，先开发完成Log4j，后来因为升级所以开发出了SLF4j这个日志门面，并且重新开发出Logback，作为Log4j的升级版。</li></ul></blockquote></li></ol><h2 id="2-2-使用SLF4j"><a href="#2-2-使用SLF4j" class="headerlink" title="2.2 使用SLF4j"></a>2.2 使用SLF4j</h2><ol><li><p>使用日志的方式：</p><ul><li><p>引入日志门面和日志实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  ```</span><br><span class="line"></span><br><span class="line">- 调用日志门面的API</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  import org.slf4j.Logger;</span><br><span class="line">  import org.slf4j.LoggerFactory;</span><br><span class="line">  </span><br><span class="line">  public class HelloWorld &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">      Logger logger = LoggerFactory.getLogger(HelloWorld.class);</span><br><span class="line">      logger.info(&quot;Hello World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Slg4j：日志的配置文件还是需要使用日志框架实现的配置文件</p><p><a href="https://imgtu.com/i/oX5TG6"><img src="https://s4.ax1x.com/2021/12/13/oX5TG6.png" alt="oX5TG6.png"></a></p><ul><li>应用中只添加了slf4j-api，但是没有实现，所以日志没有输出</li><li>正确用法应该是引入slf4j-api，然后在加入logback的依赖：logback-classic和logback-core</li><li>如果想要切换使用log4j，需要添加一个适配包：slf4j-log212，如果要使用JUL，则需要添加slf4j-jdk14适配包</li></ul></li><li><p>框架整合日志问题</p><p><a href="https://imgtu.com/i/oX7WSx"><img src="https://s4.ax1x.com/2021/12/13/oX7WSx.png" alt="oX7WSx.png"></a></p><ul><li>不用的框架使用被动依赖的不用的日志框架，所以框架需要统一使用日志框架</li><li>首先应用程序引入SLF4j门面和Logback日志门面，同时添加上其他框架包的适配包<ul><li>Commons loggin API-&gt; jcl-over-sl4j</li><li>log4j -&gt; log4j-over-slf4j</li><li>java util loggin -&gt; jul-to-slf4j</li></ul></li><li>最后排除掉其他框架的日志实现框架</li></ul></li></ol><h2 id="2-3-SpringBoot中日志框架"><a href="#2-3-SpringBoot中日志框架" class="headerlink" title="2.3 SpringBoot中日志框架"></a>2.3 SpringBoot中日志框架</h2><ol><li><p>SpringBoot依赖spring-boot-starter</p></li><li><p>spring-boot-starter依赖了spring-boot-starter-loggin</p></li><li><p>spring-boot-starter-loggin包含了</p><ul><li>logback-classic依赖logback-core -&gt; 实现了slf4j</li><li>jul-to-slf4j -&gt; 适配了slf4j</li><li>log4j-over-slf4j -&gt; 适配了slf4j</li><li>jck-over-slf4j -&gt; 适配了slf4j</li></ul></li><li><p>SpringBoot日志的默认配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li><li><p>logback配置文件</p></li></ol><h2 id="2-4-切换日志框架"><a href="#2-4-切换日志框架" class="headerlink" title="2.4 切换日志框架"></a>2.4 切换日志框架</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第二章-日志&quot;&gt;&lt;a href=&quot;#第二章-日志&quot; class=&quot;headerlink&quot; title=&quot;第二章 日志&quot;&gt;&lt;/a&gt;第二章 日志&lt;/h1&gt;&lt;h2 id=&quot;2-1-日志框架发展历史&quot;&gt;&lt;a href=&quot;#2-1-日志框架发展历史&quot; class=&quot;head
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>0505-Security</title>
    <link href="http://yoursite.com/2005/05/01/0505-Security/"/>
    <id>http://yoursite.com/2005/05/01/0505-Security/</id>
    <published>2005-04-30T16:09:00.000Z</published>
    <updated>2022-04-09T00:10:10.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-SpringSecurity"><a href="#第一章-SpringSecurity" class="headerlink" title="第一章 SpringSecurity"></a>第一章 SpringSecurity</h1><h2 id="1-1-SpringSecurity简介"><a href="#1-1-SpringSecurity简介" class="headerlink" title="1.1 SpringSecurity简介"></a>1.1 SpringSecurity简介</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>应用程序的安全性体现在两个方面：认证与授权；认证是指某个主体在当前系统中是否合法、可用，这个主体可以是登陆用户，也可以是接入的设备或其他应用系统；授权是指认证通过的主体是否允许执行某项操作的过程；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Spring Security是Spring采用AOP思想，基于Servlet过滤器实现的安全框架；提供的完善的认证机制和方法级别的权限控制；无需修改Security内部功能，通过自定义的扩展方式实现认证和授权；</p><h2 id="1-2-SpringSecurity环境搭建"><a href="#1-2-SpringSecurity环境搭建" class="headerlink" title="1.2 SpringSecurity环境搭建"></a>1.2 SpringSecurity环境搭建</h2><ol><li><p>SpringSecurity学前知识</p><ul><li>Maven：搭建多模块项目、搭建SpringBoot和SpringCloud父工程</li><li>Spring：Spring的核心IOC和AOP</li><li>SpringBoot：Security的使用环境SpringBoot</li><li>Filter：过滤器的使用与原理</li><li>微服务相关概念：分布式认证原理，单点登录原理</li></ul></li><li><p>SpringBoot项目搭建</p><ul><li><p>单体应用：将SpringBoot依赖作为<code>&lt;parent&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用SpringBoot依赖作为&lt;parent&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在当前pom中引入需要的Security依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>多模块应用：首先定义父pom进行依赖管理，然后单模块将父pom作为<code>&lt;parent&gt;</code>，引入父pom中管理的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在父pom中的&lt;dependencyManagement&gt;管理依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 从官网查询版本依赖约束 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.SR8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在子模块中引入&lt;parent&gt;并引入需要的Security依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>启动项目，验证Security是否生效：访问<code>http://localhost:8080/</code>会自动重定向到<code>http://localhost:8080/login</code>链接打开Security的默认登陆页；登陆名称默认：user，登陆密码：控制台打印出的随机密码；</p></li></ol><h2 id="1-3-SpringSecurity认证"><a href="#1-3-SpringSecurity认证" class="headerlink" title="1.3 SpringSecurity认证"></a>1.3 SpringSecurity认证</h2><h3 id="1-SpringSecurity内置过滤器"><a href="#1-SpringSecurity内置过滤器" class="headerlink" title="1. SpringSecurity内置过滤器"></a>1. SpringSecurity内置过滤器</h3><img src="https://s1.ax1x.com/2020/07/03/NOE0eK.png"/><table><thead><tr><th>过滤器类</th><th>作用</th></tr></thead><tbody><tr><td>SecurityContextPersistenceFilter</td><td>1、请求开始时从对应的SecurityContextRepository获取securityContext存入SecurityContextHolder中 2、请求结束时清除SecurityContextHolder中的securityContext，将本次请求执行后新的SecurityContext存入到对应的SecurityContextRepository中 3、默认情况下SecurityContextHolder会把SecurityContext存储到ThreadLocal中，而这个thread刚好是存在于servlet容器的线程池中的，如果不清除，当后续请求又从线程池中分到这个线程时，程序就会拿到错误的认证信息。</td></tr><tr><td>WebAsyncManagerIntegrationFilter</td><td>1、Spring Security的SecurityContextHolder是通过ThreadLocal实现的。 2、WebAsyncManagerIntegrationFilter可以使WebAsyncTask能够在异步线程中从SecurityContextHolder中获取上下文信息</td></tr><tr><td>HeaderWriterFilter</td><td>是在请求前后写入一些往前请求头或者响应头写入一些信息</td></tr><tr><td>CsrfFilter</td><td>SpringSecurity会对所有post请求验证是否包含系统生成的csrf的token信息，如果不包含，则报错。起到防止csrf攻击的效果。</td></tr><tr><td>LogoutFilter</td><td>匹配URL为/logout的请求，实现用户退出,清除认证信息。</td></tr><tr><td>UsernamePasswordAuthenticationFilter</td><td>默认匹配URL为/login且必须为POST请求。</td></tr><tr><td>DefaultLoginPageGeneratingFilter</td><td>如果没有在配置文件中指定认证页面，则由该过滤器生成一个默认认证页面。</td></tr><tr><td>DefaultLogoutPageGeneratingFilter</td><td>由此过滤器可以生产一个默认的退出登录页面</td></tr><tr><td>BasicAuthenticationFilter</td><td>此过滤器会自动解析HTTP请求中头部名字为Authentication，且以Basic开头的头信息。</td></tr><tr><td>RequestCacheAwareFilter</td><td>通过HttpSessionRequestCache内部维护了一个RequestCache，用于缓存HttpServletRequest</td></tr><tr><td>SecurityContextHolderAwareRequestFilter</td><td>针对ServletRequest进行了一次包装，使得request具有更加丰富的API</td></tr><tr><td>AnonymousAuthenticationFilter</td><td>当SecurityContextHolder中认证信息为空,则会创建一个匿名用户存入到SecurityContextHolder中。</td></tr><tr><td>SessionManagementFilter</td><td>SecurityContextRepository限制同一用户开启多个会话的数量</td></tr><tr><td>ExceptionTranslationFilter</td><td>异常转换过滤器位于整个springSecurityFilterChain的后方，用来转换整个链路中出现的异常</td></tr><tr><td>FilterSecurityInterceptor</td><td>1、最后一个拦截器 2、获取所配置资源访问的授权信息，根据SecurityContextHolder中存储的用户信息来决定其是否有权</td></tr></tbody></table><h3 id="2-认证流程概述"><a href="#2-认证流程概述" class="headerlink" title="2. 认证流程概述"></a>2. 认证流程概述</h3><ul><li>认证流程图如下：登陆密码请求是Security内置的认证方式；短信登陆请求是基于Security的认证流程而开发自定义认证流程</li></ul><img src="https://s1.ax1x.com/2020/07/25/UxLY8g.png" alt="UxLY8g.png" border="0" /><ul><li>密码登陆认证流程说明：客户端发送/login请求并且携带用户名和密码，请求被Filter拦截，在Filter中首先根据用户名和密码new一个未认证标识的Authentication，然后将Authentication交给Manager，Manager根据Authentication的类型找到处理这个Authentication的Provider，在Provider中调用UserDetailService返回的UserDetail，如果根据用户名密码new的Authentication和返回的UserDetail进行匹配认证标识，匹配成功则new一个认证成功的Authentication，至此Authentication作为通行令牌表示认证成功；</li><li>短信登陆流程说明：短信登陆在Security中是没有实现的，所以需要自定义对Security进行扩展；①首先需要定义短信认证的AuthenticationToken类型以及处理该Token的Provider，②其次要定义拦截短信验证请求的Filter，③最后将自定义的Filter配置到Security过滤器链中；配置好之后的短信验证的流程和用户名密码的流程就相同了，只是处理流程中的关键对象的类型有所区别；</li></ul><h3 id="3-认证流程核心对象解析"><a href="#3-认证流程核心对象解析" class="headerlink" title="3. 认证流程核心对象解析"></a>3. 认证流程核心对象解析</h3><h4 id="1-Authentication"><a href="#1-Authentication" class="headerlink" title="1. Authentication"></a>1. Authentication</h4><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Authentication是一个接口，用来规范获取认证相关信息的方法；使用Security可以自定义多种认证方式，不同的认证认证方式有不同的Authentication的实现；接口中获取认证信息的说明：源码说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Authentication</span> <span class="keyword">extends</span> <span class="title class_">Principal</span>, Serializable &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由AuthenticationManager设置：用于获取授权主题的权限集合，确保修改返回的数组集合不会影响认证身份状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 令牌未通过，确保返回空集合，不能为null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于作为认证主体的凭证. 通常是一个密码;但是也可以是任何相关AuthenticationManager的调用者期望返回的凭证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 证明令牌的凭证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Object <span class="title function_">getCredentials</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储于认证身份相关的其他信息. 可以是IP、证书、编号等等</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果不用可以为null</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> Object <span class="title function_">getDetails</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取认证的主体：如对于用户名密码方式的认证，改信息则为用户名.是期望被验证的请求主体</span></span><br><span class="line"><span class="comment"> * AuthenticationManager会返回Authentication：包含了更丰富的主体信息，在Security中一般</span></span><br><span class="line"><span class="comment"> * 会用UserDetails作为对象主体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 被认证的主体或认证成功后的主体</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Object <span class="title function_">getPrincipal</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于指示 AbstractSecurityInterceptor 是否需要从 AuthenticationManager 获取认证令牌</span></span><br><span class="line"><span class="comment"> * 通常AuthenticationManager中的AuthenticationProvider会返回一个不可变的身份令牌，返回为true</span></span><br><span class="line"><span class="comment"> * 此后的认证过程AbstractSecurityInterceptor将不再从AuthenticationManager中再次获取令牌，</span></span><br><span class="line"><span class="comment"> * 直接返回 true，用于提高认证性能</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> * 出于安全考虑，该方法需要谨慎的返回true：除非他们是不可变的或者是创建以来不可被修改；</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果令牌认证通过（true）AbstractSecurityInterceptor将不会再向AuthenticationManager发送</span></span><br><span class="line"><span class="comment"> * token获取令牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isAuthenticated</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 参照isAuthenticated()方法的描述，改方法的实现需要保证isAuthenticated()为false的情况下课调用该方法，</span></span><br><span class="line"><span class="comment"> * 如果isAuthenticated()为true调用该方法需要抛出isAuthenticated()异常</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 如果认证值得信任参数为true，如果认证被拒绝参数为false</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IllegalArgumentException 如果视图修改认证状态为true被拒绝（因为认证状态需要设置为不可变）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setAuthenticated</span><span class="params">(<span class="type">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>AbstractAuthenticationToken已经对Authentication做了部分实现，如果需要自定义认证需要基础AbstractAuthenticationToken，并封装自定义需要的认证信息</li><li>由基类AbstractAuthenticationToken派生出的类表示Security的一种认证方式，每种认证方式都有自己对应的AuthenticationProvider实例进行校验；</li></ul></blockquote><h4 id="2-AuthenticationProvider"><a href="#2-AuthenticationProvider" class="headerlink" title="2. AuthenticationProvider"></a>2. AuthenticationProvider</h4><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>每一种认证都会有一个AbstractAuthenticationToken（派生类），而Token的认证方式需要定义在AuthenticationProvider中，所以每个Token都有自己独特的认证Provider，所有的AuthenticationProvider都会被AuthenticationManager管理，如果Provider认证成功则AuthenticationManager会返回认证成功的Authentication作为Security的通信令牌；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>如：在用户名密码的认证方式中，AbstractUserDetailsAuthenticationProvider主要作用根据请求中的数据作为参数通过UserDetailsService获取到服务器数据库中的UserDetails对象，然后进行与请求的认证信息进行匹配，如果匹配成功则认证通过；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AuthenticationProvider</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向 AuthenticationManager 提供请求认证的对象,AuthenticationManager根据Token类型匹配对应的</span></span><br><span class="line"><span class="comment"> * AuthenticationProvider,如果认证通过返回一个完整信息并且具有认证令牌的Authentication</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> 请求认证的主体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果认证成功成功返回完整的认证信息,如果返回null,则会有下一个AuthenticationProvider进行认证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  如果认证失败抛出 AuthenticationException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Authentication <span class="title function_">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示该Provider所支持的AuthenticationToken类型</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> authentication</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果返回true表示该Provider支持该Token的认证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-AuthenticationManager"><a href="#3-AuthenticationManager" class="headerlink" title="3. AuthenticationManager"></a>3. AuthenticationManager</h4><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>AuthenticationManager 这个类是接口，他的实现类ProviderManager的作用是收集所有的AuthenticationProvider，用于处理与之对应的AbstractAuthenticationToken；</p><h4 id="4-UserDetailsService"><a href="#4-UserDetailsService" class="headerlink" title="4. UserDetailsService"></a>4. UserDetailsService</h4><ul><li><p>封装了获取用户的逻辑，由开发者封装用户信息并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String var1)</span> <span class="keyword">throws</span> UsernameNotFoundException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="5-UserDetails"><a href="#5-UserDetails" class="headerlink" title="5. UserDetails"></a>5. UserDetails</h4><ul><li>Security内部定义获取用户信息的UserDetails接口与他的实现类User<ul><li>UserDetails：是个接口定义了获取用户相关属性的逻辑，Security或根据返回的UserDetails完成校验；</li><li>User：是Security默认提供的一个用户的实现，自定义开发可以继承User类或者实现UserDetails接口；</li></ul></li></ul><h4 id="6-AuthenticationException"><a href="#6-AuthenticationException" class="headerlink" title="6. AuthenticationException"></a>6. AuthenticationException</h4><ul><li>是Security认证异常的基类：如果需要自定义Security的认证异常，需要继承自该类；</li></ul><h2 id="1-4-Security概念-授权"><a href="#1-4-Security概念-授权" class="headerlink" title="1.4 Security概念-授权"></a>1.4 Security概念-授权</h2><h2 id="1-5-Security概念-OAuth2"><a href="#1-5-Security概念-OAuth2" class="headerlink" title="1.5 Security概念-OAuth2"></a>1.5 Security概念-OAuth2</h2><h1 id="第二章-Security认证"><a href="#第二章-Security认证" class="headerlink" title="第二章 Security认证"></a>第二章 Security认证</h1><h2 id="1-默认用户"><a href="#1-默认用户" class="headerlink" title="1. 默认用户"></a>1. 默认用户</h2><ul><li><p>在SpringBoot项目中添加依赖<code>spring-boot-starter-security</code>，会将SecurityAutoConfiguration注入到Spring容器中，并且SecurityAutoConfiguration组件会引入SpringSecurity相关配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(DefaultAuthenticationEventPublisher.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(SecurityProperties.class)</span></span><br><span class="line"><span class="meta">@Import(&#123;</span></span><br><span class="line"><span class="meta">    SpringBootWebSecurityConfiguration.class,</span></span><br><span class="line"><span class="meta">    WebSecurityEnablerConfiguration.class,</span></span><br><span class="line"><span class="meta">    SecurityDataConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityAutoConfiguration</span> &#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(AuthenticationEventPublisher.class)</span></span><br><span class="line"><span class="keyword">public</span> DefaultAuthenticationEventPublisher <span class="title function_">authenticationEventPublisher</span><span class="params">(ApplicationEventPublisher publisher)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DefaultAuthenticationEventPublisher</span>(publisher);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目的默认的零配置的状态下，便会开启UserDetailsServiceAutoConfiguration配置类的功能，该配置类会读取SecurityProperties中的配置信息（SecurityProperties中默认的User属性如下），所以默认的登陆用户名是user，密码是随机生成的UUID，项目启动会将密码打印在启动日志中；UserDetailsServiceAutoConfiguration会将从配置文件中读取的用户名和密码并构建为InMemoryUserDetailsManager将用户信息配置在内存中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Security应用启动后，如果是浏览器访问应用资源会被Security认证拦截并被DefaultLoginPageGeneratingFilter拦截：在过滤器中构造出登陆表单页，并响应给浏览器；</p></li><li><p>在默认登陆页中会发送<code>/login</code>请求，根据用户名和密码请求认证；<code>/login</code>请求会被Security内置过滤器UsernamePasswordAuthenticationFilter拦截并执行认证流程；</p></li></ul><h2 id="2-配置文件修改默认用户"><a href="#2-配置文件修改默认用户" class="headerlink" title="2. 配置文件修改默认用户"></a>2. 配置文件修改默认用户</h2><ul><li><p>在默认的Security的项目中，用户名固定是user，密码是在控制台输出的随机密码，不方便使用，根据SpringBoot属性配置，可以在配置文件中修改Security的默认配置：修改默认的认证用户名和密码，默认从配置文件中读取的密码会添加前缀{noop}；</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">自定义用户名</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">自定义密码</span></span><br></pre></td></tr></table></figure></li><li><p>修改用户名和密码的默认值后，UserDetailsServiceAutoConfiguration便会使用配置的用户名和密码构建InMemoryUserDetailsManager将用户信息加入应用；</p></li></ul><h2 id="3-配置类修改默认用户"><a href="#3-配置类修改默认用户" class="headerlink" title="3. 配置类修改默认用户"></a>3. 配置类修改默认用户</h2><ul><li><p>如果在配置文件中指定用户名和密码的方式只能指定单用户，Security提供配置类，可以在配置类中指定基于内存的用户信息，在配置类中可以配置多个用户信息以及权限数据</p></li><li><p>Security的配置类说明：①需使用@EnableWebSecurity标准Security的自定义配置类②需继承WebSecurityConfigurerAdapter类</p></li><li><p>在WebSecurityConfigurerAdapter类中的configure(AuthenticationManagerBuilder auth)方法参数提供了向内存中新增认证用户的方法，所以可以在配置类中指定认证用户；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span> <span class="comment">// 启用方法安全设置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;root&quot;</span>, <span class="string">&quot;&#123;noop&#125;root&quot;</span>, AuthorityUtils.createAuthorityList(<span class="string">&quot;ADMIN&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>@EnableWebSecurity是Spring Security用于启用Web安全的注解。典型的用法是该注解用在某个Web安全配置类上(实现了接口<code>WebSecurityConfigurer</code>或者继承自<code>WebSecurityConfigurerAdapter</code>；</p></li><li><p>@EnableGlobalMethodSecurity：想要开启spring方法级权限验证时，只需要在任何 @Configuration实例上使用 @EnableGlobalMethodSecurity 注解就可以；</p></li><li><p>@EnableGlobalMethodSecurity 这个注解为我们提供了prePostEnabled（prePostEnabled = true 会解锁 @PreAuthorize 和 @PostAuthorize 两个注解）、securedEnabled 和 jsr250Enabled 三种不同的机制来实现同一种功能</p><table><thead><tr><th>授权机制</th><th>授权注解</th></tr></thead><tbody><tr><td>prePostEnabled</td><td>@PreAuthorize：在方法执行前进行验证 @PostAuthorize：在方法执行后进行验证 @PreFilter：对集合类型的参数执行过滤，移除结果为false的元素 @PostFilter：基于返回值相关的表达式，对返回值进行过滤 … …</td></tr><tr><td>securedEnabled</td><td>@Secured：用来定义业务方法的安全配置</td></tr><tr><td>jsr250Enabled</td><td>@DenyAll： 拒绝所有访问 @PermitAll： 允许所有访问 @RolesAllowed({“USER”, “ADMIN”})：角色限制</td></tr></tbody></table></li></ul></blockquote></li></ul><h2 id="4-动态获取用户"><a href="#4-动态获取用户" class="headerlink" title="4. 动态获取用户"></a>4. 动态获取用户</h2><ul><li><p>首先对用户名密码认证的源码分析：浏览器中表单发送<code>/login</code>请求：UsernamePasswordAuthenticationFilter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UsernamePasswordAuthenticationFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(<span class="string">&quot;/login&quot;</span>, <span class="string">&quot;POST&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UsernamePasswordAuthenticationFilter构建UsernamePasswordAuthenticationToken交给AuthenticationManager处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest req,HttpServletResponse res)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">authRequest</span> </span><br><span class="line">            <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>( username, password);</span><br><span class="line"><span class="comment">// ... ...</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>UsernamePasswordAuthenticationToken类型的Token最终被AbstractUserDetailsAuthenticationProvider处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (UsernamePasswordAuthenticationToken.class.isAssignableFrom(authentication));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>AbstractUserDetailsAuthenticationProvider获取到子类的提供的UserDetails</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> UserDetails <span class="title function_">retrieveUser</span><span class="params">(String username, UsernamePasswordAuthenticationToken authentication)</span></span><br><span class="line">    <span class="keyword">throws</span> AuthenticationException;</span><br></pre></td></tr></table></figure></li><li><p>AbstractUserDetailsAuthenticationProvider子类DaoAuthenticationProvider：当Spring项目启动时会判断容易中是否有UserDetailsService类型的Bean，如果有则会设置到DaoAuthenticationProvider属性中，所以AbstractUserDetailsAuthenticationProvider根据子类提供的UserDetailsService获取到UserDetails，根据UserDetails中的信息执行认证流程；</p></li><li><p>根据源码分析结果，只需要自定义UserDetailsService的实现并注入到Spring容器中，在UserDetailsService中Security提供的用户名查询数据库，根据数据库的信息构建UserDetails对象，Security会根据返回的认证信息与请求的认证信息进行比对，比对通过则认证成功；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 根据用户名从数据库查询信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username, <span class="string">&quot;&#123;noop&#125;root&quot;</span>, AuthorityUtils.createAuthorityList(<span class="string">&quot;ADMIN&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-Security5认证加密"><a href="#5-Security5认证加密" class="headerlink" title="5. Security5认证加密"></a>5. Security5认证加密</h2><ol><li><p>SpringSecurity5之前需要将密码生成器注入到Spring容器，在Security5之后不需要配置密码的加密方式，而是用户密码加前缀的方式表明加密方式：如<code>&#123;MD5&#125;xxx</code>代表使用的是<code>MD5</code>加密方式、<code>&#123;bcrypt&#125;xxx</code>代表使用的是<code>bcrypt</code>加密方式。这样可以在同一系统中支持多种加密方式，迁移用户比较省事。在Security5之前的加密类：StandardPasswordEncoder, MessageDigestPasswordEncoder, StandardPasswordEncoder 不再推荐使用, 全加上了@Deprecated</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">StandardPasswordEncoder</span> <span class="keyword">implements</span> <span class="title class_">PasswordEncoder</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>新增PasswordEncoderFactories 类,里面有一个静态的方法 ,可以明显的看到此方法默认是使用BCryptPasswordEncoder 作为实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> PasswordEncoder <span class="title function_">createDelegatingPasswordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">encodingId</span> <span class="operator">=</span> <span class="string">&quot;bcrypt&quot;</span>;</span><br><span class="line">    Map&lt;String, PasswordEncoder&gt; encoders = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    encoders.put(encodingId, <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>());</span><br><span class="line">    encoders.put(<span class="string">&quot;ldap&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.LdapShaPasswordEncoder());</span><br><span class="line">    encoders.put(<span class="string">&quot;MD4&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.Md4PasswordEncoder());</span><br><span class="line">    encoders.put(<span class="string">&quot;MD5&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;MD5&quot;</span>));</span><br><span class="line">    encoders.put(<span class="string">&quot;noop&quot;</span>, org.springframework.security.crypto.password.NoOpPasswordEncoder.getInstance());</span><br><span class="line">    encoders.put(<span class="string">&quot;pbkdf2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Pbkdf2PasswordEncoder</span>());</span><br><span class="line">    encoders.put(<span class="string">&quot;scrypt&quot;</span>, <span class="keyword">new</span> <span class="title class_">SCryptPasswordEncoder</span>());</span><br><span class="line">    encoders.put(<span class="string">&quot;SHA-1&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;SHA-1&quot;</span>));</span><br><span class="line">    encoders.put(<span class="string">&quot;SHA-256&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.MessageDigestPasswordEncoder(<span class="string">&quot;SHA-256&quot;</span>));</span><br><span class="line">    encoders.put(<span class="string">&quot;sha256&quot;</span>, <span class="keyword">new</span> <span class="title class_">org</span>.springframework.security.crypto.password.StandardPasswordEncoder());</span><br><span class="line">    encoders.put(<span class="string">&quot;argon2&quot;</span>, <span class="keyword">new</span> <span class="title class_">Argon2PasswordEncoder</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DelegatingPasswordEncoder</span>(encodingId, encoders);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>加盐的变化,以BCryptPasswordEncoder为例,盐值是随机生成的</p></li><li><p>Security5的加密方法：不需要在配置文件中指定新的加密实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">PasswordEncoder</span> <span class="variable">pwd</span> <span class="operator">=</span> PasswordEncoderFactories.createDelegatingPasswordEncoder();</span><br><span class="line">    <span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> pwd.encode(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-Security配置文件"><a href="#6-Security配置文件" class="headerlink" title="6. Security配置文件"></a>6. Security配置文件</h2><ul><li><p>默认的Security的配置类：DefaultConfigurerAdapter没有对父类做任务操作，WebSecurityConfigurerAdapter#configure(HttpSecurity http)其作用，默认的配置；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        .authorizeRequests()</span><br><span class="line">        .anyRequest().authenticated()</span><br><span class="line">        .and()</span><br><span class="line">        .formLogin().and()</span><br><span class="line">        .httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>authorizeRequests（开启请求认证）anyRequest（任何请求）authenticated（必须认证成功）</li><li>formLogin：FormLoginConfigurer被添加到Security配置中</li><li>httpBasic：HttpBasicConfigurer被添加到Security的配置中</li></ul></blockquote></li><li><p>自定义Security的配置文件：①配置类使用@EnableWebSecurity标准②配置类继承WebSecurityConfigurerAdapter并重写configure(HttpSecurity http)方法，在改方法中重新定义Security的认证行为；</p></li></ul><h2 id="7-Security认证-Basic"><a href="#7-Security认证-Basic" class="headerlink" title="7. Security认证-Basic"></a>7. Security认证-Basic</h2><ul><li><p>Security默认有两种认证方式：</p><ol><li>Basic：默认请求头是Authentication，值是<code>Basic</code>开头的Base64加密的<code>用户名:密码</code>；</li><li>Form：表单登陆，默认form.action是<code>/login</code>，可以通过配置修改；</li></ol></li><li><p>Basic认证被BasicAuthenticationFilter过滤器拦截，并且Token类型是UsernamePasswordAuthenticationToken；</p></li><li><p>BasicAuthenticationFilter主要源码解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHORIZATION</span> <span class="operator">=</span> <span class="string">&quot;Authorization&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">AUTHENTICATION_SCHEME_BASIC</span> <span class="operator">=</span> <span class="string">&quot;Basic&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> UsernamePasswordAuthenticationToken <span class="title function_">convert</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="comment">// 解析请求头 Authorization 关键字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(AUTHORIZATION);</span><br><span class="line">    <span class="keyword">if</span> (header == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    header = header.trim();</span><br><span class="line">    <span class="comment">// 请求头是 Basic 的认证方,式则被该过滤器拦截并处理</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.startsWithIgnoreCase(header, AUTHENTICATION_SCHEME_BASIC)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 请求头的值 == Basic 表示没有请求参数</span></span><br><span class="line">    <span class="keyword">if</span> (header.equalsIgnoreCase(AUTHENTICATION_SCHEME_BASIC)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;Empty basic authentication token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] base64Token = header.substring(<span class="number">6</span>).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    <span class="type">byte</span>[] decoded;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        decoded = Base64.getDecoder().decode(base64Token);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>( <span class="string">&quot;Failed to decode basic authentication token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(decoded, getCredentialsCharset(request));</span><br><span class="line">    <span class="comment">// base64解析并判断是否是冒号(:)分隔</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">delim</span> <span class="operator">=</span> token.indexOf(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (delim == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BadCredentialsException</span>(<span class="string">&quot;Invalid basic authentication token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 构建Token并返回</span></span><br><span class="line">    <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">result</span>  </span><br><span class="line">        <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(token.substring(<span class="number">0</span>, delim), token.substring(delim + <span class="number">1</span>));</span><br><span class="line">    result.setDetails(<span class="built_in">this</span>.authenticationDetailsSource.buildDetails(request));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果需要修改默认的请求头与认证方式，需要自定义Filter并继承自BasicAuthenticationFilter，并将自定义的Filter添加到Security过滤器中；</p></li></ul><h2 id="7-Security认证-Form"><a href="#7-Security认证-Form" class="headerlink" title="7. Security认证-Form"></a>7. Security认证-Form</h2><ul><li><p>表单登陆相关配置：①配置自定义页面②配置认证参数③配置认证处理器④配置认证结果⑤配置认证结果处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.formLogin()</span><br><span class="line">        <span class="comment">//用户未登录时，访问任何资源都转跳到该路径，即登录页面</span></span><br><span class="line">        .loginPage(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment">// 登录表单form中action的地址，也就是处理认证请求的路径</span></span><br><span class="line">        .loginProcessingUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 表单登陆配置用户名参数名称</span></span><br><span class="line">        .usernameParameter(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment">// 表单登陆配置密码参数名称</span></span><br><span class="line">        .passwordParameter(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">         <span class="comment">// 登陆成功处理器</span></span><br><span class="line">        .successHandler(<span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 登录认证成功后默认转跳的路径,指定认证处理器后该配置无效</span></span><br><span class="line">        .defaultSuccessUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        .defaultSuccessUrl(<span class="string">&quot;&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">    <span class="comment">// 认证成功跳转地址,指定认证处理器后该配置无效</span></span><br><span class="line">        .successForwardUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            </span><br><span class="line">         <span class="comment">// 登陆失败处理器</span></span><br><span class="line">        .failureHandler(<span class="literal">null</span>)</span><br><span class="line">        <span class="comment">// 认证失败跳转地址,指定认证处理器后该配置无效,重定向后响应的Location中是带有(“?error”)</span></span><br><span class="line">        .failureForwardUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="comment">// 登陆失败跳转页面,重定向响应的Loaction中没有(”?error”)</span></span><br><span class="line">        .failureUrl(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>loginPage：默认的登陆页是由DefaultLoginPageGeneratingFilter生成并响应到浏览器，在改配置中可以指定自定义的登陆URI（必须是/开头），security会在当前域名为基础重定向到该URI；该URI可以是一个静态页面，也可以是一个Controller方法，在处理器方法中处理页面跳转；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin().loginPage(<span class="string">&quot;/hello&quot;</span>);</span><br><span class="line"><span class="comment">// @GetMapping接收请求并重定向到百度</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:http://www.baidu.com&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>loginProcessingUrl：登录页表单默认的登陆请求url是<code>/login</code>，改配置用于修改默认的表单请求<code>/login</code></p></li><li><p>usernameParameter：修改表单请求中用户名参数名称；</p></li><li><p>passwordParameter：修改表单请求中密码参数名称；</p></li><li><p>认证失败：failureUrl、failureForwardUrl、failureHandler，只有最后一个配置会生效；</p><ul><li><p>failureUrl：表单使用POST提交登陆请求，登陆失败后，Security根据配置的URL进行重定向；</p></li><li><p>failureForwardUrl：表单使用POST提交登陆请求，登陆失败Security会执行forward操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispatcher(forwardUrl).forward(request, response);</span><br></pre></td></tr></table></figure></li><li><p>failureUrl：表单使用POST提交登陆请求被UsernamePasswordAuthenticationFilter拦截，登陆失败调用默认的onAuthenticationFailure方法，如果自定义了则会执行自定义的认证失败处理方法；</p></li></ul></li><li><p>认证成功：defaultSuccessUrl、successForwardUrl、successHandler：只有最后一个配置会生效；</p><ul><li>defaultSuccessUrl：Security根据配置的URL进行重定向；</li><li>successForwardUrl：Security会执行forward操作；</li><li>successHandler：认证成功后执行onAuthenticationSuccess方法；</li></ul></li></ol><h2 id="7-记住我"><a href="#7-记住我" class="headerlink" title="7. 记住我"></a>7. 记住我</h2><ul><li><p>Security记住我原理：一个请求，先进入UsernamePasswordAuthenticationFilter，当这个过滤器认证成功之后，会调用一个RemeberMeService服务，在RemeberMeService类里面有一个TokenRepository方法。<br>RemeberMeService这个服务会它会生成一个token，然后将这个token存入到浏览器的Cookie中去。同时TokenRepository方法还可以将这个Token写入到数据库中，因为我这个动作是在通过UsernamePasswordAuthenticationFilter认证成功之后去做的，所以在存入DB的时候会将用户名和token存入进去即token和用户名是一一对应的。等第二次这个同一个用户再次访问系统的时候，这个请求在经过过滤器链的时候会经过RememberMeAuthenticationFilter过滤器，这个过滤器的作用就是读取cookie中的token，然后交给RemeberMeService，RemeberMeService会用TokenRepository到数据库中去查询这个token在数据库中有没有记录，如果有记录会将username取出来，取出来之后会调用UserDetailsService去获取用户信息，然后将用户信息存入到SecurityContext中去，以此来实现记住我功能。</p><img src="https://s3.ax1x.com/2021/01/04/sPj2Bd.jpg" alt="sPj2Bd.jpg" border="0" /></li><li><p>记住我的配置：</p><ol><li><p>在Html表单中新增参数：remember-me</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;remember-me&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span>记住我</span><br></pre></td></tr></table></figure></li><li><p>配置数据库：因为添加”记住我”这个功能需要用到DB，所以我在properties文件中去加入我的数据库的信息</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/tinner-demo?useUnicode=yes</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure></li><li><p>在Security的配置类中开启记住我的配置，并指定数据源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PersistentTokenRepository <span class="title function_">persistentTokenRepository</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">JdbcTokenRepositoryImpl</span> <span class="variable">tokenRepository</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTokenRepositoryImpl</span>();</span><br><span class="line">    tokenRepository.setDataSource(dataSource);</span><br><span class="line">    <span class="comment">// 首次执行自动生成数据表</span></span><br><span class="line">    tokenRepository.setCreateTableOnStartup(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> tokenRepository;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">   http</span><br><span class="line">       .rememberMe()</span><br><span class="line">       .tokenRepository(persistentTokenRepository())</span><br><span class="line">       .tokenValiditySeconds(<span class="string">&quot;过期时间&quot;</span>)</span><br><span class="line">       .userDetailsService(userDetailsService)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="8-获取认证信息"><a href="#8-获取认证信息" class="headerlink" title="8. 获取认证信息"></a>8. 获取认证信息</h2><ol><li><p>方式一：使用SecurityContextHolder的静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/username&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">currentUserName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication().getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式二：在Controller处理器方法添加Authentication类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/username&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">currentUserName</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> authentication.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式三：在Controller处理器方法添加Principal类型参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/username&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">currentUserName</span><span class="params">(Principal principal)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> principal.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式四：注入IAuthenticationFacadeBean并获取认证信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IAuthenticationFacade authenticationFacade;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/username&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">currentUserNameSimple</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Authentication</span> <span class="variable">authentication</span> <span class="operator">=</span> authenticationFacade.getAuthentication();</span><br><span class="line">    <span class="keyword">return</span> authentication.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式五：通过<code>HttpServletRequest</code>获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;/username&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">currentUserNameSimple</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">    <span class="type">Principal</span> <span class="variable">principal</span> <span class="operator">=</span> request.getUserPrincipal();</span><br><span class="line">    <span class="keyword">return</span> principal.getName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="8-认证结果处理器"><a href="#8-认证结果处理器" class="headerlink" title="8. 认证结果处理器"></a>8. 认证结果处理器</h2><ul><li>认证成功处理器接口：AuthenticationSuccessHandler；</li><li>认证失败处理器接口：AuthenticationFailureHandler；</li><li>自定义认证一般都需要实现一个Filter，如果需要全局使用搞一个认证结果处理器，则需要将认证成功处理器和认证失败处理器作为自定义Filter的内部属性，当认证成功后执行处理器方法；配置Filter到Security的过滤器链中的时候需要为Filter中的认证结果处理器属性进行赋值；</li></ul><h2 id="9-登出logout"><a href="#9-登出logout" class="headerlink" title="9. 登出logout"></a>9. 登出logout</h2><ul><li><p>登出相关配置：①登出的url②登出成功处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http.logout()</span><br><span class="line">        .logoutUrl(<span class="string">&quot;/panda/logout&quot;</span>)</span><br><span class="line">        .logoutSuccessHandler(logoutSuccessHandler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="10-自定义认证-短信验证码"><a href="#10-自定义认证-短信验证码" class="headerlink" title="10. 自定义认证-短信验证码"></a>10. 自定义认证-短信验证码</h2><ul><li>SmsFilter：在认证</li><li>SmsAuthenticationFilter</li><li>SmsAuthenticationToken</li><li>SmsAuthenticationProvider</li></ul><h2 id="11-自定义认证-JWT"><a href="#11-自定义认证-JWT" class="headerlink" title="11. 自定义认证 - JWT"></a>11. 自定义认证 - JWT</h2><p><strong>Security整合JWT原理</strong></p><ol><li>首先需要浏览器发送登陆请求（带用户名和密码）</li><li>根据请求UsernamePasswordAuthenticationToken交给Security的后续流程</li><li>认证成功后根据将用户信息作为JWT的载荷信息生成Token，并保存到Redis或直接响应到Http Header中</li><li>当浏览器获取到Token后，再次请求服务器资源需要对头部Token进行验证：Security提供的BasicAuthenticationFilter具有身份验证的功能；</li></ol><p>总结：Security JWT本质上是对Security原有的认证的扩展和增强：不再是单一的认证方式，而是用户名认证和身份认证的结合同时配置这具有安全保障的JWT令牌完成分布式认证（单点登录）</p><p><strong>Security整合JWT代码关键点整理</strong></p><ol><li>自定义JWT工具类：最安全的方式JWT-RSA方式生成TOKEN和校验TOKEN的方法</li><li>JwtTokenFilter：继承UsernamePasswordAuthenticationToken，获取认证用户名生成Token保存到HttpHeader中</li><li>JwtAuthenticationFilter：继承BasicAuthenticationFilter，获取请求头中信息，身份验证</li></ol><h1 id="第三章-Security授权"><a href="#第三章-Security授权" class="headerlink" title="第三章 Security授权"></a>第三章 Security授权</h1><h2 id="3-1-权限模型"><a href="#3-1-权限模型" class="headerlink" title="3.1 权限模型"></a>3.1 权限模型</h2><h3 id="1-ACl模型"><a href="#1-ACl模型" class="headerlink" title="1. ACl模型"></a>1. ACl模型</h3><p>访问控制列表，是前几年盛行的一种权限设计，它的核心在于用户直接和权限挂钩。</p><p>RBAC的核心是用户只和角色关联，而角色代表对了权限，这样设计的优势在于使得对用户而言，只需角色即可以，而某角色可以拥有各种各样的权限并可继承。</p><p>ACL和RBAC相比缺点在于由于用户和权限直接挂钩，导致在授予时的复杂性，虽然可以利用组来简化这个复杂性，但仍然会导致系统不好理解，而且在取出判断用户是否有该权限时比较的困难，一定程度上影响了效率。</p><h3 id="2-RBAC模型"><a href="#2-RBAC模型" class="headerlink" title="2. RBAC模型"></a>2. RBAC模型</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>RBAC（Role-Based Access Control ）基于角色的访问控制。RBAC认为权限的过程可以抽象概括为：判断【Who是否可以对What进行How的访问操作（Operator）】这个逻辑表达式的值是否为True的求解过程。</p><ul><li><p>即将权限问题转换为Who、What、How的问题。who、what、how构成了访问权限三元组。</p></li><li><p>RBAC支持公认的安全原则：最小特权原则、责任分离原则和数据抽象原则。</p><ul><li>最小特权原则得到支持，是因为在RBAC模型中可以通过限制分配给角色权限的多少和大小来实现，分配给与某用户对应的角色的权限只要不超过该用户完成其任务的需要就可以了。</li><li>责任分离原则的实现，是因为在RBAC模型中可以通过在完成敏感任务过程中分配两个责任上互相约束的两个角色来实现，例如在清查账目时，只需要设置财务管理员和会计两个角色参加就可以了。</li><li>数据抽象是借助于抽象许可权这样的概念实现的，如在账目管理活动中，可以使用信用、借方等抽象许可权，而不是使用操作系统提供的读、写、执行等具体的许可权。但RBAC并不强迫实现这些原则，安全管理员可以允许配置RBAC模型使它不支持这些原则。因此，RBAC支持数据抽象的程度与RBAC模型的实现细节有关。</li></ul></li><li><p>RBAC模型</p><ul><li>RBAC0的模型中包括用户（U）、角色（R）和许可权（P）等3类实体集合。</li><li>RBAC1，基于RBAC0模型，引入角色间的继承关系，即角色上有了上下级的区别，角色间的继承关系可分为一般继承关系和受限继承关系。一般继承关系仅要求角色继承关系是一个绝对偏序关系，允许角色间的多继承。而受限继承关系则进一步要求角色继承关系是一个树结构，实现角色间的单继承。</li><li>RBAC3，也就是最全面级的权限管理，它是基于RBAC0的基础上，将RBAC1和RBAC2进行整合了，最前面，也最复杂的：</li></ul></li></ul><h3 id="3-DAC"><a href="#3-DAC" class="headerlink" title="3. DAC"></a>3. DAC</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>自主访问控制（DAC: Discretionary Access Control）：系统会识别用户，然后根据被操作对象（Subject）的权限控制列表（ACL: Access Control List）或者权限控制矩阵（ACL: Access Control Matrix）的信息来决定用户的是否能对其进行哪些操作，例如读取或修改。而拥有对象权限的用户，又可以将该对象的权限分配给其他用户，所以称之为“自主（Discretionary）”控制。</p><ul><li>这种设计最常见的应用就是文件系统的权限设计，如微软的NTFS。</li><li>DAC最大缺陷就是对权限控制比较分散，不便于管理，比如无法简单地将一组文件设置统一的权限开放给指定的一群用户。</li></ul><h3 id="4-MAC"><a href="#4-MAC" class="headerlink" title="4. MAC"></a>4. MAC</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>强制访问控制（MAC: Mandatory Access Control）：MAC是为了弥补DAC权限控制过于分散的问题而诞生的。在MAC的设计中，每一个对象都都有一些权限标识，每个用户同样也会有一些权限标识，而用户能否对该对象进行操作取决于双方的权限标识的关系，这个限制判断通常是由系统硬性限制的。比如在影视作品中我们经常能看到特工在查询机密文件时，屏幕提示需要“无法访问，需要一级安全许可”，这个例子中，文件上就有“一级安全许可”的权限标识，而用户并不具有。</p><ul><li>MAC非常适合机密机构或者其他等级观念强烈的行业，但对于类似商业服务系统，则因为不够灵活而不能适用。</li></ul><h3 id="5-ABAC"><a href="#5-ABAC" class="headerlink" title="5. ABAC"></a>5. ABAC</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>ABAC被一些人称为是权限系统设计的未来：不同于常见的将用户通过某种方式关联到权限的方式，ABAC则是通过动态计算一个或一组属性来是否满足某种条件来进行授权判断（可以编写简单的逻辑）。属性通常来说分为四类：用户属性（如用户年龄），环境属性（如当前时间），操作属性（如读取）和对象属性（如一篇文章，又称资源属性），所以理论上能够实现非常灵活的权限控制，几乎能满足所有类型的需求。</p><blockquote><p>例如规则：“允许所有班主任在上课时间自由进出校门”这条规则，其中，“班主任”是用户的角色属性，“上课时间”是环境属性，“进出”是操作属性，而“校门”就是对象属性了。为了实现便捷的规则设置和规则判断执行，ABAC通常有配置文件（XML、YAML等）或DSL配合规则解析引擎使用。XACML（eXtensible Access Control Markup Language）是ABAC的一个实现，但是该设计过于复杂，我还没有完全理解，故不做介绍。</p></blockquote><p>总结一下，ABAC有如下特点：</p><ol><li>集中化管理</li><li>可以按需实现不同颗粒度的权限控制</li><li>不需要预定义判断逻辑，减轻了权限系统的维护成本，特别是在需求经常变化的系统中</li><li>定义权限时，不能直观看出用户和对象间的关系</li><li>规则如果稍微复杂一点，或者设计混乱，会给管理者维护和追查带来麻烦</li><li>权限判断需要实时执行，规则过多会导致性能问题</li></ol><h2 id="3-2-Security权限表达式"><a href="#3-2-Security权限表达式" class="headerlink" title="3.2 Security权限表达式"></a>3.2 Security权限表达式</h2><h3 id="1-Security权限表达式"><a href="#1-Security权限表达式" class="headerlink" title="1. Security权限表达式"></a>1. Security权限表达式</h3><table><thead><tr><th><strong>表达式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>hasRole([role])</td><td>当前用户是否拥有指定角色。</td></tr><tr><td>hasAnyRole([role1,role2])</td><td>多个角色是一个以逗号进行分隔的字符串。如果当前用户拥有指定角色中的任意一个则返回true。</td></tr><tr><td>hasAuthority([auth])</td><td>等同于hasRole</td></tr><tr><td>hasAnyAuthority([auth1,auth2])</td><td>等同于hasAnyRole</td></tr><tr><td>Principle</td><td>代表当前用户的principle对象</td></tr><tr><td>authentication</td><td>直接从SecurityContext获取的当前Authentication对象</td></tr><tr><td>permitAll</td><td>总是返回true，表示允许所有的</td></tr><tr><td>denyAll</td><td>总是返回false，表示拒绝所有的</td></tr><tr><td>isAnonymous()</td><td>当前用户是否是一个匿名用户</td></tr><tr><td>isRememberMe()</td><td>表示当前用户是否是通过Remember-Me自动登录的</td></tr><tr><td>isAuthenticated()</td><td>表示当前用户是否已经登录认证成功了。</td></tr><tr><td>isFullyAuthenticated()</td><td>如果当前用户既不是一个匿名用户，同时又不是通过Remember-Me自动登录的，则返回true。</td></tr></tbody></table><h3 id="2-在配置中的权限表达式"><a href="#2-在配置中的权限表达式" class="headerlink" title="2. 在配置中的权限表达式"></a>2. 在配置中的权限表达式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        .authorizeRequeasts()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/admin&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-在注解上的权限表达式"><a href="#3-在注解上的权限表达式" class="headerlink" title="3. 在注解上的权限表达式"></a>3. 在注解上的权限表达式</h3><ul><li><p><strong>prePostEnabled</strong>：@EnableGlobalMethodSecurity(prePostEnabled = true)： 会解锁 @PreAuthorize 和 @PostAuthorize 两个注解。另外还有@PreFilter和@PostFilter两个注解</p><ul><li><p>@PreAuthorize：注解会在方法执行前进行验证，</p></li><li><p>@PostAuthorize：注解会在方法执行后进行验证。</p></li><li><p>@PreFilter：对集合类型的参数执行过滤，移除结果为false的元素。基于方法入参相关的表达式，对入参进行过滤。分页慎用！该过程发生在接口接收参数之前。 入参必须为 java.util.Collection 且支持 remove(Object) 的参数。如果有多个集合需要通过 filterTarget=&lt;参数名&gt; 来指定过滤的集合。内置保留名称 filterObject 作为集合元素的操作名来进行评估过滤。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定过滤的参数，过滤偶数</span></span><br><span class="line"><span class="meta">@PreFilter(filterTarget=&quot;ids&quot;, value=&quot;filterObject%2==0&quot;)</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><p>@PreAuthorize(“hasRole(‘ADMIN’)”)</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- @PostFilter：和@PreFilter 不同的是， 基于返回值相关的表达式，对返回值进行过滤。分页慎用！该过程发生接口进行数据返回之前。</span><br></pre></td></tr></table></figure></li><li><p><strong>securedEnabled</strong>：@EnableGlobalMethodSecurity(securedEnabled = true)：启用@Secured安全控制注解，否则@Secured注解无效。@Secured注解是用来定义业务方法的安全配置。在需要安全[角色/权限等]的方法上指定 @Secured，并且只有那些角色/权限的用户才可以调用该方法；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_user&quot;&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Secured(&#123;&quot;ROLE_admin&quot;, &quot;ROLE_user1&quot;&#125;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>@Secured缺点（限制）就是不支持Spring EL表达式</li><li>并且指定的角色必须以ROLE_开头，不可省略。该注解功能要简单的多，默认情况下只能基于角色</li></ul></li><li><p><strong>securedEnabled</strong>：@EnableGlobalMethodSecurity(securedEnabled = true)：启用@Secured安全控制注解，否则@Secured注解无效。@Secured注解是用来定义业务方法的安全配置。在需要安全[角色/权限等]的方法上指定 @Secured，并且只有那些角色/权限的用户才可以调用该方法3.4 Security授权-jsr250Enabled；启用 JSR-250 安全控制注解，这属于 JavaEE 的安全规范（现为 jakarta 项目）。一共有五个安全注解。如果设置 jsr250Enabled 为 true ，就开启了 JavaEE 安全注解中的以下三个；如果设置 jsr250Enabled 为 false，以下三个注解失效；</p><ul><li><strong>@DenyAll</strong>： 拒绝所有访问</li><li><strong>@RolesAllowed({“USER”, “ADMIN”})</strong>： 该方法只要具有”USER”, “ADMIN”任意一种权限就可以访问。这里可以省略前缀ROLE_，实际的权限可能是ROLE_ADMIN</li><li><strong>@PermitAll</strong>： 允许所有访问</li></ul></li></ul><h2 id="3-3-Security权限控制"><a href="#3-3-Security权限控制" class="headerlink" title="3.3 Security权限控制"></a>3.3 Security权限控制</h2><h3 id="1-鉴别是否登录"><a href="#1-鉴别是否登录" class="headerlink" title="1. 鉴别是否登录"></a>1. 鉴别是否登录</h3><p>部分的应用系统只是区别用户是否登录，所以可以用是否认证成功进行身份鉴别；</p><h3 id="2-鉴别简单权限、角色"><a href="#2-鉴别简单权限、角色" class="headerlink" title="2. 鉴别简单权限、角色"></a>2. 鉴别简单权限、角色</h3><p>部分的应用系统只提供了系统服务内部定义的简单角色或权限，如：是否是VIP用户，是否是付费用户等等；只需要为用户添加指定权限并在对应的资源上配置对应的权限</p><ul><li><p>基于配置的权限鉴别：如下表示antMatchers()匹配的请求需要符合指定的权限表达式（hasAnyRole(“admin”)）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        .authorizeRequeasts()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/admin&quot;</span>).hasAnyRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基于方法注解的权限鉴别：如下表示发送/admin请求，用户必须有<code>ROLE_admin</code>角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_admin&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResultUtil&lt;Authentication&gt; <span class="title function_">admin</span><span class="params">(Authentication authentication)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(authentication);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-鉴别用户自定义角色和权限"><a href="#3-鉴别用户自定义角色和权限" class="headerlink" title="3. 鉴别用户自定义角色和权限"></a>3. 鉴别用户自定义角色和权限</h3><ol><li><p><strong>启用方法级别的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用方法级别的权限注解功能</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigure</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Controller类中进行权限控制</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_admin&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;emp:add&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>自定义鉴权控制器类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义权限控制器类，通过返回boolean验证是否符合权限</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizeHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">AntPathMatcher</span> <span class="variable">pathMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AntPathMatcher</span>();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request        当前请求信息,对应请求url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authentication 当前认证信息,获取到认证主体,判断主体是否可访问url</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span> | <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Security的配置中指定改控制器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    http</span><br><span class="line">        .authorizeRequeasts()</span><br><span class="line">        .antMatchers(<span class="string">&quot;/login&quot;</span>).permitAll()</span><br><span class="line">        .anyRequest().access(<span class="string">&quot;@authorizeHandler.hasPermission(request,authentication)&quot;</span>)</span><br><span class="line">        .anyRequest().authenticated();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-4-Security授权原理"><a href="#3-4-Security授权原理" class="headerlink" title="3.4 Security授权原理"></a>3.4 Security授权原理</h2><img src='https://s1.ax1x.com/2020/07/03/NOzwJx.png'/><h2 id="3-5-基于RBAC的案例"><a href="#3-5-基于RBAC的案例" class="headerlink" title="3.5 基于RBAC的案例"></a>3.5 基于RBAC的案例</h2><h3 id="1-数据库准备"><a href="#1-数据库准备" class="headerlink" title="1. 数据库准备"></a>1. 数据库准备</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_user;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_user</span><br><span class="line">(</span><br><span class="line">    id       <span class="type">bigint</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    username <span class="type">varchar</span>(<span class="number">32</span>)   <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户名称&#x27;</span>,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">120</span>)  <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;密码&#x27;</span>,</span><br><span class="line">    status   <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span> <span class="keyword">null</span> comment <span class="string">&#x27;1开启0关闭&#x27;</span></span><br><span class="line">    ) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">    <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="string">&#x27;用户表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(id,username,password,status)<span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>,<span class="string">&#x27;&#123;noop&#125;123&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user(id,username,password,status)<span class="keyword">values</span>(<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="string">&#x27;&#123;noop&#125;123&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 角色表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_role;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_role</span><br><span class="line">(</span><br><span class="line">    id        <span class="type">bigint</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    role_name <span class="type">varchar</span>(<span class="number">20</span>) comment <span class="string">&#x27;角色名称&#x27;</span></span><br><span class="line">    ) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">    <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="string">&#x27;角色表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role(id, role_name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role(id, role_name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;tom&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户角色关系表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_user_role;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_user_role</span><br><span class="line">(</span><br><span class="line">    user_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;用户编号&#x27;</span>,</span><br><span class="line">    role_id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (user_id, role_id)</span><br><span class="line">    ) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">    <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="string">&#x27;用户-角色关系表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_role(user_id, role_id) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_role(user_id, role_id) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_user_role(user_id, role_id) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 权限表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_permission;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_permission</span><br><span class="line">(</span><br><span class="line">    id        <span class="type">int</span> auto_increment comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">    parent_id <span class="type">bigint</span> comment <span class="string">&#x27;上级ID&#x27;</span>,</span><br><span class="line">    name      <span class="type">varchar</span>(<span class="number">30</span>) comment <span class="string">&#x27;菜单名称&#x27;</span>,</span><br><span class="line">    path      <span class="type">varchar</span>(<span class="number">100</span>) comment <span class="string">&#x27;菜单地址&#x27;</span>,</span><br><span class="line">    <span class="keyword">primary</span> key (id)</span><br><span class="line">    ) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">    <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="string">&#x27;权限表&#x27;</span>;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="number">0</span>,<span class="string">&#x27;emp&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="number">1</span>,<span class="string">&#x27;emp&#x27;</span>,<span class="string">&#x27;emp:add&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="number">1</span>,<span class="string">&#x27;emp&#x27;</span>,<span class="string">&#x27;emp:edit&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">4</span>,<span class="number">1</span>,<span class="string">&#x27;emp&#x27;</span>,<span class="string">&#x27;emp:update&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">5</span>,<span class="number">0</span>,<span class="string">&#x27;dept&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">6</span>,<span class="number">5</span>,<span class="string">&#x27;dept&#x27;</span>,<span class="string">&#x27;dept:add&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">7</span>,<span class="number">5</span>,<span class="string">&#x27;dept&#x27;</span>,<span class="string">&#x27;dept:edit&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_permission(id, parent_id, name, path) <span class="keyword">VALUES</span> (<span class="number">8</span>,<span class="number">5</span>,<span class="string">&#x27;dept&#x27;</span>,<span class="string">&#x27;dept:update&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tb_role_per;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tb_role_per</span><br><span class="line">(</span><br><span class="line">    role_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;角色编号&#x27;</span>,</span><br><span class="line">    per_id <span class="type">bigint</span> <span class="keyword">not</span> <span class="keyword">null</span> comment <span class="string">&#x27;权限编号&#x27;</span></span><br><span class="line">)ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">    <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 COMMENT <span class="string">&#x27;权限表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">7</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_role_per (role_id, per_id) <span class="keyword">values</span> (<span class="number">2</span>,<span class="number">8</span>);</span><br></pre></td></tr></table></figure><h3 id="2-实体类"><a href="#2-实体类" class="headerlink" title="2. 实体类"></a>2. 实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Boolean status;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Role&gt; roles;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Role</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String roleName;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Permission&gt; permissions;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Permission</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> Long parentId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-基于Mybatis实现"><a href="#3-基于Mybatis实现" class="headerlink" title="3. 基于Mybatis实现"></a>3. 基于Mybatis实现</h3><ul><li><p>mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    User <span class="title function_">selectUserInfo</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RoleMapper</span> &#123;</span><br><span class="line">    Set&lt;Role&gt; <span class="title function_">selectRoleByUserId</span><span class="params">(<span class="meta">@Param(&quot;userId&quot;)</span> Long userId)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PermissionMapper</span> &#123;</span><br><span class="line">    Set&lt;Permission&gt; <span class="title function_">selectPermissionByRoleId</span><span class="params">(<span class="meta">@Param(&quot;roleId&quot;)</span> Long roleId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- User selectUserInfo(@Param(&quot;username&quot;) String username); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;BaseUser&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.security.single.shop.pojo.po.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;password&quot;</span> <span class="attr">column</span>=<span class="string">&quot;password&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;status&quot;</span> <span class="attr">column</span>=<span class="string">&quot;status&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;roles&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.security.single.shop.mapper.RoleMapper.selectRoleByUserId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;&#123;userId=id&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectUserInfo&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;BaseUser&quot;</span>&gt;</span></span><br><span class="line">    select id,username,password,status</span><br><span class="line">    from tb_user tu</span><br><span class="line">    where tu.username = #&#123;username&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Set&lt;Role&gt; selectRoleByUserId(@Param(&quot;userId&quot;) Long userId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;Role&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.security.single.shop.pojo.po.Role&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;roleName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;role_name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;permissions&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">select</span>=<span class="string">&quot;com.security.single.shop.mapper.PermissionMapper.selectPermissionByRoleId&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">column</span>=<span class="string">&quot;&#123;roleId=id&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectRoleByUserId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;Role&quot;</span>&gt;</span></span><br><span class="line">    select tr.id,</span><br><span class="line">    tr.role_name</span><br><span class="line">    from tb_user_role tur</span><br><span class="line">    left join tb_role tr on tur.role_id = tr.id</span><br><span class="line">    where tur.user_id = #&#123;userId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Set&lt;Permission&gt; selectPermissionByRoleId(@Param(&quot;roleId&quot;) Long roleId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;Permission&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.security.single.shop.pojo.po.Permission&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;parentId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;parent_id&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;path&quot;</span> <span class="attr">column</span>=<span class="string">&quot;path&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPermissionByRoleId&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;Permission&quot;</span>&gt;</span></span><br><span class="line">    select tp.id,</span><br><span class="line">    tp.parent_id,</span><br><span class="line">    tp.name,</span><br><span class="line">    tp.path</span><br><span class="line">    from tb_role_per trp</span><br><span class="line">    left join tb_permission tp on tp.id = trp.per_id</span><br><span class="line">    where trp.role_id = #&#123;roleId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-将查询结果封装"><a href="#4-将查询结果封装" class="headerlink" title="4. 将查询结果封装"></a>4. 将查询结果封装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermissionDTO</span> <span class="keyword">implements</span> <span class="title class_">GrantedAuthority</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String authority;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PermissionDTO</span><span class="params">(String authority)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authority = authority;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAuthority</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.authority;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;PermissionDTO&gt; permission;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">buildUserDTO</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">dto</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserDTO</span>();</span><br><span class="line">        dto.setUsername(user.getUsername());</span><br><span class="line">        dto.setPassword(user.getPassword());</span><br><span class="line">        Set&lt;PermissionDTO&gt; pers = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Role role : user.getRoles()) &#123;</span><br><span class="line">            pers.add(<span class="keyword">new</span> <span class="title class_">PermissionDTO</span>(role.getRoleName()));</span><br><span class="line">            <span class="keyword">for</span> (Permission permission : role.getPermissions()) &#123;</span><br><span class="line">                pers.add(<span class="keyword">new</span> <span class="title class_">PermissionDTO</span>(permission.getPath()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dto.setPermission(pers);</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 省略基本接口实现以及get/set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-认证成功"><a href="#5-认证成功" class="headerlink" title="5. 认证成功"></a>5. 认证成功</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">UserServiceAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserManager userManager;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserServiceImpl</span><span class="params">(UserManager userManager)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userManager = userManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        AssertUtil.of(log).notNull(username, DataEnum.BASIC_ERROR, <span class="string">&quot;用户名&#123;&#125;异常&quot;</span>, username);</span><br><span class="line">        <span class="keyword">return</span> userManager.loadUserAuthorize(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-权限注解"><a href="#6-权限注解" class="headerlink" title="6. 权限注解"></a>6. 权限注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用方法级别的权限注解功能</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true, jsr250Enabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigure</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span>&#123;</span><br><span class="line">    <span class="comment">// ... ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在Controller类中进行权限控制</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasRole(&#x27;ROLE_admin&#x27;)&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;hasAuthority(&#x27;emp:add&#x27;)&quot;)</span></span><br></pre></td></tr></table></figure><h1 id="第四章-OAuth2认证与授权"><a href="#第四章-OAuth2认证与授权" class="headerlink" title="第四章 OAuth2认证与授权"></a>第四章 OAuth2认证与授权</h1><h2 id="4-1-OAuth2协议"><a href="#4-1-OAuth2协议" class="headerlink" title="4.1 OAuth2协议"></a>4.1 OAuth2协议</h2><h3 id="1-OAuth2说明"><a href="#1-OAuth2说明" class="headerlink" title="1. OAuth2说明"></a>1. OAuth2说明</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>OAuth2是一个开源协议，是一个开放标准，允许用户授权第三方网站访问他们存储在另外的服务提供者上的信息，而不需要将用户名和密码提供给第三方网站或分享他们数据的所有内容。</p><blockquote><p>为了方便理解，联想一个使用场景：拼多多开发的电商服务，消费者想要用自己的微信登陆拼多多，但是不能告诉拼多多自己的微信密码；微信提供了基于OAuth2协议的服务器解决第三方认证的问题：拼多多在微信授权服务器上注册为一个服务商；当用户用微信登陆拼多多时候，拼多多会将用户导向微信的授权页面，用户在微信的授权页面完成登录，得到一个授权码返回给拼多多，拼多多拿着授权码去微信认证服务器获取资源访问的TOKEN，微信根据授权码发给拼多多的一个资源访问TOKEN，拼多多就可以拿着TOKEN去访问微信的信息了；</p></blockquote><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>分布式系统：在早期的系统应用是一个单体应用，在应用中集成了所有模块的所有功能；在服务系统演化过程中单体应用中或根据功能模块拆分为多个单体应用，这些被拆分的单体应用被成为分布式系统；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>分布式系统认证：在分布式系统中每个应用服务都需要对访问者进行认证，面临的问题是在一个应用中认证的认证信息无法同步到其他应用中，导致用户访问其他应用也需要认证，提高系统的使用复杂度；所以分布式认证系统的主要功能是只需要认证一次，认证成功后的认证信息在所有分布式系统之都有效</p><h3 id="2-OAuth2角色说明"><a href="#2-OAuth2角色说明" class="headerlink" title="2. OAuth2角色说明"></a>2. OAuth2角色说明</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在传统的client-server认证模型中，客户端通过提供资源所有者的凭证来请求服务器访问一个受限制的资源（受保护的资源）。为了让第三方应用可以访问这些受限制的资源，资源所有者共享他的凭证给第三方应用。总结OAuth2中的角色：</p><ul><li><strong>authorization server（授权/认证服务器）</strong>：最核心的服务器，验证客户端和资源所有者，发放Token</li><li><strong>resource server（资源服务器）</strong>：验证令牌，提供HTTP接口供外部进行资源访问</li><li><strong>resource owner（资源所有者）</strong>：保存在资源服务器上的资源所有者</li><li><strong>client（客户端）</strong>：相对认证服务器而言，客户端也称第三方服务器，需要拿着用户的授权去认证服务器上获取Token，并用Token访问资源服务器获取资源；</li></ul><h3 id="3-oauth2授权模式"><a href="#3-oauth2授权模式" class="headerlink" title="3. oauth2授权模式"></a>3. oauth2授权模式</h3><ul><li><p>OAuth2基础的流程图</p><img src="https://s3.ax1x.com/2021/01/05/sACHgA.png" alt="sACHgA.png" border="0" /></li><li><p>根据第二步用户同意授权的方式，OAuth2的授权模型分为四种</p><ul><li><p>授权码模式（authorization code）：①用户访问第三方应用②后者将用户导向认证服务器③认证成功后认证服务器重定向到第三方应用并携带授权码参数④第三方应用根据根据自身信息和授权码申请令牌⑤认证服务器验证授权码发放令牌⑥第三方应用使用临牌访问资源服务器数据；</p><img src='https://s3.ax1x.com/2021/01/03/s9aYfs.png'/></li><li><p>简化模式（implicit）：简化模式是对授权码模式的简化，①用户访问第三方应用②后者将用户导向认证服务器③用户同意授权后认证服务器直接将令牌发放给第三方应用；</p></li><li><p>密码模式（resource owner password credentials）：用户向客户端提供自己的用户名和密码。客户端使用这些信息，向”服务商提供商”索要授权。</p></li><li><p>客户端模式（client credentials）：指客户端以自己的名义，而不是以用户的名义，向”服务提供商”进行认证。严格地说，客户端模式并不属于OAuth框架所要解决的问题。</p></li></ul></li></ul><h2 id="4-2-SecurityOAuth2基础"><a href="#4-2-SecurityOAuth2基础" class="headerlink" title="4.2 SecurityOAuth2基础"></a>4.2 SecurityOAuth2基础</h2><h3 id="1-Maven依赖"><a href="#1-Maven依赖" class="headerlink" title="1. Maven依赖"></a>1. Maven依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>SpringCloud提供了oauth2分布式认证解决方案，SecurityCloudOAuth2用于解决分布式认证</p></blockquote><h3 id="2-SecurityOAuth2-API"><a href="#2-SecurityOAuth2-API" class="headerlink" title="2. SecurityOAuth2 API"></a>2. SecurityOAuth2 API</h3><blockquote><p>总结</p><ol><li>redirect_uri：参数只能implicit模式和authorization_code模式使用</li><li>客户端必须要注册一个redirect_uri参数</li></ol></blockquote><h4 id="oauth-authorize"><a href="#oauth-authorize" class="headerlink" title="/oauth/authorize"></a>/oauth/authorize</h4><ul><li><p>授权码模式：</p><table><thead><tr><th align="center">请求方式</th><th>GET</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td><code>http://localhost:8083/oauth/authorize?client_id=c1&amp;response_type=code&amp;scope=all&amp;redirect_uri=http://localhost:8082/auth/code</code></td></tr><tr><td align="center"><strong>请求参数</strong></td><td>response_type=code：表示是授权码模式 <br />client_id：客户端ID <br />scope： <br />redirect_uri：</td></tr></tbody></table></li><li><p>简化模式</p><table><thead><tr><th>请求范式</th><th>GET</th></tr></thead><tbody><tr><td>请求URL</td><td><code>http://localhost:8083/oauth/authorize?response_type=token&amp;client_id=c1&amp;scope=all&amp;redirect_uri=http://localhost:8082/auth/code</code></td></tr><tr><td>请求参数</td><td>response_type=token：<br />client_id：客户端ID <br />scope： <br />redirect_uri：</td></tr></tbody></table></li></ul><h4 id="oauth-token"><a href="#oauth-token" class="headerlink" title="/oauth/token"></a>/oauth/token</h4><ul><li><p>授权码模式：</p><table><thead><tr><th align="center">请求方式</th><th>POST</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td>/oauth/token</td></tr><tr><td align="center"><strong>请求参数</strong></td><td>grant_type=authorization_code：<br />client_id：<br />client_secret：<br />redirect_uri：<br />code：</td></tr></tbody></table></li><li><p>简化模式</p><table><thead><tr><th align="center">请求方式</th><th>POST</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td>/oauth/token</td></tr><tr><td align="center"><strong>请求参数</strong></td><td></td></tr></tbody></table></li><li><p>密码模式</p><table><thead><tr><th align="center">请求方式</th><th>POST</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td>/oauth/token</td></tr><tr><td align="center"><strong>请求参数</strong></td><td>grant_type=password：<br />client_id：<br />client_secret：<br />username：<br />password：</td></tr></tbody></table></li><li><p>客户端模式</p><table><thead><tr><th align="center">请求方式</th><th>POST</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td>/oauth/token</td></tr><tr><td align="center"><strong>请求参数</strong></td><td>grant_type=client_credentials：<br />client_id：<br />client_secret</td></tr></tbody></table></li><li><p>刷新token</p><table><thead><tr><th align="center">请求方式</th><th>POST</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td>/oauth/token</td></tr><tr><td align="center"><strong>请求参数</strong></td><td>grant_type=refresh_token：<br />client_id：<br />client_secret：<br />refresh_token：</td></tr></tbody></table></li></ul><h4 id="oauth-check-token"><a href="#oauth-check-token" class="headerlink" title="/oauth/check_token"></a>/oauth/check_token</h4><ul><li><p>检查token</p><table><thead><tr><th align="center">请求方式</th><th>POST</th></tr></thead><tbody><tr><td align="center"><strong>请求URL</strong></td><td>/oauth/authorize</td></tr><tr><td align="center"><strong>请求参数</strong></td><td>client_id： scope： code： grant_type=authorization_code</td></tr></tbody></table></li></ul><h4 id="oauth-token-key"><a href="#oauth-token-key" class="headerlink" title="/oauth/token_key"></a>/oauth/token_key</h4><h4 id="oauth-confirm-access"><a href="#oauth-confirm-access" class="headerlink" title="/oauth/confirm_access"></a>/oauth/confirm_access</h4><h4 id="oauth-error"><a href="#oauth-error" class="headerlink" title="/oauth/error"></a>/oauth/error</h4><h3 id="3-SecurityOAuth2数据表"><a href="#3-SecurityOAuth2数据表" class="headerlink" title="3. SecurityOAuth2数据表"></a>3. SecurityOAuth2数据表</h3><ul><li><p>数据表概述</p><table><thead><tr><th>表名称</th><th>说明</th></tr></thead><tbody><tr><td>oauth_client_details</td><td>客户端信息表</td></tr><tr><td>oauth_client_token</td><td>客户端token记录表</td></tr><tr><td>oauth_access_token</td><td>客户端access_token记录表</td></tr><tr><td>oauth_refresh_token</td><td>刷新refresh_token记录表</td></tr><tr><td>oauth_code</td><td>授权码</td></tr><tr><td>ClientDetails</td><td></td></tr></tbody></table></li><li><p>官网GitHub维护SQL脚本：<a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql">GitHub</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oauth_client_details</span><br><span class="line">(</span><br><span class="line">    client_id               <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">PRIMARY</span> KEY comment <span class="string">&#x27;客户端的唯一标识&#x27;</span>,</span><br><span class="line">    resource_ids            <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;客户端可访问资源ids&#x27;</span>,</span><br><span class="line">    client_secret           <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;客户端密匙&#x27;</span>,</span><br><span class="line">    <span class="keyword">scope</span>                   <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;客户端申请的权限范围&#x27;</span>,</span><br><span class="line">    authorized_grant_types  <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;authorization_code,password,implicit,client_credentials,refresh_token&#x27;</span>,</span><br><span class="line">    web_server_redirect_uri <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;客户端的重定向URI&#x27;</span>,</span><br><span class="line">    authorities             <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;客户端所拥有的Spring Security的权限值&#x27;</span>,</span><br><span class="line">    access_token_validity   <span class="type">INTEGER</span> comment <span class="string">&#x27;access_token的有效时间值(单位:秒)&#x27;</span>,</span><br><span class="line">    refresh_token_validity  <span class="type">INTEGER</span> comment <span class="string">&#x27;refresh_token的有效时间值(单位:秒)&#x27;</span>,</span><br><span class="line">    additional_information  <span class="type">VARCHAR</span>(<span class="number">4096</span>) comment <span class="string">&#x27;预留,必须是json&#x27;</span>,</span><br><span class="line">    autoapprove             <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;是否自动Approval操作&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oauth_client_token</span><br><span class="line">(</span><br><span class="line">    authentication_id <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">PRIMARY</span> KEY comment <span class="string">&#x27;DefaultClientKeyGenerator生成的唯一值&#x27;</span>,</span><br><span class="line">    token_id          <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;access_token`的值&#x27;</span>,</span><br><span class="line">    token             <span class="type">blob</span> comment <span class="string">&#x27;OAuth2AccessToken对象序列化的二进制&#x27;</span>,</span><br><span class="line">    user_name         <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;登录时的用户名&#x27;</span>,</span><br><span class="line">    client_id         <span class="type">VARCHAR</span>(<span class="number">256</span>) comment <span class="string">&#x27;客户端ID&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oauth_access_token</span><br><span class="line">(</span><br><span class="line">    token_id          <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    token LONGVARBINARY,</span><br><span class="line">    authentication_id <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    user_name         <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    client_id         <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    authentication LONGVARBINARY,</span><br><span class="line">    refresh_token     <span class="type">VARCHAR</span>(<span class="number">256</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oauth_refresh_token</span><br><span class="line">(</span><br><span class="line">    token_id <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    token LONGVARBINARY,</span><br><span class="line">    authentication LONGVARBINARY</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oauth_code</span><br><span class="line">(</span><br><span class="line">    code <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    authentication LONGVARBINARY</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> oauth_approvals</span><br><span class="line">(</span><br><span class="line">    userId         <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    clientId       <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    <span class="keyword">scope</span>          <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    status         <span class="type">VARCHAR</span>(<span class="number">10</span>),</span><br><span class="line">    expiresAt      <span class="type">TIMESTAMP</span>,</span><br><span class="line">    lastModifiedAt <span class="type">TIMESTAMP</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- customized oauth_client_details table</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ClientDetails</span><br><span class="line">(</span><br><span class="line">    appId                  <span class="type">VARCHAR</span>(<span class="number">256</span>) <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    resourceIds            <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    appSecret              <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    <span class="keyword">scope</span>                  <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    grantTypes             <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    redirectUrl            <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    authorities            <span class="type">VARCHAR</span>(<span class="number">256</span>),</span><br><span class="line">    access_token_validity  <span class="type">INTEGER</span>,</span><br><span class="line">    refresh_token_validity <span class="type">INTEGER</span>,</span><br><span class="line">    additionalInformation  <span class="type">VARCHAR</span>(<span class="number">4096</span>),</span><br><span class="line">    autoApproveScopes      <span class="type">VARCHAR</span>(<span class="number">256</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-SecurityOAuth2运行原理"><a href="#4-SecurityOAuth2运行原理" class="headerlink" title="4. SecurityOAuth2运行原理"></a>4. SecurityOAuth2运行原理</h3><ul><li><p>SecurityOAuth2执行流程：</p><img src="https://s3.ax1x.com/2021/01/05/sAAteI.png" alt="sAAteI.png" border="0" /></li><li><p>SecurityOauth2改造方案：用户名密码（验证码）、手机短信、JWT：</p><img src="https://s3.ax1x.com/2021/01/05/sAEgjH.png" alt="sAEgjH.png" border="0" /></li></ul><h2 id="4-3-SecurityOAuth2认证服务器"><a href="#4-3-SecurityOAuth2认证服务器" class="headerlink" title="4.3 SecurityOAuth2认证服务器"></a>4.3 SecurityOAuth2认证服务器</h2><h3 id="1-默认配置"><a href="#1-默认配置" class="headerlink" title="1. 默认配置"></a>1. 默认配置</h3><ul><li><p>首先认证服务器需要支持最基础的认证功能：①添加Security启动器②定义Security配置文件③为security制定一个认证用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ②定义Security配置文件</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(proxyTargetClass = true, prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ③为security制定一个认证用户</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">implements</span> <span class="title class_">UserDetailsService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDetails <span class="title function_">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(username,</span><br><span class="line">                <span class="string">&quot;&#123;noop&#125;root&quot;</span>,</span><br><span class="line">                <span class="literal">true</span>,</span><br><span class="line">                <span class="literal">true</span>,</span><br><span class="line">                <span class="literal">true</span>,</span><br><span class="line">                <span class="literal">true</span>,</span><br><span class="line">                AuthorityUtils.createAuthorityList(<span class="string">&quot;ROOT&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加SecurityOAuth2依赖并声明认证服务器配置：注解@EnableAuthorizationServer会向Spring容器注入认证相关配置类，具有了认证服务器的最基础的功能；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Oauth2Configurer</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @EnableAuthorizationServer 源码</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Import(&#123;AuthorizationServerEndpointsConfiguration.class, AuthorizationServerSecurityConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAuthorizationServer &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>查看源码默认会随机生成一个客户端，但是不会配置为客户端配置redirect_uri</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基于配置版的客户端的redirect_uri</span></span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">      <span class="attr">registered-redirect-uri:</span> <span class="string">http://localhost:8082/auth/code</span></span><br></pre></td></tr></table></figure></li><li><p>发送获取授权码请求/oauth/authorize：获取授权码，同意授权的用户是认证认证服务器获取的用户信息</p></li><li><p>发送获取令牌请求/oauth/token?grant_type=authorization_code：根据授权码获取令牌</p></li><li><p>检查token：/oauth/check_token?token=</p></li><li><p>要使用refresh_token的话，需要额外配置userDetailsService：/oauth/token?grant_type=refresh_token</p></li></ul><h3 id="2-默认配置修改"><a href="#2-默认配置修改" class="headerlink" title="2. 默认配置修改"></a>2. 默认配置修改</h3><ul><li><p>方式一默认的客户端数据是随机生成：如果只有一个客户端，可以将客户端基本信息在配置文件中指定</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">oauth2:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">      <span class="attr">client-id:</span> <span class="string">c1</span></span><br><span class="line">      <span class="attr">client-secret:</span> <span class="string">s1</span></span><br><span class="line">      <span class="attr">scope:</span> <span class="string">all,read,write</span></span><br><span class="line">      <span class="attr">grant-type:</span> <span class="string">authorization_code,password,implicit,client_credentials,refresh_token</span></span><br><span class="line">      <span class="attr">registered-redirect-uri:</span> <span class="string">http://localhost:8082/auth/code</span></span><br></pre></td></tr></table></figure></li><li><p>发送获取令牌请求：根据授权码获取令牌同上</p></li></ul><h3 id="3-配置-基于内存"><a href="#3-配置-基于内存" class="headerlink" title="3. 配置-基于内存"></a>3. 配置-基于内存</h3><ul><li><p>方式二基于配置的客户端只能配置一个，可以在认证服务器配置类中指定多个基于内存的客户端</p></li><li><p>首先认证服务器的authorization_code类型的认证需要依赖AuthenticationManager，所以在Security的配置文件中将AuthenticationManager注入到Spring容器中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(proxyTargetClass = true, prePostEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebSecurityConfigurer</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthenticationManager <span class="title function_">authenticationManager</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.authenticationManager();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>SecurityOAuth2配置类配置详解：一</p></li></ul><h3 id="4-配置-基于数据库"><a href="#4-配置-基于数据库" class="headerlink" title="4. 配置-基于数据库"></a>4. 配置-基于数据库</h3><h3 id="5-配置-jwt"><a href="#5-配置-jwt" class="headerlink" title="5. 配置-jwt"></a>5. 配置-jwt</h3><h3 id="6-配置-自定义"><a href="#6-配置-自定义" class="headerlink" title="6. 配置-自定义"></a>6. 配置-自定义</h3><h2 id="4-4-SecurityOAuth2资源服务器"><a href="#4-4-SecurityOAuth2资源服务器" class="headerlink" title="4.4 SecurityOAuth2资源服务器"></a>4.4 SecurityOAuth2资源服务器</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-SpringSecurity&quot;&gt;&lt;a href=&quot;#第一章-SpringSecurity&quot; class=&quot;headerlink&quot; title=&quot;第一章 SpringSecurity&quot;&gt;&lt;/a&gt;第一章 SpringSecurity&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java框架" scheme="http://yoursite.com/tags/Java%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>0505-Hibernate</title>
    <link href="http://yoursite.com/2005/05/01/0505-Hibernate/"/>
    <id>http://yoursite.com/2005/05/01/0505-Hibernate/</id>
    <published>2005-04-30T16:04:00.000Z</published>
    <updated>2022-04-09T00:10:10.908Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><p><strong>学习准备</strong></p><ul><li>MySQL安装与使用</li><li>Maven安装与使用</li><li>JDBC知识</li></ul></li><li><p><strong>ORM</strong>：ORM框架，全称为 Object_Relative DateBase-Mapping，在Java对象与关系数据库之间建立某种映射，以实现直接存取Java对象，解决了对象和关系型数据库之间的数据交互问题。</p><table><thead><tr><th>数据库</th><th>类/对象</th></tr></thead><tbody><tr><td>表（table）</td><td>类（class）</td></tr><tr><td>表中的记录（record，也称行）</td><td>对象（object）</td></tr><tr><td>表中的字段（field，也称列）</td><td>对象中的属性（attribute</td></tr></tbody></table><blockquote><p>使用面向对象编程时，数据很多时候都存储在对象里面，具体来说是存储在对象的各个属性（也称成员变量）中，当我们需要把对象中的数据存储到数据库时，按照传统思路，就得手动编写 SQL 语句，将对象的属性值提取到 SQL 语句中，然后再调用相关方法执行 SQL 语句；有了 ORM 技术以后，只要提前配置好对象和数据库之间的映射关系，ORM 就可以自动生成 SQL 语句，并将对象中的数据自动存储到数据库中</p></blockquote></li><li><p><strong>常用ORM框架</strong></p><ul><li>HIbernate</li><li>SpringBootJpa</li><li>SpringBootJdbc</li><li>MyBatis</li></ul></li><li><p><strong>Java面向对象：对象之间关系</strong></p><ul><li>依赖关系: 相互离开不能编译</li><li>聚合关系：（从业务的关系理解）整体和部分，单独也可以存在</li><li>组合关系：（从业务的关系理解）是一种强聚合，不可独立存在</li><li>泛化关系：继承关系</li><li>关联关系:是依赖关系的一种，一个是另一个的属性<ul><li>多重性：一对一、一对多、多对一、多对多</li><li>导航性：单向、多向</li></ul></li></ul></li></ol><h1 id="第一部分-Xml配置Hibernate"><a href="#第一部分-Xml配置Hibernate" class="headerlink" title="第一部分 Xml配置Hibernate"></a>第一部分 Xml配置Hibernate</h1><h2 id="第一章-Hibernate概述"><a href="#第一章-Hibernate概述" class="headerlink" title="第一章 Hibernate概述"></a>第一章 Hibernate概述</h2><h3 id="1-1-Hibernate入门"><a href="#1-1-Hibernate入门" class="headerlink" title="1.1 Hibernate入门"></a>1.1 Hibernate入门</h3><ol><li><p>新建Maven项目，提那家Hibernate依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.5.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建Java对象，然后添加Hibernate的数据库配置后会根据对象自动生成数据表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> Long cardId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Date gmtCreate;</span><br><span class="line">    <span class="keyword">private</span> Date gmtModify;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目resources目录根下创建Hibernate的主配置文件：<strong>hibernate.cfg.xml</strong>（默认配置文件的名称），添加Hibernate基本配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-configuration</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Configuration DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通常，一个session-factory节点代表一个数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 1. 数据库连接配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.driver_class&quot;</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.url&quot;</span>&gt;</span>jdbc:mysql://localhost:3306/xlxs_jap<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.username&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.connection.password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 数据库方法配置， hibernate在运行的时候，会根据不同的方言生成符合当前数据库语法的sql--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.dialect&quot;</span>&gt;</span>org.hibernate.dialect.MySQL8Dialect<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2. 其他相关配置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.1 显示hibernate在运行时候执行的sql语句 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.show_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.2 格式化sql --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.format_sql&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 2.3 自动建表  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hibernate.hbm2ddl.auto&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>给刚才创建的Java对象<code>Person01</code>添加映射配置文件，约定的映射配置文件名称为：<strong>Xxx.hmb.xml</strong>，如<code>Person01.hbm.xml</code>；ORM映射配置文件统一管理在resources的指定子目录下，方便管理；在映射文件中添加如下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">hibernate-mapping</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;-//Hibernate/Hibernate Mapping DTD 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">package</span>=<span class="string">&quot;com.jpa.hibernate.entity&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Person01&quot;</span> <span class="attr">lazy</span>=<span class="string">&quot;true&quot;</span> <span class="attr">table</span>=<span class="string">&quot;person01&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;uuid&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cardId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;card_id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gmtCreate&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gmt_create&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;gmtModify&quot;</span> <span class="attr">column</span>=<span class="string">&quot;gmt_modify&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>将Hibernate对象映射文件<code>Person01.hbm.xml</code>交给Hibernate管理，在Hibernate的主配置文件中添加mapping配置，需要定义在property配置的后面</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--加载映射配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;hibernate/mapping/Person01.hbm.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写测试类读取配置文件（默认读取根目录hibernate.cfg.xml文件），调用Hibernate的API创建数据表并存储对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jpa.hibernate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.jpa.hibernate.entity.Person01;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Session;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.SessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.Transaction;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.MetadataSources;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistry;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.boot.registry.StandardServiceRegistryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.cfg.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person00InitTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用HibernateAPI加载配置文件，生成数据表并新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInitType01</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取加载配置管理类</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">//不给参数就默认加载hibernate.cfg.xml文件，</span></span><br><span class="line">        configuration.configure();</span><br><span class="line">        <span class="comment">//创建Session工厂对象</span></span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> configuration.buildSessionFactory();</span><br><span class="line">        <span class="comment">//得到Session对象</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="comment">//使用Hibernate操作数据库，都要开启事务,得到事务对象</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.getTransaction();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        transaction.begin();</span><br><span class="line">        <span class="comment">//把对象添加到数据库中</span></span><br><span class="line">        <span class="type">Person01</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person01</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person.setCardId(<span class="number">1001L</span>);</span><br><span class="line">        person.setGmtCreate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        person.setGmtModify(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.save(person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        <span class="comment">//关闭Session</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用Hibernate 4.2版本的API加载配置文件，生成数据表并新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInitType02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StandardServiceRegistry</span> <span class="variable">sr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StandardServiceRegistryBuilder</span>().configure().build();</span><br><span class="line">        <span class="type">SessionFactory</span> <span class="variable">fa</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MetadataSources</span>(sr).buildMetadata().buildSessionFactory();</span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> fa.openSession();</span><br><span class="line">        <span class="comment">//使用Hibernate操作数据库，都要开启事务,得到事务对象</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.getTransaction();</span><br><span class="line">        <span class="comment">//开启事务</span></span><br><span class="line">        transaction.begin();</span><br><span class="line">        <span class="type">Person01</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person01</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        person.setCardId(<span class="number">1001L</span>);</span><br><span class="line">        person.setGmtCreate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        person.setGmtModify(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        session.save(person);</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">        <span class="comment">//关闭Session</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2-入门配置说明"><a href="#1-2-入门配置说明" class="headerlink" title="1.2 入门配置说明"></a>1.2 入门配置说明</h3><ol><li><strong>hibernate.cfg.xml</strong>：</li><li><strong>Xxx.hbm.xml</strong>：</li><li><strong>SessionFactory</strong>：</li><li><strong>Session</strong>：</li><li><strong>Transaction</strong>：</li></ol><h2 id="第二章-Hibernate基础"><a href="#第二章-Hibernate基础" class="headerlink" title="第二章 Hibernate基础"></a>第二章 Hibernate基础</h2><h3 id="2-0-基础操作准备"><a href="#2-0-基础操作准备" class="headerlink" title="2.0 基础操作准备"></a>2.0 基础操作准备</h3><ol><li><p>新增Base测试类，用于加载配置文件，创建Session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseTest</span> &#123;</span><br><span class="line">    SessionFactory sessionFactory;</span><br><span class="line">    Session session;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBefore</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//加载 Hibernate 核心配置文件</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>().configure();</span><br><span class="line">        <span class="comment">//创建一个 SessionFactory 用来获取 Session 连接对象</span></span><br><span class="line">        sessionFactory = configuration.buildSessionFactory();</span><br><span class="line">        <span class="comment">//获取session 连接对象</span></span><br><span class="line">        session = sessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAfter</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        sessionFactory.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后自定义测试类继承BaseTest，可以在测试类中直接使用session对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01Person</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line"><span class="comment">// TODO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-1-单对象基本操作"><a href="#2-1-单对象基本操作" class="headerlink" title="2.1 单对象基本操作"></a>2.1 单对象基本操作</h3><ol><li><p>新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01Test</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//开始事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">        <span class="comment">//创建实体对象</span></span><br><span class="line">        <span class="type">Person01</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person01</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;新增数据&quot;</span>);</span><br><span class="line">        person.setCardId(<span class="number">1001L</span>);</span><br><span class="line">        person.setGmtCreate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        person.setGmtModify(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.save(person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// SQL执行日志</span></span><br><span class="line">Hibernate: insert into <span class="title function_">person01</span> <span class="params">(name, card_id, gmt_create, gmt_modify, id)</span> values (?, ?, ?, ?, ?)</span><br></pre></td></tr></table></figure></li><li><p>修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01Test</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//开始事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">        <span class="comment">//现将需要修改的记录查询出来</span></span><br><span class="line">        <span class="type">Person01</span> <span class="variable">user</span> <span class="operator">=</span> session.get(Person01.class, <span class="string">&quot;ff8080817f9a7a82017f9a7a85190000&quot;</span>);</span><br><span class="line">        <span class="comment">//设置需要修改的字段</span></span><br><span class="line">        user.setName(<span class="string">&quot;更新用户名&quot;</span>);</span><br><span class="line">        <span class="comment">//直接调用 update() 方法进行修改</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.update(user);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SQL执行日志</span></span><br><span class="line">Hibernate: select person01x0_.id as id1_0_0_, person01x0_.name as name2_0_0_, person01x0_.card_id as card_id3_0_0_, person01x0_.gmt_create as gmt_crea4_0_0_, person01x0_.gmt_modify as gmt_modi5_0_0_ from person01 person01x0_ where person01x0_.id=?</span><br><span class="line">Hibernate: update person01 set name=?, card_id=?, gmt_create=?, gmt_modify=? where id=?</span><br></pre></td></tr></table></figure></li><li><p>删除：如果删除对象不存在会抛出异常OptimisticLockException</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01Test</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除记录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//开始事务</span></span><br><span class="line">        <span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.beginTransaction();</span><br><span class="line">        <span class="type">Person01</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person01</span>();</span><br><span class="line">        person.setId(<span class="string">&quot;ff8080817f9a7cf2017f9a7cf45e0000&quot;</span>);</span><br><span class="line">        <span class="comment">//删除指定的记录</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            session.delete(person);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            transaction.rollback();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//提交事务</span></span><br><span class="line">        transaction.commit();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SQL执行日志</span></span><br><span class="line">Hibernate: delete from person01 where id=?</span><br></pre></td></tr></table></figure></li><li><p>HQL查询：Hibernate Query Language，它是一种面向对象的查询语言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01Test</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用HQL语法查询数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryHql</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建 HQL 语句，语法与 SQL 类似，但操作的是实体类及其属性</span></span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> session.createQuery(<span class="string">&quot;from Person01 where name like ?1&quot;</span>);</span><br><span class="line">        <span class="comment">//查询所有使用 163 邮箱的用户</span></span><br><span class="line">        query.setParameter(<span class="number">1</span>, <span class="string">&quot;%用户%&quot;</span>);</span><br><span class="line">        <span class="comment">//获取结果集</span></span><br><span class="line">        List&lt;Person01&gt; resultList = query.getResultList();</span><br><span class="line">        <span class="comment">//遍历结果集</span></span><br><span class="line">        <span class="keyword">for</span> (Person01 person : resultList) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SQL执行日志</span></span><br><span class="line">Hibernate: select person01x0_.id as id1_0_, person01x0_.name as name2_0_, person01x0_.card_id as card_id3_0_, person01x0_.gmt_create as gmt_crea4_0_, person01x0_.gmt_modify as gmt_modi5_0_ from person01 person01x0_ where person01x0_.name like ?</span><br></pre></td></tr></table></figure></li><li><p>QBC 查询：Query By Criteria，是一种完全面向对象（比 HQL 更加面向对象）的对数据库查询技术</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01Test</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用QBC 查询查询数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQbcQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获得 CriteriaBuilder 对象</span></span><br><span class="line">        <span class="type">CriteriaBuilder</span> <span class="variable">criteriaBuilder</span> <span class="operator">=</span> session.getCriteriaBuilder();</span><br><span class="line">        <span class="comment">//构建 CriteriaQuery 查询对象</span></span><br><span class="line">        CriteriaQuery&lt;Person01&gt; criteria = criteriaBuilder.createQuery(Person01.class);</span><br><span class="line">        <span class="comment">//添加查询条件</span></span><br><span class="line">        Root&lt;Person01&gt; from = criteria.from(Person01.class);</span><br><span class="line">        <span class="type">Predicate</span> <span class="variable">like</span> <span class="operator">=</span> criteriaBuilder.like(from.get(<span class="string">&quot;name&quot;</span>), <span class="string">&quot;%用户%&quot;</span>);</span><br><span class="line">        criteria.where(criteriaBuilder.and(like));</span><br><span class="line">        <span class="comment">//获取结果集</span></span><br><span class="line">        List&lt;Person01&gt; list = session.createQuery(criteria).getResultList();</span><br><span class="line">        <span class="comment">//遍历结果集</span></span><br><span class="line">        <span class="keyword">for</span> (Person01 person : list) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SQL执行日志</span></span><br><span class="line">Hibernate: select person01x0_.id as id1_0_, person01x0_.name as name2_0_, person01x0_.card_id as card_id3_0_, person01x0_.gmt_create as gmt_crea4_0_, person01x0_.gmt_modify as gmt_modi5_0_ from person01 person01x0_ where person01x0_.name like ?</span><br></pre></td></tr></table></figure></li><li><p>SQL 查询：支持使用原生的 SQL 语句对数据库进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person01Test</span> <span class="keyword">extends</span> <span class="title class_">BaseTest</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用 SQL 查询查询数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSqlQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//构建 sql 查询</span></span><br><span class="line">        <span class="type">NativeQuery</span> <span class="variable">sqlQuery</span> <span class="operator">=</span> session.createSQLQuery(<span class="string">&quot;select * from person01 where name like ?1&quot;</span>);</span><br><span class="line">        sqlQuery.addEntity(Person01.class);</span><br><span class="line">        sqlQuery.setParameter(<span class="number">1</span>,<span class="string">&quot;%用户%&quot;</span>);</span><br><span class="line">        <span class="comment">//获得结果集</span></span><br><span class="line">        List&lt;Person01&gt; resultList = sqlQuery.getResultList();</span><br><span class="line">        <span class="comment">//遍历结果集</span></span><br><span class="line">        <span class="keyword">for</span> (Person01 person : resultList) &#123;</span><br><span class="line">            System.out.println(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// SQL执行日志</span></span><br><span class="line">Hibernate: select * from person01 where name like ?</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-2-级联映射：多对一"><a href="#2-2-级联映射：多对一" class="headerlink" title="2.2 级联映射：多对一"></a>2.2 级联映射：多对一</h3><ol><li>单向级联映射</li><li>双向级联映射</li></ol><h3 id="2-3-级联映射：一对多"><a href="#2-3-级联映射：一对多" class="headerlink" title="2.3 级联映射：一对多"></a>2.3 级联映射：一对多</h3><ol><li>单向级联映射</li><li>双向级联映射</li></ol><h3 id="2-4-级联映射：多对多"><a href="#2-4-级联映射：多对多" class="headerlink" title="2.4 级联映射：多对多"></a>2.4 级联映射：多对多</h3><ol><li>单向级联映射</li><li>双向级联映射</li></ol><h3 id="2-5-级联映射：一对一"><a href="#2-5-级联映射：一对一" class="headerlink" title="2.5 级联映射：一对一"></a>2.5 级联映射：一对一</h3><ol><li>单向级联映射</li><li>双向级联映射</li></ol><h3 id="2-6-查询结果映射"><a href="#2-6-查询结果映射" class="headerlink" title="2.6 查询结果映射"></a>2.6 查询结果映射</h3><h2 id="第三章-Hibernate配置"><a href="#第三章-Hibernate配置" class="headerlink" title="第三章 Hibernate配置"></a>第三章 Hibernate配置</h2><h3 id="3-1-hibernate-cfg-xml"><a href="#3-1-hibernate-cfg-xml" class="headerlink" title="3.1 hibernate.cfg.xml"></a>3.1 hibernate.cfg.xml</h3><ol><li><p>Hibernate配置文件说明：主要用于配置数据库连接、事务管理、Hibernate 本身的配置信息以及 Hibernate 映射文件信息；该配置文件默认放在项目的 src 目录下，当项目发布后，该文件会在项目的 WEB-INF/classes 路径下；默认名称是hibernate.cfg.xml</p></li><li><p>Hibernate 核心配置文件的根元素是 <code>&lt;hibernate-configuration&gt;</code>，该元素中包含一个<code>&lt;session-factory&gt;</code> 子元素。</p><ul><li><p><strong><code>&lt;property&gt;</code>元素</strong>：用于配置 Hibernate 连接数据库的各种信息，例如，数据库的方言、驱动、URL、用户名、密码等。这些 property 属性中，有些是 Hibernate 的必需配置，有些则是可选配置</p><table><thead><tr><th>property 属性名</th><th>描述</th><th>必需</th></tr></thead><tbody><tr><td>connection.url</td><td>指定连接数据库 URL</td><td>是</td></tr><tr><td>hibernate.connection.username</td><td>指定数据库用户名</td><td>是</td></tr><tr><td>hibernate.connection.password</td><td>指定数据库密码</td><td>是</td></tr><tr><td>connection.driver_class</td><td>指定数据库驱动程序</td><td>是</td></tr><tr><td>hibernate.dialect</td><td>指定数据库使用的 SQL 方言，用于确定 Hibernate 自动生成的 SQL 语句的类型</td><td>是</td></tr><tr><td>hibernate.show_sql</td><td>用于设置是否在控制台输出 SQL 语句</td><td>否</td></tr><tr><td>hibernate.format_sql</td><td>用于设置是否格式化控制台输出的 SQL 语句</td><td>否</td></tr><tr><td>hibernate.hbm2ddl.auto</td><td>当创建 SessionFactory 时，是否根据映射文件自动验证表结构或自动创建、自动更新数据库表结构。 该参数的取值为 validate 、update、create 和 create-drop</td><td>否</td></tr><tr><td>hibernate.connection.autocommit</td><td>事务是否自动提交</td><td>否</td></tr></tbody></table></li><li><p><strong><code>&lt;mapping&gt;</code> 元素</strong>：用来指定 Hibernate 映射文件的信息，加载映射文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">&quot;net/biancheng/www/mapping/User.hbm.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-2-Xxx-hbm-xml"><a href="#3-2-Xxx-hbm-xml" class="headerlink" title="3.2 Xxx.hbm.xml"></a>3.2 Xxx.hbm.xml</h3><ol><li><p>Hibernate 映射文件用于在实体类对象与数据表之间建立映射关系，每个映射文件的结构基本相同</p></li><li><p><code>&lt;hibernate-mapping&gt;</code> 元素：是 Hibernate 映射文件的根元素，在该元素中定义的配置在整个映射文件中都有效。该元素中包含的常用属性如下表。</p><table><thead><tr><th>属性名</th><th>描述</th><th>必需</th></tr></thead><tbody><tr><td>schema</td><td>指定映射文件所对应的数据库名字空间</td><td>否</td></tr><tr><td>package</td><td>为映射文件对应的实体类指定包名</td><td>否</td></tr><tr><td>catalog</td><td>指定映射文件所对应的数据库目录</td><td>否</td></tr><tr><td>default-access</td><td>指定 Hibernate 用于访问属性时所使用的策略，默认为 property。<br />当 default-access=”property” 时，使用 getter 和 setter 方法访问成员变量；<br />当 default-access = “field”时，使用反射访问成员变量。</td><td>否</td></tr><tr><td>default-cascade</td><td>指定默认的级联风格</td><td>否</td></tr><tr><td>default-lazy</td><td>指定 Hibernate 默认使用的延迟加载策略</td><td>否</td></tr></tbody></table></li><li><p><code>&lt;class&gt;</code>元素：是 Hibernate 映射文件的根元素 <code>&lt;hibernate-mapping&gt;</code> 的子元素，它主要用来定义一个实体类与数据库表之间的映射关系，该元素中包含的常用属性如下表。</p><table><thead><tr><th>属性名</th><th>描述</th><th>必需</th></tr></thead><tbody><tr><td>name</td><td>实体类的完全限定名（包名+类名），若根元素 <hibernate-mapping> 中已经指定了 package 属性，则该属性可以省略包名</td><td>否</td></tr><tr><td>table</td><td>对应的数据库表名。</td><td>否</td></tr><tr><td>catalog</td><td>指定映射文件所对应的数据库 catalog 名称，若根元素 <hibernate-mapping> 中已经指定 catalog 属性，则该属性会覆盖根元素中的配置。</td><td>否</td></tr><tr><td>schema</td><td>指定映射文件所对应的数据库 schema 名称，若根元素 <hibernate-mapping> 中已经指定 schema 属性，则该属性会覆盖根元素中的配置。</td><td>否</td></tr><tr><td>lazy</td><td>指定是否使用延迟加载。</td><td>否</td></tr></tbody></table></li><li><p><code>&lt;id&gt;</code> 元素：通常情况下，Hibernate 推荐我们在持久化类（实体类）中定义一个标识属性，用于唯一地标识一个持久化实例（实体类对象），且标识属性需要映射到底层数据库的主键上。包含的常用属性如下表。</p><table><thead><tr><th>属性名</th><th>描述</th><th>必需</th></tr></thead><tbody><tr><td>name</td><td>与数据库表主键向对应的实体类的属性</td><td>否</td></tr><tr><td>column</td><td>数据库表主键的字段名</td><td>否</td></tr><tr><td>type</td><td>用于指定数据表中的字段需要转化的类型，这个类型既可以是 Hibernate 类型，也可以是 Java 类型</td><td>否</td></tr></tbody></table><blockquote><p>Hibernate 提供了以下 7 主键生成策略，如下表。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;integer&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--主键生成策略--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;native&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>主键策略</th><th>说明</th></tr></thead><tbody><tr><td>increment</td><td>自动增长策略之一，适合 short、int、long 等类型的字段。该策略不是使用数据库的自动增长机制，而是使用 Hibernate 框架提供的自动增长方式，即先从表中查询主键的最大值， 然后在最大值的基础上+1。该策略存在多线程问题，一般不建议使用。</td></tr><tr><td>identity</td><td>自动增长策略之一，适合 short、int、long 等类型的字段。该策略采用数据库的自动增长机制，但该策略不适用于 Oracle 数据库。</td></tr><tr><td>sequence</td><td>序列，适合 short、int、long 等类型的字段。该策略应用在支持序列的数据库，例如 Oracle 数据库，但不是适用于 MySQL 数据库。</td></tr><tr><td>uuid</td><td>适用于字符串类型的主键，采用随机的字符串作为主键。</td></tr><tr><td>native</td><td>本地策略，Hibernate 会根据底层数据库不同，自动选择适用 identity 还是 sequence 策略，该策略也是最常用的主键生成策略。</td></tr><tr><td>assigned</td><td>Hibernate 框架放弃对主键的维护，主键由程序自动生成。</td></tr><tr><td>foreign</td><td>主键来自于其他数据库表（应用在多表一对一的关系）。</td></tr></tbody></table></blockquote></li><li><p><code>&lt;property&gt;</code>元素：<code>&lt;class&gt;</code> 元素中可以包含一个或多个 <code>&lt;property&gt;</code> 子元素，它用于表示实体类的普通属性（除与数据表主键字段对应的属性之外的其他属性）和数据表中非主键字段的映射关系。该元素中包含的常用属性如下表。</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>实体类属性的名称</td></tr><tr><td>column</td><td>数据表字段名</td></tr><tr><td>type</td><td>用于指定数据表中的字段需要转化的类型，这个类型既可以是 Hibernate 类型，也可以是 Java 类型</td></tr><tr><td>length</td><td>数据表字段的长度</td></tr><tr><td>lazy</td><td>该属性使用延迟加载，默认值是 false</td></tr><tr><td>unique</td><td>是否对该字段使用唯一性约束。</td></tr><tr><td>not-null</td><td>是否允许该字段为空</td></tr></tbody></table></li></ol><h2 id="第四章-Hibernate规范"><a href="#第四章-Hibernate规范" class="headerlink" title="第四章 Hibernate规范"></a>第四章 Hibernate规范</h2><h3 id="4-1-Hibernate工作原理"><a href="#4-1-Hibernate工作原理" class="headerlink" title="4.1 Hibernate工作原理"></a>4.1 Hibernate工作原理</h3><ol><li><p>Hibernate执行SQL涉及到了 Configuration、SessionFactory、Session、Transaction 和 Query 等多个接口，这些接口的工作原理如下图</p><img src="https://s1.ax1x.com/2022/03/13/bbZWrt.png" alt="bbZWrt.png" border="0" /></li><li><p><strong>Hibernate工作流程</strong></p><ul><li>Hibernate 启动，Configruation 会读取并加载 Hibernate 核心配置文件和映射文件钟的信息到它实例对象中。</li><li>通过 Configuration 对象读取到的配置文件信息，创建一个 SessionFactory 对象，该对象中保存了当前数据库的配置信息、映射关系等信息。</li><li>通过 SessionFactory 对象创建一个 Session 实例，建立数据库连接。Session 主要负责执行持久化对象的增、删、改、查操作，创建一个 Session 就相当于创建一个新的数据库连接。</li><li>（<strong>查询方法不需要开启事务</strong>）通过 Session 对象创建 Transaction（事务）实例对象，并开启事务。Transaction 用于事务管理，一个 Transaction 对象对应的事务可以包含多个操作。需要注意的是，Hibernate 的事务默认是关闭的，需要手动开启和关闭。</li><li>Session 接口提供了各种方法，可以对实体类对象进行持久化操作（即对数据库进行操作），例如 get()、load()、save()、update()、saveOrUpdate() 等等，除此之外，Session 对象还可以创建Query 对象 或 NativeQuery 对象，分别使用 HQL 语句或原生 SQL 语句对数据库进行操作。</li><li>对实体对象持久化操作完成后，必须提交事务，若程序运行过程中遇到异常，则回滚事务。</li><li>关闭 Session 与 SessionFactory，断开与数据库的连接，释放资源。</li></ul></li></ol><h3 id="4-2-Hibernate核心接口"><a href="#4-2-Hibernate核心接口" class="headerlink" title="4.2 Hibernate核心接口"></a>4.2 Hibernate核心接口</h3><ol><li><p>Configuration：主要用于管理 Hibernate 配置信息，并在启动 Hibernate 应用时，创建 SessionFactory 实例，默认会在项目的类路径（CLASSPATH）中，搜索核心配置文件 hibernate.cfg.xml 并将其加载到内存中，作为后续操作的基础配置 。</p></li><li><p>SessionFactory：用来读取和解析映射文件，并负责创建和管理 Session 对象；SessionFactory 对象中保存了当前的数据库配置信息、所有映射关系以及 Hibernate 自动生成的预定义 SQL 语句，同时它还维护了 Hibernate 的二级缓存。一个 SessionFactory 实例对应一个数据库存储源，Hibernate 应用可以从 SessionFactory 实例中获取 Session 实例。SessionFactory 具有以下特点：</p><ul><li>SessionFactory 是线程安全的，它的同一个实例可以被应用多个不同的线程共享。</li><li>SessionFactory 是重量级的，不能随意创建和销毁它的实例。如果应用只访问一个数据库，那么在应用初始化时就只需创建一个 SessionFactory 实例；如果应用需要同时访问多个数据库，那么则需要为每一个数据库创建一个单独的 SesssionFactory 实例。</li></ul></li><li><p>Session：是 Hibernate 应用程序与数据库进行交互时，使用最广泛的接口，它也被称为 Hibernate 的持久化管理器，所有持久化对象必须在 Session 的管理下才可以进行持久化操作。持久化类只有与 Session 关联起来后，才具有了持久化的能力，Session 对象维护了 Hibernate 的一级缓存，在显式执行 flush 之前，所有的持久化操作的数据都缓存在 Session 对象中。Session 具有以下特点：</p><ul><li>不是线程安全的，因此应该避免多个线程共享同一个 Session 实例；</li><li>Session 实例是轻量级的，它的创建和销毁不需要消耗太多的资源。通常我们会将每一个Session 实例和一个数据库事务绑定，每执行一个数据库事务，不论执行成功与否，最后都因该调用 Session 的 Close() 方法，关闭 Session 释放占用的资源。</li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>save()</td><td>执行插入操作</td></tr><tr><td>update()</td><td>执行修改操作</td></tr><tr><td>saveOrUpdate()</td><td>根据参数，执行插入或修改操作</td></tr><tr><td>delete()</td><td>执行删除操作</td></tr><tr><td>get()</td><td>根据主键查询数据（立即加载）</td></tr><tr><td>load()</td><td>根据主键查询数据（延迟加载）</td></tr><tr><td>createQuery()</td><td>获取 Hibernate 查询对象</td></tr><tr><td>createSQLQuery()</td><td>获取 SQL 查询对象</td></tr></tbody></table></li><li><p>Transaction 是 Hibernate 提供的数据库事务管理接口，它对底层的事务接口进行了封装。所有的持久化操作（即使是只读操作）都应该在事务管理下进行，因此在进行 CRUD 持久化操作之前，必须获得 Trasaction 对象并开启事务。</p><ul><li><p>调用 Session 提供的 beginTransaction() 方法获取 Transaction 对象:根据 Session 获得一个 Transaction 对象，但是并没有开启事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transaction</span> <span class="variable">transaction</span> <span class="operator">=</span> session.beginTransaction();</span><br></pre></td></tr></table></figure></li><li><p>调用 Session 提供的 getTransaction() 方法获取 Transaction 对象是在根据 Session 获得一个 Transaction 对象后，又继续调用 Transaction 的 begin() 方法，开启了事务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Transaction</span> <span class="variable">transaction1</span> <span class="operator">=</span> session.getTransaction();</span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>begin()</td><td>该方法用于开启事务</td></tr><tr><td>commit()</td><td>该方法用于提交事务</td></tr><tr><td>rollback()</td><td>该方法用于回滚事务</td></tr></tbody></table></li><li><p>Query是 Hibernate 提供的查询接口，主要用执行 Hinernate 的查询操作。Query 对象中通常包装了一个 HQL（Hibernate Query Language）语句，HQL 语句与 SQL 语句存在相似之处，但 HQL 语句是面向对象的，它使用的是类名和类的属性名，而不是表名和表中的字段名。HQL 能够提供更加丰富灵活、更为强大的查询能力，因此 Hibernate 官方推荐使用 HQL 进行查询。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>setXxx()</td><td>Query 接口中提供了一系列 setXxx() 方法，用于设置查询语句中的参数。<br /> - 参数名或占位符位置、参数值。<br /> - 我们需要根据参数类型的不同，分别调用不同的 setXxx() 方法，<br /> - 例如 setString()、setInteger()、setLong()、setBoolean() 和 setDate() 等等。</td></tr><tr><td><code>Iterator&lt;R&gt; iterate()</code></td><td>该方法用于执行查询语句，并返回一个 Iterator 对象。<br />可以通过返回的 Iterator 对象，遍历得到结果集。</td></tr><tr><td><code>Object uniqueResult()</code></td><td>该方法用户执行查询，并返回一个唯一的结果。<br />使用该方法时，需要确保查询结果只有一条数据，否则就会报错。</td></tr><tr><td><code>int executeUpdate()</code></td><td>该方法用于执行 HQL 的更新和删除操作。</td></tr><tr><td><code>Query&lt;R&gt; setFirstResult(int var1)</code></td><td>该方法用户设置结果集第一条记录的位置，<br />即设置从第几条记录开始查询，默认从 0 开始。</td></tr><tr><td><code>Query&lt;R&gt; setMaxResults(int var1)</code></td><td>该方法用于设置结果集的最大记录数，通常与 setFirstResult() 方法结合使用，<br />用于限制结果集的范围，以实现分页功能。</td></tr></tbody></table></li></ol><h3 id="4-3-Hibernate对象状态"><a href="#4-3-Hibernate对象状态" class="headerlink" title="4.3 Hibernate对象状态"></a>4.3 Hibernate对象状态</h3><ol><li><p><strong>持久化类规范</strong>：</p><ul><li>持久化类中需要提供一个使用 public 修饰的无参构造器；</li><li>持久化类中需要提供一个标识属性 OID，与数据表主键字段向对应，例如实体类 User 中的 id 属性。为了保证 OID 的唯一性，OID 应该由 Hibernate 进行赋值，尽量避免人工手动赋值；</li><li>持久化类中所有属性（包括 OID）都要与数据库表中的字段相对应，且都应该符合 JavaBean 规范，即属性使用 private 修饰，且提供相应的 setter 和 getter 方法；</li><li>标识属性应尽量使用基本数据类型的包装类型，例如 Interger，目的是为了与数据库表的字段默认值 null 保持一致；</li><li>不能用 final 修饰持久化类。</li></ul></li><li><p>持久化对象的状态</p><table><thead><tr><th>状态</th><th>特点</th></tr></thead><tbody><tr><td>瞬时态（transient）<br /> - 临时态<br /> - 自由态</td><td>由 new 关键字开辟内存空间的对象（即使用 new 关键字创建的对象）<br /> - 没有唯一标识 OID；<br /> - 未与任何 Session 实例建立关联关系；<br /> - 数据库中也没有与之相关的记录；</td></tr><tr><td>持久态（persistent）</td><td>当对象加入到 Session 的一级缓存中时，与 Session 实例建立关联关系时<br />- 存在唯一标识 OID，且不为 null；<br /> - 已经纳入到 Session 中管理；<br /> - 数据库中存在对应的记录；<br /> - 持久态对象的任何属性值的改动，会在事务结束时同步到数据库表中。</td></tr><tr><td>脱管态（detached）<br /> - 离线态<br /> - 游离态</td><td>持久态对象与 Session 断开联系时<br /> - 存在唯一标识 OID；<br /> - 与 Session 断开关联关系，未纳入 Session 中管理；<br /> - 一旦有 Session 再次关联该脱管对象，那么该对象就可以立马变为持久状态；<br /> - 脱管态对象发生的任何改变，都不能被 Hibernate 检测到，更不能提交到数据库中。</td></tr></tbody></table></li></ol><h3 id="4-4-Hibernate缓存"><a href="#4-4-Hibernate缓存" class="headerlink" title="4.4 Hibernate缓存"></a>4.4 Hibernate缓存</h3><ol><li><p><strong>缓存概述</strong>：是位于应用程序和永久性数据存储源（例如硬盘上的文件或者数据库）之间，用于临时存放备份数据的内存区域，通过它可以降低应用程序读写永久性数据存储源的次数，提高应用程序的运行性能。缓存具有以下特点：</p><ul><li>缓存中的数据通常是数据库中数据的备份，两者中存放的数据完全一致，因此应用程序运行时，可以直接读写缓存中的数据，而不再对数据库进行访问，可以有效地降低应用程序对数据库的访问频率。</li><li>缓存的物理介质通常是内存，永久性数据存储源的物理介质为硬盘或磁盘，而应用程序读取内存的速度要明显高于硬盘，因此使用缓存能够有效的提高数据读写的速度，提高应用程序的性能。</li><li>由于应用程序可以修改（即“写”）缓存中的数据，为了保证缓存和数据库中的数据保持一致，应用程序通常会在在某些特定时刻，将缓存中的数据同步更新到数据库中。</li></ul></li><li><p><strong>Hibernate一级缓存</strong>：是 Session 级别的缓存，它是由 Hibernate 管理的，不可卸载。当使用 Hibernate 查询对象时，会首先从一级缓存中查找，若在一级缓存中找到了匹配的对象，则直接取出并使用；若没有在一级缓存中找到匹配的对象，则去数据库中查询对应的数据，并将查询到的数据添加到一级缓存中。Hibernate 一级缓存具有以下特点：</p><ul><li><p>一级缓存是 Hibernate 自带的，默认是开启状态，无法卸载。</p></li><li><p>Hibernate 一级缓存中只能保存持久态对象。</p></li><li><p>Hibernate 一级缓存的生命周期与 Session 保持一致，且一级缓存是 Session 独享的，每个 Session 不能访问其他的 Session 的缓存区，Session 一旦关闭或销毁，一级缓存中的所有对象将全部丢失。</p></li><li><p>当通过 Session 接口提供的 save()、update()、saveOrUpdate() 和 lock() 等方法，对对象进行持久化操作时，该对象会被添加到一级缓存中。</p></li><li><p>当通过 Session 接口提供的 get()、load() 方法，以及 Query 接口提供的 getResultList、list() 和 iterator() 方法，查询某个对象时，会首先判断缓存中是否存在该对象，如果存在，则直接取出来使用，而不再查询数据库；反之，则去数据库查询数据，并将查询结果添加到缓存中。</p></li><li><p>当调用 Session 的 close() 方法时，Session 缓存会被清空。</p></li><li><p>一级缓存中的持久化对象具有自动更新数据库能力。</p></li><li><p>一级缓存是由 Hibernate 维护的，用户不能随意操作缓存内容，但用户可以通过 Hibernate 提供的方法，来管理一级缓存中的内容，</p><table><thead><tr><th>返回值类型</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void</td><td>clear()</td><td>该方法用于清空一级缓存中的所有对象。</td></tr><tr><td>void</td><td>evict(Object var1)</td><td>该方法用于清除一级缓存中某一个对象。</td></tr><tr><td>void</td><td>flush() throws HibernateException</td><td>该方法用于刷出缓存，使数据库与一级缓存中的数据保持一致。</td></tr></tbody></table></li></ul></li><li><p><strong>Hibernate二级缓存</strong>：</p></li></ol><h2 id="第五章-Hibernate解析"><a href="#第五章-Hibernate解析" class="headerlink" title="第五章 Hibernate解析"></a>第五章 Hibernate解析</h2><h1 id="第二部分-Java配置Hibernate"><a href="#第二部分-Java配置Hibernate" class="headerlink" title="第二部分 Java配置Hibernate"></a>第二部分 Java配置Hibernate</h1><h1 id="第三部分-集成SpringBoot"><a href="#第三部分-集成SpringBoot" class="headerlink" title="第三部分 集成SpringBoot"></a>第三部分 集成SpringBoot</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;学习准备&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MySQL安装与使用&lt;/li&gt;
&lt;li&gt;Maven安
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>0505-Spring</title>
    <link href="http://yoursite.com/2005/05/01/0505-Spring/"/>
    <id>http://yoursite.com/2005/05/01/0505-Spring/</id>
    <published>2005-04-30T16:02:00.000Z</published>
    <updated>2022-04-09T00:10:10.909Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Spring"><a href="#第一章-Spring" class="headerlink" title="第一章 Spring"></a>第一章 Spring</h1><h2 id="1-1-Spring简介"><a href="#1-1-Spring简介" class="headerlink" title="1.1 Spring简介"></a>1.1 Spring简介</h2><ol><li><p><strong>Spring框架的核心</strong></p><ul><li>是抽取出来的高度可重用的代码, 多个可重用模块的集合, 形成：JavaEE领域的整体解决方案</li><li>Spring框架是是一个IOC和AOP的容器框架</li><li>Spring容器包含并且管理应用中的对象的关系以及生命周期</li></ul></li><li><p><strong>Spring技术栈</strong></p><table><thead><tr><th>Spring技术</th><th>功能说明</th></tr></thead><tbody><tr><td>spring farmwork</td><td>Spring核心</td></tr><tr><td>spring data</td><td>Spring数据支持</td></tr><tr><td>spring security</td><td>Spring安全认证</td></tr><tr><td>spring boot</td><td>Spring场景启动自动配置</td></tr><tr><td>spring cloud</td><td>Spring微服务解决方案</td></tr></tbody></table></li><li><p><strong>Spring优点</strong></p><ul><li><strong>为JavaEE开发提供了一站式的解决方案</strong> ：从基础的IOC容器，已经衍生为Cloud Native的基础设施</li><li><strong>非侵入</strong> : 用Spring开发的应用不依赖Spring的API</li><li><strong>依赖注入</strong> : 是对IOC思想的实现</li><li><strong>面向切面编程</strong> : 是对面向对象的扩展与增强</li><li><strong>轻量级</strong> : 可以把直接在Tomcat等符合Servlet规范的web服务器上的Java应用称为轻量级的应用</li><li><strong>模块化</strong> : 添加特定模块可以解决特定场景的功能 </li></ul></li></ol><h2 id="1-2-Spring模块划分"><a href="#1-2-Spring模块划分" class="headerlink" title="1.2 Spring模块划分"></a>1.2 Spring模块划分</h2><img src="https://s1.ax1x.com/2020/06/16/NiVHvd.png" alt="NiVHvd.png" border="0" /><table><thead><tr><th>spring 测试模块</th><th>测试组件说明</th></tr></thead><tbody><tr><td>spring-test</td><td>测试组件</td></tr></tbody></table><table><thead><tr><th>spring 核心</th><th>核心模块说明</th></tr></thead><tbody><tr><td>spring-beans</td><td>Bean工厂与装配</td></tr><tr><td>spring-core</td><td>核心模块 依赖注入IOC和DI的最基本实现</td></tr><tr><td>spring-context</td><td>上下文，即IOC容器</td></tr><tr><td>spring-context-support</td><td>对IOC的扩展，以及IOC子容器</td></tr><tr><td>spring-context-indexer</td><td>类管理组件和Classpath扫描</td></tr><tr><td>spring-expression</td><td>表达式语句</td></tr></tbody></table><table><thead><tr><th>spring AOP</th><th>切面编程说明</th></tr></thead><tbody><tr><td>spring-aop</td><td>面向切面编程，CGLB,JDKProxy</td></tr><tr><td>spring-aspects</td><td>集成AspectJ，Aop应用框架</td></tr><tr><td>spring-instrument</td><td>动态Class Loading模块</td></tr></tbody></table><table><thead><tr><th>spring Data</th><th>说明</th></tr></thead><tbody><tr><td>spring-jdbc</td><td>提供JDBC主要实现模块，用于简化JDBC操作</td></tr><tr><td>spring-orm</td><td>主要集成Hibernate,jpa,jdo等</td></tr><tr><td>spring-tx</td><td>spring-jdbc事务管理</td></tr><tr><td>spring-oxm</td><td>将java对象映射成xml数据或将xml映射为java对象</td></tr><tr><td>spring-jms</td><td>发送和接受消息</td></tr></tbody></table><table><thead><tr><th>spring web</th><th>说明</th></tr></thead><tbody><tr><td>spring-web</td><td>最基础的web支持，主要建立在核心容器上</td></tr><tr><td>spring-webmvc</td><td>实现了spring mvc的web应用</td></tr><tr><td>spring-websocket</td><td>主要与前端页的全双工通讯协议</td></tr><tr><td>spring-webflux</td><td>一个新的非阻塞函数式Reactive Web框架</td></tr></tbody></table><table><thead><tr><th>spring message</th><th>说明</th></tr></thead><tbody><tr><td>spring-messaging</td><td>主要集成基础报文传送应用</td></tr></tbody></table><table><thead><tr><th>spring Instrumentation</th><th>说明</th></tr></thead><tbody><tr><td>spring-instrument</td><td></td></tr></tbody></table><h2 id="1-3-Spring技术点"><a href="#1-3-Spring技术点" class="headerlink" title="1.3 Spring技术点"></a>1.3 Spring技术点</h2><table><thead><tr><th>概述</th><th>技术点</th></tr></thead><tbody><tr><td><strong>Java语言特性</strong></td><td>反射、动态代理、枚举、泛型、注解、ARM、Lambda语法</td></tr><tr><td><strong>设计模式与设计思想</strong></td><td>OOP、IoC、AOP、DDD、TDD、GOF23</td></tr><tr><td><strong>JavaAPI的分装与简化</strong></td><td>JDBC、Servlet、JPA、JMX、Bean、Validation</td></tr><tr><td><strong>第三方框架的整合</strong></td><td>Mybatis、Hibernate、Redis、SpringMVC</td></tr></tbody></table><h1 id="第二章-Spring-IOC"><a href="#第二章-Spring-IOC" class="headerlink" title="第二章 Spring IOC"></a>第二章 Spring IOC</h1><h1 id="第三章-Spring-AOP"><a href="#第三章-Spring-AOP" class="headerlink" title="第三章 Spring AOP"></a>第三章 Spring AOP</h1><h2 id="3-1-AOP概述"><a href="#3-1-AOP概述" class="headerlink" title="3.1 AOP概述"></a>3.1 AOP概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>AOP（Aspect Oriented Programming）是一种编程思想，其核心是在不破坏原有结构的基础上对需要增强的功能进行增强；AOP通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。是在OOP的基础上对OOP做的增强和扩展，并且可以做到对业务逻辑的隔离，降低代码的耦合；</p><ul><li><p><strong>AOP底层原理：代理模式</strong></p><ul><li>JDK动态代理</li><li>CGLIB动态代理</li></ul></li><li><p><strong>所需要依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.6.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-AOP术语"><a href="#3-2-AOP术语" class="headerlink" title="3.2 AOP术语"></a>3.2 AOP术语</h2><ul><li><strong>切点（PointCut）</strong>：就将要增强目标方法的执行过程中的关键点（方法执行前、方法执行后、抛出异常后等等）；</li><li><strong>连接点（Joinpoint)</strong>：切点的定义一个前后的范围，那么连接点就是要指定具体的某个方法的切点，由切点表达式指定；</li><li><strong>增强（Advice）</strong> ：切点由表达式定义好后，需要指定在这个连接点做什么样的增强以及执行是时机，增强的方式定义在一个方法中，在AOP中称为通知，通知方式如下：<ul><li><strong>前置通知(before)</strong>：在执行业务代码前做些操作，比如获取连接对象</li><li><strong>后置通知(after)</strong>：在执行业务代码后做些操作，无论是否发生异常，它都会执行，比如关闭连接对象</li><li><strong>异常通知（afterThrowing）</strong>：在执行业务代码后出现异常，需要做的操作，比如回滚事务</li><li><strong>返回通知(afterReturning)</strong>：在执行业务代码后无异常，会执行的操作</li><li><strong>环绕通知(around)</strong>：这个目前跟我们谈论的事务没有对应的操作，所以暂时不谈</li></ul></li><li><strong>切面（Aspect）</strong>：切面由切点和增强组成，它既包括了横切逻辑的定义，也包括了连接点的定义，SpringAOP就是将切面所定义的横切逻辑织入到切面所制定的连接点中。</li><li><strong>目标对象（Target）</strong>：需要被加强的业务对象</li><li><strong>织入（Weaving）</strong>：织入就是将增强添加到对目标类具体连接点上的过程。<br>织入是一个形象的说法，具体来说，就是生成代理对象并将切面内容融入到业务流程的过程。</li><li><strong>代理类（Proxy）</strong>：一个类被AOP织入增强后，就产生了一个代理类。</li></ul><h2 id="3-3-基于注解"><a href="#3-3-基于注解" class="headerlink" title="3.3 基于注解"></a>3.3 基于注解</h2><h3 id="1-Pointcut"><a href="#1-Pointcut" class="headerlink" title="1. @Pointcut"></a>1. @Pointcut</h3><ul><li><p><strong>execution</strong>：拦截指定规则的公共方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  *  ① 第一个* 表示方法修饰符,只支持public,可以不写</span></span><br><span class="line"><span class="comment">  *  ② 包名中的 .. 表示当前包以及子包</span></span><br><span class="line"><span class="comment">  *  ③ *Service 表示以Service结尾的类</span></span><br><span class="line"><span class="comment">  *  ④ *(..) 括号前的*表示任意方法</span></span><br><span class="line"><span class="comment">  *  ⑤ (..) 括号中的 .. 表示任意参数</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;execution(* com.ms.aop..*Service.*(..))&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>@annotation</strong>：匹配有指定注解的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 被拦截的方法有 @Annotation1 类型的注解</span></span><br><span class="line"><span class="meta">@annotation(com.ms.aop.jannotation.demo2.Annotation1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口方法有注解</span></span><br><span class="line"><span class="meta">@Annotation1</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>args</strong>：匹配方法中的参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配一个参数，且类型为String</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;args(java.lang.String)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配多个参数，且类型为也匹配</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;args(java.lang.String,java.lang.Integer)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配任意多个参数,且第一个参数符合, .. 表示参数通配符</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;args(java.lang.String,..)&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>@args</strong>：方法参数所属的类型上有指定的注解被匹配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匹配1个参数</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;@args(com.ms.aop.jargs.demo1.Anno1)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 匹配多个参数，且多个参数所属的类型上都有指定的注解</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;@args(com.ms.aop.jargs.demo1.Anno1,com.ms.aop.jargs.demo1.Anno2)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配多个参数，且第一个参数所属的类中有Anno1注解</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;@args(com.ms.aop.jargs.demo2.Anno1,..)&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数类型有注解</span></span><br><span class="line"><span class="meta">@Anno1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>this</strong>：代理对象为指定的类型会被拦截，在Spring中如果代理对象有接口首先会使用JDK动态代理，否则才会使用CGLIB动态代理；在this表达式中代理对象有接口，代理对象不会被拦截，因为被代理是是this表达式中对应的接口类型；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果有接口则不会被代理，Spring首先会使用JDK动态代理</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;this(com.ms.aop.jthis.demo1.ServiceImpl)&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>@target</strong>：匹配的目标对象的类有一个指定的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象中包含com.ms.aop.jtarget.Annotation1注解，调用该目标对象的任意方法都会被拦截</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;@target(com.ms.aop.jtarget.Annotation1)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Annotation1</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Service</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>target</strong>：目标对象为指定的类型被拦截</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标对象为 ServiceImpl 类型的会被代理</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;target(com.ms.aop.target.ServiceImpl)&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>@within</strong>：如果类上有指定类型的注解，则该类任意方法都会被代理</p><blockquote><ol><li><strong>@target(注解A)：</strong>判断被<strong>调用的目标对象</strong>中是否声明了注解A，如果有，会被拦截</li><li><strong>@within(注解A)：</strong> 判断被<strong>调用的方法所属的类</strong>中是否声明了注解A，如果有，会被拦截</li><li>@target关注的是被调用的对象，@within关注的是调用的方法所在的类</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明有com.ms.aop.jwithin.Annotation1注解的类中的所有方法都会被拦截</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;@within(com.ms.aop.jwithin.Annotation1)&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p><strong>within</strong>：根据表达式代理指定包或者子包，表达式格式：<code>包名.*</code> 或者 <code>包名..*</code>；<em>within()和execution()函数不同的是，within()所指定的连接点最小范围只能是类，而execution()所指定的连接点可以大到包，小到方法入参。 所以从某种意义上讲，execution()函数功能涵盖了within()函数的功能</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 拦截包中任意方法，不包含子包中的方法</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;within(com.ms.aop.within.*)&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截包或者子包中定义的方法</span></span><br><span class="line"><span class="meta">@Pointcut(value = &quot;within(com.ms.aop.within..*)&quot;)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="2-Before"><a href="#2-Before" class="headerlink" title="2. @Before"></a>2. @Before</h3><p>标识一个前置增强方法，相当于BeforeAdvice的功能</p><h3 id="3-After"><a href="#3-After" class="headerlink" title="3. @After"></a>3. @After</h3><p>final增强，不管是抛出异常或者正常退出都会执行</p><h3 id="4-AfterReturning"><a href="#4-AfterReturning" class="headerlink" title="4. @AfterReturning"></a>4. @AfterReturning</h3><p>后置增强，似于AfterReturningAdvice, 方法正常退出时执行</p><h3 id="5-AfterThrowing"><a href="#5-AfterThrowing" class="headerlink" title="5. @AfterThrowing"></a>5. @AfterThrowing</h3><p>异常抛出增强，相当于ThrowsAdvice</p><h3 id="6-Around"><a href="#6-Around" class="headerlink" title="6. @Around"></a>6. @Around</h3><p>环绕增强，相当于MethodInterceptor</p><h2 id="3-3-基于XML"><a href="#3-3-基于XML" class="headerlink" title="3.3 基于XML"></a>3.3 基于XML</h2><h1 id="第四章-Spring-TX"><a href="#第四章-Spring-TX" class="headerlink" title="第四章 Spring TX"></a>第四章 Spring TX</h1><h2 id="4-1-事务概述"><a href="#4-1-事务概述" class="headerlink" title="4.1 事务概述"></a>4.1 事务概述</h2><ul><li><strong>原子性（Atomicity）</strong>：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。</li><li><strong>一致性（Consistency）</strong>：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。</li><li><strong>隔离性（Isolation）</strong>：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。</li><li><strong>持久性（Durability）</strong>：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。</li></ul><h2 id="4-2-Spring-事务管理"><a href="#4-2-Spring-事务管理" class="headerlink" title="4.2 Spring 事务管理"></a>4.2 Spring 事务管理</h2><h3 id="1-Spring事务方式"><a href="#1-Spring事务方式" class="headerlink" title="1. Spring事务方式"></a>1. Spring事务方式</h3><ul><li><strong>编程式事务管理</strong>：是侵入性事务管理，使用TransactionTemplate或者直接使用PlatformTransactionManager，对于编程式事务管理，Spring推荐使用TransactionTemplate。</li><li><strong>声明式事务管理</strong>：建立在AOP之上，其本质是对方法前后进行拦截，然后在目标方法开始之前创建或者加入一个事务，执行完目标方法之后根据执行的情况提交或者回滚。</li></ul><h3 id="2-Spring事务核心接口"><a href="#2-Spring事务核心接口" class="headerlink" title="2. Spring事务核心接口"></a>2. Spring事务核心接口</h3><img src="https://s3.ax1x.com/2021/01/12/sGyMzq.png" alt="sGyMzq.png" border="0" /><ul><li><p>JDBC事务：如果应用程序中直接使用JDBC来进行持久化，DataSourceTransactionManager会为你处理事务边界。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Hibernate事务：如果应用程序的持久化是通过Hibernate实现的，那么你需要使用HibernateTransactionManager。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.hibernate3.HibernateTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Java持久化API事务（JPA）：Hibernate多年来一直是事实上的Java持久化标准，但是现在Java持久化API作为真正的Java持久化标准进入大家的视野。如果你计划使用JPA的话，那你需要使用Spring的JpaTransactionManager来处理事务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.orm.jpa.JpaTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sessionFactory&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Java原生API事务：如果你没有使用以上所述的事务管理，或者是跨越了多个事务管理源（比如两个或者是多个不同的数据源），你就需要使用JtaTransactionManager</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.jta.JtaTransactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManagerName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;java:/TransactionManager&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-Spring事务属性"><a href="#4-3-Spring事务属性" class="headerlink" title="4.3 Spring事务属性"></a>4.3 Spring事务属性</h2><h3 id="1-只读"><a href="#1-只读" class="headerlink" title="1. 只读"></a>1. 只读</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>事务的第三个特性是它是否为只读事务。如果事务只对后端的数据库进行该操作，数据库可以利用事务的只读特性来进行一些特定的优化。通过将事务设置为只读，你就可以给数据库一个机会，让它应用它认为合适的优化措施。</p><h3 id="2-超时"><a href="#2-超时" class="headerlink" title="2. 超时"></a>2. 超时</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>为了使应用程序很好地运行，事务不能运行太长的时间。因为事务可能涉及对后端数据库的锁定，所以长时间的事务会不必要的占用数据库资源。事务超时就是事务的一个定时器，在特定时间内事务如果没有执行完毕，那么就会自动回滚，而不是一直等待其结束。</p><h3 id="3-回滚规则"><a href="#3-回滚规则" class="headerlink" title="3. 回滚规则"></a>3. 回滚规则</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>这些规则定义了哪些异常会导致事务回滚而哪些不会。默认情况下，事务只有遇到运行期异常时才会回滚，而在遇到检查型异常时不会回滚（这一行为与EJB的回滚行为是一致的）<br>但是你可以声明事务在遇到特定的检查型异常时像遇到运行期异常那样回滚。同样，你还可以声明事务遇到特定的异常不回滚，即使这些异常是运行期异常。</p><ul><li>rollbackFor：让原本不回滚的异常发生时候事务回滚；</li><li>noRollbackFor：让原本会回滚的异常发生时候事务不回滚；</li></ul><h3 id="4-隔离规则"><a href="#4-隔离规则" class="headerlink" title="4. 隔离规则"></a>4. 隔离规则</h3><ol><li><p><strong>事务并发存在的问题</strong></p><ul><li>脏读（Dirty reads）——脏读发生在一个事务读取了另一个事务改写但尚未提交的数据时。如果改写在稍后被回滚了，那么第一个事务获取的数据就是无效的。</li><li>不可重复读（Nonrepeatable read）——不可重复读发生在一个事务执行相同的查询两次或两次以上，但是每次都得到不同的数据时。这通常是因为另一个并发事务在两次查询期间进行了更新。</li><li>幻读（Phantom read）——幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录。</li></ul></li><li><p><strong>事务的隔离级别</strong></p><table><thead><tr><th>隔离级别</th><th>含义</th></tr></thead><tbody><tr><td>ISOLATION_DEFAULT</td><td>使用后端数据库默认的隔离级别</td></tr><tr><td>ISOLATION_READ_UNCOMMITTED</td><td>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读</td></tr><tr><td>ISOLATION_READ_COMMITTED</td><td>允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生</td></tr><tr><td>ISOLATION_REPEATABLE_READ</td><td>对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生</td></tr><tr><td>ISOLATION_SERIALIZABLE</td><td>最高的隔离级别，完全服从ACID的隔离级别，确保阻止脏读、不可重复读以及幻读，也是最慢的事务隔离级别，因为它通常是通过完全锁定事务相关的数据库表来实现的</td></tr></tbody></table></li></ol><h3 id="5-传播行为"><a href="#5-传播行为" class="headerlink" title="5. 传播行为"></a>5. 传播行为</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>事务的第一个方面是传播行为（propagation behavior）。当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。Spring定义了七种传播行为：</p><table><thead><tr><th>传播行为</th><th>含义</th></tr></thead><tbody><tr><td><strong>REQUIRED</strong></td><td>表示当前方法必须运行在事务中。如果当前事务存在，方法将会在该事务中运行。否则，会启动一个新的事务</td></tr><tr><td><strong>REQUIRED_NEW</strong></td><td>表示当前方法必须运行在它自己的事务中。一个新的事务将被启动。如果存在当前事务，在该方法执行期间，当前事务会被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>SUPPORTS</td><td>表示当前方法不需要事务上下文，但是如果存在当前事务的话，那么该方法会在这个事务中运行</td></tr><tr><td>MANDATORY</td><td>表示该方法必须在事务中运行，如果当前事务不存在，则会抛出一个异常</td></tr><tr><td>NOT_SUPPORTED</td><td>表示该方法不应该运行在事务中。如果存在当前事务，在该方法运行期间，当前事务将被挂起。如果使用JTATransactionManager的话，则需要访问TransactionManager</td></tr><tr><td>NEVER</td><td>表示当前方法不应该运行在事务上下文中。如果当前正有一个事务在运行，则会抛出异常</td></tr><tr><td>NESTED</td><td>表示如果当前已经存在一个事务，那么该方法将会在嵌套事务中运行。嵌套的事务可以独立于当前事务进行单独地提交或回滚。如果当前事务不存在，那么其行为与PROPAGATION_REQUIRED一样。注意各厂商对这种传播行为的支持是有所差异的。可以参考资源管理器的文档来确认它们是否支持嵌套事务</td></tr></tbody></table><h2 id="4-4-Spring-编程式事务"><a href="#4-4-Spring-编程式事务" class="headerlink" title="4.4 Spring - 编程式事务"></a>4.4 Spring - 编程式事务</h2><h3 id="1-TransactionTemplate"><a href="#1-TransactionTemplate" class="headerlink" title="1. TransactionTemplate"></a>1. TransactionTemplate</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">TransactionTemplate</span> <span class="variable">tt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransactionTemplate</span>(); <span class="comment">// 新建一个TransactionTemplate</span></span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> tt.execute(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">TransactionCallback</span>()&#123;  </span><br><span class="line">        <span class="keyword">public</span> Object <span class="title function_">doTransaction</span><span class="params">(TransactionStatus status)</span>&#123;  </span><br><span class="line">            updateOperation();  </span><br><span class="line">            <span class="keyword">return</span> resultOfUpdateOperation();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;); <span class="comment">// 执行execute方法进行事务管理</span></span><br></pre></td></tr></table></figure><h3 id="2-PlatformTransactionManager"><a href="#2-PlatformTransactionManager" class="headerlink" title="2. PlatformTransactionManager"></a>2. PlatformTransactionManager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个某个框架平台的TransactionManager，如JDBC、Hibernate</span></span><br><span class="line"><span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(); </span><br><span class="line">dataSourceTransactionManager.setDataSource(<span class="built_in">this</span>.getJdbcTemplate().getDataSource()); <span class="comment">// 设置数据源</span></span><br><span class="line"><span class="type">DefaultTransactionDefinition</span> <span class="variable">transDef</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultTransactionDefinition</span>(); <span class="comment">// 定义事务属性</span></span><br><span class="line">transDef.setPropagationBehavior(DefaultTransactionDefinition.PROPAGATION_REQUIRED); <span class="comment">// 设置传播行为属性</span></span><br><span class="line"><span class="type">TransactionStatus</span> <span class="variable">status</span> <span class="operator">=</span> dataSourceTransactionManager.getTransaction(transDef); <span class="comment">// 获得事务状态</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 数据库操作</span></span><br><span class="line">    dataSourceTransactionManager.commit(status);<span class="comment">// 提交</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    dataSourceTransactionManager.rollback(status);<span class="comment">// 回滚</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5-Spring-声明式事务"><a href="#4-5-Spring-声明式事务" class="headerlink" title="4.5 Spring - 声明式事务"></a>4.5 Spring - 声明式事务</h2><h3 id="1-基于注解的声明式事务"><a href="#1-基于注解的声明式事务" class="headerlink" title="1. 基于注解的声明式事务"></a>1. 基于注解的声明式事务</h3><ul><li><p>在配置文件中指定事务管理器，并开启基于注解的transaction</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hikari Datasource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/case-project?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接只读数据库时配置为true， 保证安全 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idleTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;600000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL</span></span><br><span class="line"><span class="comment">            wait_timeout参数（show variables like &#x27;%timeout%&#x27;;） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxLifetime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1800000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maximumPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启基于注解是事务 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>事务注解标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">xxxService</span>&#123;</span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">            readOnly = false,</span></span><br><span class="line"><span class="meta">            timeout = 3,</span></span><br><span class="line"><span class="meta">            rollbackFor = ArrayIndexOutOfBoundsException.class,</span></span><br><span class="line"><span class="meta">            isolation = Isolation.DEFAULT,</span></span><br><span class="line"><span class="meta">            propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBayBook</span><span class="params">(String user, String book, <span class="type">int</span> store)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-基于AOP配置的声明式事务"><a href="#2-基于AOP配置的声明式事务" class="headerlink" title="2. 基于AOP配置的声明式事务"></a>2. 基于AOP配置的声明式事务</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context </span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/context/spring-context.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/tx/spring-tx.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">                           https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.spring5&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hikari Datasource --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zaxxer.hikari.HikariDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/case-project?serverTimezone=UTC<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接只读数据库时配置为true， 保证安全 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connectionTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;idleTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;600000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL</span></span><br><span class="line"><span class="comment">            wait_timeout参数（show variables like &#x27;%timeout%&#x27;;） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxLifetime&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1800000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maximumPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;60&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minimumIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置AOP切面表达式关联切点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPoint&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.spring5.demo03.*Service(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txConfig&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoint&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 事务切点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txConfig&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-6-Spring事务测试环境"><a href="#4-6-Spring事务测试环境" class="headerlink" title="4.6 Spring事务测试环境"></a>4.6 Spring事务测试环境</h2><ul><li><p>数据表：基本逻辑是用户买书，用户余额减少、书的库存减少、书的销售收入新增；</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tx_book_user;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tx_book_store;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tx_book_count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tx_book_user</span><br><span class="line">(</span><br><span class="line">    name    <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    balance <span class="type">int</span></span><br><span class="line">) comment <span class="string">&#x27;用户余额表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tx_book_store</span><br><span class="line">(</span><br><span class="line">    id    <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    store <span class="type">int</span>,</span><br><span class="line">    price <span class="type">int</span></span><br><span class="line">) comment <span class="string">&#x27;书的库存表&#x27;</span>;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tx_book_count</span><br><span class="line">(</span><br><span class="line">    id    <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name  <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    count <span class="type">int</span></span><br><span class="line">) comment <span class="string">&#x27;书的收入表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_user(name, balance) <span class="keyword">VALUES</span> (<span class="string">&#x27;Tom&#x27;</span>,<span class="number">20000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_store(id, name, store, price) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;java&#x27;</span>,<span class="number">100</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_store(id, name, store, price) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;go&#x27;</span>,<span class="number">100</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_store(id, name, store, price) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;css&#x27;</span>,<span class="number">100</span>,<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_count(id, name, count) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;java&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_count(id, name, count) <span class="keyword">VALUES</span> (<span class="number">2</span>,<span class="string">&#x27;go&#x27;</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tx_book_count(id, name, count) <span class="keyword">VALUES</span> (<span class="number">3</span>,<span class="string">&#x27;css&#x27;</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure></li><li><p>实体类：BookUser用户、BookCount书的收入、BookStore书的库存；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookUser</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookCount</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookStore</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer store;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dao层：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询当前的余额，并将销售新增到收入</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookCountDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookCountDao</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> BookCount <span class="title function_">selectBookCount</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,count from tx_book_count where name = ?&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;selectBookCount sql =&quot;</span> + sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;selectBookCount param =  &quot;</span> + bookName);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(BookCount.class), bookName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addCount</span><span class="params">(BookCount count)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update tx_book_count set count = ? where id = ?&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;addCount sql =&quot;</span> + sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;addCount param =  &quot;</span> + count.getCount() + <span class="string">&quot;\t&quot;</span> + count.getId());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, count.getCount(), count.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询当前库存，并在当前库存基础上减少销售数量</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookStoreDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookStoreDao</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> BookStore <span class="title function_">selectBookStore</span><span class="params">(String bookName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id,name,store,price from tx_book_store where name = ?&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;selectBookStore sql =&quot;</span> + sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;selectBookStore param =  &quot;</span> + bookName);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(BookStore.class), bookName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minusStore</span><span class="params">(BookStore store)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update tx_book_store set store = ? where id = ?&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;minusStore sql =&quot;</span> + sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;minusStore param =  &quot;</span> + store.getStore() + <span class="string">&quot;\t&quot;</span> + store.getId());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, store.getStore(), store.getId());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 查询用户当前余额，并根据购买的数较少金额</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookUserDao</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookUserDao</span><span class="params">(JdbcTemplate jdbcTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jdbcTemplate = jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> BookUser <span class="title function_">selectUser</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select `name`,`balance` from `tx_book_user` where `name` = ?&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;selectUser sql =&quot;</span> + sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;selectUser param =  &quot;</span> + username);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.queryForObject(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(BookUser.class), username);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBalance</span><span class="params">(BookUser bookUser)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update tx_book_user set balance = ? where name = ?&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;updateBalance sql =&quot;</span> + sql);</span><br><span class="line">        System.out.println(<span class="string">&quot;updateBalance param =  &quot;</span> + bookUser.getBalance() + <span class="string">&quot;\t&quot;</span> + bookUser.getName());</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate.update(sql, bookUser.getBalance(), bookUser.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookUserDao bookUserDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookCountDao bookCountDao;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BookStoreDao bookStoreDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookService</span><span class="params">(BookUserDao bookUserDao, BookCountDao bookCountDao, BookStoreDao bookStoreDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookUserDao = bookUserDao;</span><br><span class="line">        <span class="built_in">this</span>.bookCountDao = bookCountDao;</span><br><span class="line">        <span class="built_in">this</span>.bookStoreDao = bookStoreDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(</span></span><br><span class="line"><span class="meta">            readOnly = false,</span></span><br><span class="line"><span class="meta">            timeout = 3,</span></span><br><span class="line"><span class="meta">            rollbackFor = ArrayIndexOutOfBoundsException.class,</span></span><br><span class="line"><span class="meta">            isolation = Isolation.DEFAULT,</span></span><br><span class="line"><span class="meta">            propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateBayBook</span><span class="params">(String user, String book, <span class="type">int</span> store)</span> &#123;</span><br><span class="line">        <span class="type">BookUser</span> <span class="variable">bookUser</span> <span class="operator">=</span> bookUserDao.selectUser(user);</span><br><span class="line">        <span class="type">BookStore</span> <span class="variable">bookStore</span> <span class="operator">=</span> bookStoreDao.selectBookStore(book);</span><br><span class="line">        <span class="type">BookCount</span> <span class="variable">bookCount</span> <span class="operator">=</span> bookCountDao.selectBookCount(bookStore.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 用户买书先减去用户余额</span></span><br><span class="line">        bookUser.setBalance(bookUser.getBalance() - bookStore.getPrice() * store);</span><br><span class="line">        <span class="type">int</span> <span class="variable">updateBalance</span> <span class="operator">=</span> bookUserDao.updateBalance(bookUser);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再减去书的库存:买了 store  本</span></span><br><span class="line">        bookStore.setStore(bookStore.getStore() - store);</span><br><span class="line">        <span class="type">int</span> <span class="variable">minusStore</span> <span class="operator">=</span> bookStoreDao.minusStore(bookStore);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 最后书的收入新增</span></span><br><span class="line">        bookCount.setCount(bookCount.getCount() + bookStore.getPrice() * store);</span><br><span class="line">        <span class="type">int</span> <span class="variable">addCount</span> <span class="operator">=</span> bookCountDao.addCount(bookCount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo03JdbcTxTest</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-jdbc.xml&quot;</span>);</span><br><span class="line">    <span class="type">JdbcTemplate</span> <span class="variable">template</span> <span class="operator">=</span> context.getBean(JdbcTemplate.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">TomBayJava</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> context.getBean(BookService.class);</span><br><span class="line">        bookService.updateBayBook(<span class="string">&quot;Tom&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Spring&quot;&gt;&lt;a href=&quot;#第一章-Spring&quot; class=&quot;headerlink&quot; title=&quot;第一章 Spring&quot;&gt;&lt;/a&gt;第一章 Spring&lt;/h1&gt;&lt;h2 id=&quot;1-1-Spring简介&quot;&gt;&lt;a href=&quot;#1-1-Sprin
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java框架" scheme="http://yoursite.com/tags/Java%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>0503-密码学</title>
    <link href="http://yoursite.com/2005/03/01/0503-%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    <id>http://yoursite.com/2005/03/01/0503-%E5%AF%86%E7%A0%81%E5%AD%A6/</id>
    <published>2005-02-28T16:05:00.000Z</published>
    <updated>2022-04-09T00:10:10.907Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-密码学基础"><a href="#第一章-密码学基础" class="headerlink" title="第一章 密码学基础"></a>第一章 密码学基础</h1><h2 id="1-1-密码学的发展历史简介"><a href="#1-1-密码学的发展历史简介" class="headerlink" title="1.1 密码学的发展历史简介"></a>1.1 密码学的发展历史简介</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>密码学的发展史共经历了三个阶段：①手工加密阶段、②机械加密阶段、③计算机加密阶段。手工加密阶段最为漫长，期间孕育了古典密码，这为后期密码学的发展奠定了基础。机械工业革命发展的同时促进着各种科学技术的进步，密码学也不例外。加之两次世界大战，更加促进了密码学的飞速发展，密码学由此进入现代密码学阶段。尽管如此，在这一阶段的密码学仍旧未能摆脱古典密码学的影子，加密与解密操作均依赖于语言学的支持，转轮密码机Enigma的发明与破解更是将这一特点发挥到了极致。随着数据理论逐步介入，密码学逐渐成为一门学科，而非一门艺术。进入计算机加密阶段后，密码学应用不再局限于军事、政治和外交领域，逐步扩大到商务、金融和社会的其他领域。密码学的研究和应用已大规模扩展到了民用方面。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>密码学主要包含两个分支：密码编码学和密码分析学。密码编码学针对于信息如何隐藏；密码分析学针对于信息如何破译。编码学与分析学相互影响，共同促进密码学的发展。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>古典密码是现代密码的基础，移位和替代是古典密码最常用、最核心的两种加密技巧。由此，古典密码主要分为移位密码和替代密码。例如，凯撒密码就是替代密码的典范。替代密码其分支众多，包含单表替代密码、同音替代密码、多表替代密码和多字母替代密码。移位和替代技巧仍是现代密码学最常用的两种加密手段。</p><h2 id="1-2-现代密码学的柯克霍夫原则"><a href="#1-2-现代密码学的柯克霍夫原则" class="headerlink" title="1.2 现代密码学的柯克霍夫原则"></a>1.2 现代密码学的柯克霍夫原则</h2><ol><li>即使非数学上不可破解，系统也应在实质（应用）程度上无法破解。</li><li>系统内不应含任何机密物，即使落入敌人手中也不会造成困扰。</li><li>密钥必须易于沟通和记忆，而无需写下，且双方可以很容易地改变密钥。</li><li>系统应可以用于电讯。</li><li>系统应可以携带，不应需要两个人或两个人以上才能使用（应只要一个人就能使用）。</li><li>系统应容易使用，不致让使用者的脑力过分操劳，也无须记得长串的规则。</li></ol><h2 id="1-3-密码体制划分"><a href="#1-3-密码体制划分" class="headerlink" title="1.3 密码体制划分"></a>1.3 密码体制划分</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>从密码体制上划分，现代密码学工分为两种密码体制：<em>对称密码体制和非对称密码体制</em>。对称与非对称的差别源于加密密钥和解密密钥是否对称，即加密密钥与解密密钥是否相同（对称）。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在对称密码体制中，加密与解密操作使用相同的密钥，我们把这个密钥称为秘密密钥。DES、AES算法都是常用的对称密码算法。流密码实现简单，对环境要求低，适用于手机平台的加密，广泛应用于军事、外交领域。RC4算法就是典型的流密码算法。流密码的理论、算法受限于国家安全因素未能公布。分组密码在这一点上与流密码恰恰相反，其理论，算法公开，分类众多。DES、AES算法主要的对称密码算法均属于分组密码。分组密码共有5中工作模式：电子密码本模式（ECB）、密文链接模式（CBC）、密文反馈模式（CFB）、输出反馈模式（OFB）、计数器模式（CTR）。分组密码会产生短块，关于短块的处理方法有填充法、流密码加密法、密文挪用技术。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在非对称密码体制中，加密与解密操作使用不同的密钥。对外公开的密钥，称为公钥；对外保密的密钥，称为私钥。用公钥加密的数据，只能用私钥解密；反之，用私钥加密的数据，只能用公钥解密。RSA算法是常用的非对称密码算法。非对称密码体制同时支持数字签名技术，如RSA、DSA都是常用的数字签名算法。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>散列函数可以有效地确保数据完整性，其是一项消息认证技术。常用的散列函数算法有MD5、SHA、Mac。散列函数也是数字签名技术中最重要的技术环节。数字签名离不开非对称密码体制，其私钥用于签名，公钥用于验证。基于数字签名的不可伪造性，数字签名技术成为5种安全服务中数据完整性服务、认证性服务和抗否认性服务的核心技术。通信双方只有一方提供数字签名的认证方式称为单向认证，通信双方都提供数字签名的认证方式称为双向认证。一般网银系统多采用单向认证方式，而要求较高的网银交易则都采用双向认证方式。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>PKI和PGP是现代网络安全技术领域的两把锁。目前电子商务、电子政务使用PKI技术来确保平台安全性。PGP则多用于电子邮件、文件等的数据签名与加密。</p><h2 id="1-4-ASCII码与字符编码表"><a href="#1-4-ASCII码与字符编码表" class="headerlink" title="1.4 ASCII码与字符编码表"></a>1.4 ASCII码与字符编码表</h2><ol><li><p><strong>字符编码表概述</strong>：在计算机内部，所有的信息都表示为一个二进制字符串，每个二进制位称为比特位（bit）有0和1两中状态，每8个bit称为一个字节，由8个bit（0和1）组成的一个字节可以组合出256中状态（<code>2*2*2*2*2*2*2*2</code>），把其中的每一种状态都对应到一种字符就形成了字符编码映射表，所以编程中可以把字符表示的代码翻译为计算机可以识别的二进制；</p></li><li><p><strong>常见的国际码表</strong></p><ul><li><p><strong>ASCii（美国标准信息交换码）</strong>：用一个字节的7位可以表示。所以ASCII码一共规定了128个字符的编码</p></li><li><p><strong>Unicode（国际标准码表）</strong>：世界上存在着多种编码方式，同一个二进制数字可以被解释成不同的符号。因此，要想打开一个文本文件，就必须知道它的编码方式，否则用错误的编码方式解读，就会出现乱码。可以想象，如果有一种编码，将世界上所有的符号都纳入其中。每一个符号都给予一个独一无二的编码，那么乱码问题就会消失，这就是Unicode。<em>注意的是，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储</em></p></li><li><p><strong>iso-8859-1（拉丁码表 latin）</strong>：用了一个字节用的8位。把位于128-255之间的字符用于拉丁字母表中特殊语言字符的编码，也因此而得名。ASCII码是包含的仅仅是英文字母，并且没有完全占满256个编码位置，所以它以ASCII为基础，在空置的0xA0-0xFF的范围内，加入192个字母及符号，藉以供使用变音符号的拉丁字母语言使用。从而支持德文，法文等。因而它依然是一个单字节编码，只是比ASCII更全面。</p></li><li><p><strong>UTF-8</strong>：事实证明，对可以用ASCII表示的字符使用UNICODE并不高效，因为UNICODE比ASCII占用大一倍的空间，而对ASCII来说高字节的0对他毫无用处。为了解决这个问题，就出现了一些中间格式的字符集，他们被称为通用转换格式，即UTF（Universal Transformation Format）。目前存在的UTF格式有：UTF-7, UTF-7.5, UTF-8, UTF-16, 以及 UTF-32</p><blockquote><p>UTF-8基于unicode，UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。</p><ul><li>对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，UTF-8编码和ASCII码是相同的。</li><li>对于n字节的符号（n&gt;1），第一个字节的前n位都设为1，第n+1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的unicode码。</li></ul></blockquote></li><li><p><strong>GBK（汉字内码扩展规范）</strong>：由我国自主编写，（GBK即“国标”、“扩展”汉语拼音的第一个字母）目前最常用的中文码表，2万的中文和符号。用两个字节表示，其中的一部分文字，第一个字节开头是1，第二字节开头是0</p></li></ul></li></ol><h2 id="1-5-Base64与Base58"><a href="#1-5-Base64与Base58" class="headerlink" title="1.5 Base64与Base58"></a>1.5 Base64与Base58</h2><ol><li><p><strong>Base64</strong></p><ul><li><p>概述：Base64不是加密算法，本质上是可读性算法，Base64的目的不是加密代码而是将二进制数据具有可读性；</p></li><li><p>原理：Base64是由64个字符组成（大写A-Z、小写a-z、数字0-9、字符+、字符/），Base64首先将字符拆分为三个字节为一组，一个字节8位，总共24位，然后将24位拆分为4组，每一组有6位，因为一个字节是8位，拆分或6位缺两位的高位用0补齐，base64取后6位控制在0-63之间，对应base64规则将字节转换为64个可读性字符，当位数不够的时候用=号补齐；</p></li><li><p>Java案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 8的java.util套件中，新增了Base64的类别</span></span><br><span class="line">Base64.<span class="type">Decoder</span> <span class="variable">decoder</span> <span class="operator">=</span> Base64.getDecoder();</span><br><span class="line">Base64.<span class="type">Encoder</span> <span class="variable">encoder</span> <span class="operator">=</span> Base64.getEncoder();</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">encodedText</span> <span class="operator">=</span> encoder.encodeToString(textByte);</span><br><span class="line"><span class="type">byte</span>[] decodeByte = decoder.decode(encodedText);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hutool工具包</span></span><br><span class="line"><span class="type">String</span> <span class="variable">encode</span> <span class="operator">=</span> Base64Encoder.encode(<span class="string">&quot;encodeText&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">decodeStr</span> <span class="operator">=</span> Base64Decoder.decodeStr(encode);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Base58</strong>：由于Base64字符中的部分字母和数字相似度太高，在外观上对可读性仍较低，所以Base58在Base64的基础上减少了6个字符：①数字0、②大写字母O，③大写字母I，④小写的字母l、⑤加号+，⑥斜杠/，Base58是采用我们数学上经常使用的进制转换方法——辗转相除法；</p></li></ol><h2 id="1-6-new-String原理"><a href="#1-6-new-String原理" class="headerlink" title="1.6 new String原理"></a>1.6 new String原理</h2><ul><li>是根据参数，使用Java虚拟机的的模板编码格式，会把这个字节数组进行decode，找到对应的字符码表进行转换；</li></ul><h1 id="第二章-现代加密算法"><a href="#第二章-现代加密算法" class="headerlink" title="第二章 现代加密算法"></a>第二章 现代加密算法</h1><h2 id="2-1-数字摘要"><a href="#2-1-数字摘要" class="headerlink" title="2.1 数字摘要"></a>2.1 数字摘要</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>消息摘要算法包含MD、SHA和MAC共3大系列，它们是三大消息摘要算法的主要代表。常用于验证数据的完整性，是数字签名算法的核心算法。核心原理是比较两个对象hashCode ()方法的值是否相同，顾名思义，hashCode就是散列值。任何消息经过散列函数处理后，都会获得唯一的散列值，这一过程称为“消息摘要”，其散列值称为“数字指纹”，其算法自然就是“消息摘要算法”了。为了方便人们识别和阅读，数字指纹常以十六进制字符串的形式出现。</p><ul><li><p><strong>MD（Message Digest，消息摘要算法）</strong>：MD系列算法包括MD2、MD4和MD5共3种算法；</p></li><li><p><strong>SHA（Secure Hash Algorithm，安全散列算法）</strong>：SHA算法主要包括其代表算法SHA-1和SHA-1算法的变种SHA-2系列算法（包含SHA-224、SHA-256、SHA-384和SHA-512）；</p></li><li><p><strong>MAC（Message Authentication Code，消息认证码算法）</strong>：MAC算法综合了上述两种算法，主要包括HmacMD5、HmacSHA1、HmacSHA256、HmacSHA384和HmacSHA512算法。</p></li></ul><h3 id="2-MD家族"><a href="#2-MD家族" class="headerlink" title="2. MD家族"></a>2. MD家族</h3><ul><li><p><strong>简述</strong>：MD5算法是典型的消息摘要算法，它由MD4、MD3、MD2算法改进而来。不论是哪一种MD算法，它们都需要获得一个随机长度的信息并产生一个128位的信息摘要。如果将这个128位的二进制摘要信息换算成十六进制，可以得到一个32位（每4位二进制数转换为1位十六进制数）的字符串；</p></li><li><p><strong>MD5算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java 工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">digest</span><span class="params">(String text, String algorithm)</span> &#123;</span><br><span class="line">    <span class="type">MessageDigest</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        instance = MessageDigest.getInstance(algorithm);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;没有&quot;</span>+algorithm+<span class="string">&quot;算法！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">byte</span>[] digest = instance.digest(text.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">byte</span> b : digest) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> Integer.toHexString(b &amp; <span class="number">0Xff</span>);</span><br><span class="line">        <span class="keyword">if</span> (s.length() == <span class="number">1</span>) &#123;</span><br><span class="line">            s = <span class="string">&quot;0&quot;</span> + s;</span><br><span class="line">        &#125;</span><br><span class="line">        sb.append(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">digest</span> <span class="operator">=</span> digest(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;md5&quot;</span>);</span><br><span class="line"><span class="comment">// Hutool 工具包</span></span><br><span class="line"><span class="type">Digester</span> <span class="variable">md5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Digester</span>(DigestAlgorithm.MD5);</span><br><span class="line"><span class="type">String</span> <span class="variable">digestHex</span> <span class="operator">=</span> md5.digestHex(testStr);</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-SHA家族"><a href="#3-SHA家族" class="headerlink" title="3. SHA家族"></a>3. SHA家族</h3><ul><li><p><strong>简述</strong>：SHA算法家族目前共有SHA-1、SHA-224、SHA-256、SHA-384和SHA-512五种算法，通常将后四种算法并称为SHA-2算法。除上述五种算法外，还有发布不久就夭折的SHA-0算法。SHA算法是在MD4算法的基础上演进而来的，通过SHA算法同样能够获得一个固定长度的摘要信息。与MD系列算法不同的是：若输入的消息不同，则与其相对应的摘要信息的差异概率很高。SHA算法是FIPS所认证的五种安全杂凑算法。</p></li><li><p><strong>SHA算法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java SHA算法</span></span><br><span class="line"><span class="type">String</span> <span class="variable">digest</span> <span class="operator">=</span> digest(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;SHA-1&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">digest</span> <span class="operator">=</span> digest(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;SHA-256&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">digest</span> <span class="operator">=</span> digest(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;SHA-512&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-MAC家族"><a href="#4-MAC家族" class="headerlink" title="4. MAC家族"></a>4. MAC家族</h3><ul><li><p><strong>简述</strong>：MAC（Message Authentication Code，消息认证码算法）是含有密钥散列函数算法，兼容了MD和SHA算法的特性，并在此基础上加入了密钥。因为MAC算法融合了密钥散列函数（keyed-Hash），通常我们也把MAC称为HMAC（keyed-Hash Message Authentication Code）。MAC算法主要集合了MD和SHA两大系列消息摘要算法。MD系列算法有HmacMD2、HmacMD4和HmacMD5三种算法；SHA系列算法有HmacSHA1、HmacSHA224、HmacSHA256、HmacSHA384和HmacSHA512五种算法。</p></li><li><p><strong>Hmac算法</strong>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="5-其他摘要算法"><a href="#5-其他摘要算法" class="headerlink" title="5. 其他摘要算法"></a>5. 其他摘要算法</h3><ul><li>除了MD、SHA和MAC这三大主流消息摘要算法外，还有许多我们不了解的消息摘要算法，包括RipeMD系列（包含RipeMD128、RipeMD160、RipeMD256和RipeMD320）、Tiger、Whirlpool和GOST3411算法。RipeMD系列算法与MAC系列算法相结合，又产生了HmacRipeMD128和HmacRipeMD160两种算法。</li></ul><h2 id="2-2-对称加密算法"><a href="#2-2-对称加密算法" class="headerlink" title="2.2 对称加密算法"></a>2.2 对称加密算法</h2><ol><li>介绍</li><li>数据加密标准——DES<ul><li>ECB：Electron Codebook电子密码本，原理是将需要加密的消费按照块密码的大小分为数个块，并对每个块进行独立加密，特定是同时加密如果原文相同，加密出来的密文也是相同的</li><li>优点：可以并行处理数据</li><li>确定：同样的原文生成同样的密文，不能很好的保护数据</li><li>CBC：Cipher Block Chaining密码块链接，原理是每个明文块与密文块进行异或后，再进行加密，在这种加密模式中每个密文块都依赖与他前面的所有明文块</li><li>优点：安全系统好</li><li>确定：加密速度慢</li></ul></li><li>三重DES——DESede</li><li>高级数据加密标准——AES</li><li>国际数据加密标准——IDEA</li><li>基于口令加密——PBE</li></ol><h2 id="2-3-非对称加密"><a href="#2-3-非对称加密" class="headerlink" title="2.3 非对称加密"></a>2.3 非对称加密</h2><h3 id="1-非对称加密概述"><a href="#1-非对称加密概述" class="headerlink" title="1. 非对称加密概述"></a>1. 非对称加密概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>非对称加密算法与对称加密算法的主要差异在于非对称加密用于加密和解密的密钥不相同，一个公开，称为公钥；一个保密，称为私钥。因此，非对称加密也称为双钥或公钥加密算法。非对称加密的缺点是加解密速度要远远慢于对称加密。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>非对称加密算法源于DH算法（Diffie-Hellman，密钥交换算法），DH算法提出后，国际上相继出现了各种实用性更强的非对称加密算法，其构成主要是基于数学问题的求解，主要分为两类：</p><ol><li>基于因子分解难题：RSA算法是最为典型的非对称加密算法，RSA算法是当今应用范围最为广泛的非对称加密算法，也是第一个既能用于数据加密也能用于数字签名的算法。</li><li>基于离散对数难题：ElGamal算法由Taher ElGamal提出，以自己的名字命名。该算法既可用于加密/解密，也可用于数字签名，并为数字签名算法形成标准提供参考。美国的DSS（Digital Signature Standard，数据签名标准）的DSA（Digital Signature Algorithm，数字签名算法）经ElGamal算法演变而来。</li><li>椭圆曲线理论： ECC（Elliptical Curve Cryptography，椭圆曲线加密）算法以椭圆曲线理论为基础，在创建密钥时可做到更快、更小，并且更有效。ECC 算法通过椭圆曲线方程式的性质产生密钥，而不是采用传统的方法利用大质数的积来产生。</li></ol><p>：特点是由两把密钥，一把公钥（pubkey）一把私钥（privateKey）；核心原理是如果信息是被公钥加密，则必须使用私钥解密</p><h3 id="2-密钥交换算法——DH-amp-ECDH"><a href="#2-密钥交换算法——DH-amp-ECDH" class="headerlink" title="2. 密钥交换算法——DH&amp;ECDH"></a>2. 密钥交换算法——DH&amp;ECDH</h3><ol><li>介绍</li><li>RSA</li><li>ECC</li></ol><h2 id="2-3-数字签名"><a href="#2-3-数字签名" class="headerlink" title="2.3 数字签名"></a>2.3 数字签名</h2><ol><li>签名概述：数字签名（又称<a href="https://baike.baidu.com/item/公钥">公钥</a>数字签名）是只有信息的发送者才能产生的别人无法伪造的一段数字串，这段数字串同时也是对信息的发送者发送信息真实性的一个有效证明。</li><li>签名原理：</li></ol><h1 id="第三章-JWT"><a href="#第三章-JWT" class="headerlink" title="第三章 JWT"></a>第三章 JWT</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>Json web token (JWT), 是为了在网络应用环境间传递声明而执行的一种基于JSON的开放标准（RFC 7519).该token被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该token也可直接被用于认证，也可被加密。</p><h2 id="3-2-Jwt原理"><a href="#3-2-Jwt原理" class="headerlink" title="3.2 Jwt原理"></a>3.2 Jwt原理</h2><h3 id="1-第一部分：header"><a href="#1-第一部分：header" class="headerlink" title="1. 第一部分：header"></a>1. 第一部分：header</h3><ul><li><p>将头部进行base64编码，构成了第一部分。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  &#x27;typ&#x27;<span class="punctuation">:</span> &#x27;JWT&#x27;<span class="punctuation">,</span></span><br><span class="line">  &#x27;alg&#x27;<span class="punctuation">:</span> &#x27;HS256&#x27;</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>头部一般承载两部分信息：①声明类型typ，这里是jwt②加密的算法alg，如 HMAC SHA256</p></li></ul><h3 id="2-第二部分：payload"><a href="#2-第二部分：payload" class="headerlink" title="2. 第二部分：payload"></a>2. 第二部分：payload</h3><ul><li><p>将荷载进行base64加密，得到Jwt的第二部分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;admin&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>载荷就是存放有效信息的地方。这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分：①标准中注册的声明、②公共的声明、③私有的声明</p><ul><li>标准中注册的声明 (建议但不强制使用) ：<ul><li><strong>jti（jwt id）</strong>: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</li><li><strong>iss（issuer）</strong>: jwt签发者</li><li><strong>iat（issued at）</strong>: jwt的签发时间</li><li><strong>sub（subject）</strong>: jwt所面向的用户</li><li><strong>aud（audience）</strong>: 接收jwt的一方</li><li><strong>exp（expires）</strong>: jwt的过期时间，这个过期时间必须要大于签发时间</li><li><strong>nbf（not before）</strong>: 定义在什么时间之前，该jwt都是不可用的.</li></ul></li><li>公共的声明 ：公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可base64</li><li>私有的声明：私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</li></ul></li></ul><h3 id="3-第三部分：signature"><a href="#3-第三部分：signature" class="headerlink" title="3. 第三部分：signature"></a>3. 第三部分：signature</h3><ul><li><p>第三部分是一个签证信息，这个部分需要base64加密后的header和base64加密后的payload使用<code>.</code>连接组成的字符串，然后通过header中声明的加密方式进行加盐<code>secret</code>组合加密，然后就构成了jwt的第三部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 伪代码</span></span><br><span class="line"><span class="type">var</span> <span class="variable">encodedString</span> <span class="operator">=</span> base64UrlEncode(header) + <span class="string">&#x27;.&#x27;</span> + base64UrlEncode(payload);</span><br><span class="line"><span class="type">var</span> <span class="variable">signature</span> <span class="operator">=</span> HMACSHA256(encodedString, <span class="string">&#x27;secret&#x27;</span>); </span><br></pre></td></tr></table></figure></li><li><p>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p></li></ul><h2 id="3-2-JWT库"><a href="#3-2-JWT库" class="headerlink" title="3.2 JWT库"></a>3.2 JWT库</h2><h3 id="1-java-jwt"><a href="#1-java-jwt" class="headerlink" title="1. java-jwt"></a>1. java-jwt</h3><ul><li><p>依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.11.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>案例：Auth0提供的JWT库简单实用, 依赖第三方（JavaAPI提供的PublicKey和PrivateKey）提供的证书信息（keypair）；有一问题是在 生成token与校验token时都需要公钥(public key)与密钥(private key)，这是一不足（实际上在校验时只需要public key即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1. Algorithm：Jwt签名算法,用于sign()方法生成完整TOKEN</span></span><br><span class="line"><span class="comment">2. JWT : 封装JWT操作相关对象</span></span><br><span class="line"><span class="comment">2.1 JWTParser</span></span><br><span class="line"><span class="comment">3. JWTVerifier：JWT.require()方法封装验签算法，用于验证TOKEN</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 使用秘钥签名获取TOKEN</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJwt</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">        .withJWTId(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .withIssuer(<span class="string">&quot;发行人&quot;</span>)</span><br><span class="line">        .withIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())<span class="comment">//发行时间</span></span><br><span class="line">        .withAudience(<span class="string">&quot;接收人&quot;</span>)</span><br><span class="line">        .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span> * <span class="number">60</span>)) </span><br><span class="line">        .withSubject(<span class="string">&quot;用户&quot;</span>)</span><br><span class="line">        .withAudience(<span class="string">&quot;接收方&quot;</span>)</span><br><span class="line">        .withNotBefore(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span> * <span class="number">10</span>))</span><br><span class="line">        .withClaim(<span class="string">&quot;TEST&quot;</span>,<span class="string">&quot;自定义&quot;</span>)</span><br><span class="line">        .sign(Algorithm.HMAC256(<span class="string">&quot;秘钥&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;秘钥&quot;</span>)).build();</span><br><span class="line">    verifier.verify(token);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用秘钥对签名获取TOKEN</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJwt</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">// hutool工具包将秘钥字符串转为秘钥对象</span></span><br><span class="line">    <span class="type">PublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> SecureUtil.generatePublicKey(<span class="string">&quot;RSA&quot;</span>, <span class="string">&quot;pubKey字节数组&quot;</span>);</span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> SecureUtil.generatePrivateKey(<span class="string">&quot;RSA&quot;</span>,<span class="string">&quot;priKey字节数组&quot;</span>);</span><br><span class="line">    <span class="comment">// 封装签名算法：加签与验签都需要封装公钥与私钥</span></span><br><span class="line">    <span class="type">Algorithm</span> <span class="variable">algorithm</span> <span class="operator">=</span> Algorithm.RSA512((RSAPublicKey) publicKey, (RSAPrivateKey) privateKey);</span><br><span class="line">    <span class="comment">// 获取TOKEN</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">        .withJWTId(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .withIssuer(<span class="string">&quot;发行人&quot;</span>)</span><br><span class="line">        .withIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())<span class="comment">//发行时间</span></span><br><span class="line">        .withAudience(<span class="string">&quot;接收人&quot;</span>)</span><br><span class="line">        .withExpiresAt(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span> * <span class="number">60</span>)) <span class="comment">// 过期时间</span></span><br><span class="line">        .withSubject(<span class="string">&quot;用户&quot;</span>)</span><br><span class="line">        .withAudience(<span class="string">&quot;接收方&quot;</span>)</span><br><span class="line">        .withNotBefore(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis()))</span><br><span class="line">        .withClaim(<span class="string">&quot;TEST&quot;</span>,<span class="string">&quot;自定义&quot;</span>)</span><br><span class="line">        .sign(algorithm);</span><br><span class="line">    <span class="comment">// 验证TOKEN的算法都需要公钥与私钥</span></span><br><span class="line">    <span class="type">JWTVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> JWT.require(algorithm).build();</span><br><span class="line">    <span class="type">DecodedJWT</span> <span class="variable">verify</span> <span class="operator">=</span> verifier.verify(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-jose4j"><a href="#2-jose4j" class="headerlink" title="2. jose4j"></a>2. jose4j</h3><ul><li><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.bitbucket.b_c<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jose4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.6.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用案例：jose4j提供了完整的JWT实现，可以不依赖第三方提供的证书信息(keypair，库本身自带有RSA的实现)，类定义与JWT协议规定匹配度高,易理解与上手；对称加密与非对称加密都有提供实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h3 id="3-nimbus-jose-jwt"><a href="#3-nimbus-jose-jwt" class="headerlink" title="3. nimbus-jose-jwt"></a>3. nimbus-jose-jwt</h3><ul><li><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.nimbusds<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nimbus-jose-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.19<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用案例：类定义清晰,简单易用,易理解 , 依赖Java第三方提供的证书信息(keypair), 对称算法 与非对称算法皆有实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. SignedJWT是JWSObject的子类，构造方法需要JWSHeader 和 JWTClaimsSet</span></span><br><span class="line"><span class="comment">    1.1 sign(final JWSSigner signer):设置签名算法相关参数</span></span><br><span class="line"><span class="comment">    1.2 JWSSigner的实现:①ECDSASigner、②Ed25519Signer、③MACSigner、④RSASSASigner</span></span><br><span class="line"><span class="comment">2. JWSHeader的构造方法中需要指定签名算法JWSHeader(final JWSAlgorithm alg) </span></span><br><span class="line"><span class="comment">3. JWTClaimsSet封装JwtPayload标准信息</span></span><br><span class="line"><span class="comment">3. JWSAlgorithm 签名算法</span></span><br><span class="line"><span class="comment">*/</span>        </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testHS256</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">secret</span> <span class="operator">=</span> IdUtil.fastSimpleUUID();</span><br><span class="line">    <span class="comment">// 1. 指定签名算法</span></span><br><span class="line">    <span class="type">JWSHeader</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JWSHeader</span>(JWSAlgorithm.HS256);</span><br><span class="line">    <span class="comment">// 2. 为签名算法配置参数</span></span><br><span class="line">    <span class="type">JWSSigner</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MACSigner</span>(secret);</span><br><span class="line">    <span class="comment">// 3. 配置payload</span></span><br><span class="line">    <span class="type">JWTClaimsSet</span> <span class="variable">claimsSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JWTClaimsSet</span>.Builder()</span><br><span class="line">        .jwtID(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .subject(<span class="string">&quot;sub&quot;</span>)</span><br><span class="line">        .expirationTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span>))</span><br><span class="line">        .issuer(<span class="string">&quot;issuer&quot;</span>)</span><br><span class="line">        .issueTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        .notBeforeTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">100</span>))</span><br><span class="line">        .audience(<span class="string">&quot;audience&quot;</span>)</span><br><span class="line">        .claim(<span class="string">&quot;CLAIM&quot;</span>,<span class="string">&quot;CLAIM&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 4. 构建Token对象</span></span><br><span class="line">    <span class="type">SignedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedJWT</span>(header, claimsSet);</span><br><span class="line">    jwt.sign(sign);</span><br><span class="line">    <span class="comment">// 5. 生成token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwt.serialize();</span><br><span class="line">    System.out.println(<span class="string">&quot;token = &quot;</span> + token);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 验签</span></span><br><span class="line">    <span class="type">SignedJWT</span> <span class="variable">parse</span> <span class="operator">=</span> SignedJWT.parse(token);</span><br><span class="line">    <span class="type">JWSVerifier</span> <span class="variable">verify</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MACVerifier</span>(secret);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">result</span> <span class="operator">=</span> parse.verify(verify);</span><br><span class="line">    </span><br><span class="line">    <span class="type">JWTClaimsSet</span> <span class="variable">jwtClaimsSet</span> <span class="operator">=</span> parse.getJWTClaimsSet();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRsa</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// Java 实现密钥对</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">KeyPairGenerator</span> <span class="variable">keyPairGenerator</span> <span class="operator">=</span> KeyPairGenerator.getInstance(<span class="string">&quot;RSA&quot;</span>);</span><br><span class="line">    <span class="comment">// 长度 至少 1024, 建议 2048</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">keySize</span> <span class="operator">=</span> <span class="number">2048</span>;</span><br><span class="line">    keyPairGenerator.initialize(keySize);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">KeyPair</span> <span class="variable">keyPair</span> <span class="operator">=</span> keyPairGenerator.genKeyPair();</span><br><span class="line">    <span class="comment">//公钥</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">RSAPublicKey</span> <span class="variable">publicKey</span> <span class="operator">=</span> (RSAPublicKey) keyPair.getPublic();</span><br><span class="line">    <span class="comment">//私钥</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> keyPair.getPrivate();</span><br><span class="line">    <span class="comment">// 1. 指定签名算法</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">JWSHeader</span> <span class="variable">header</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JWSHeader</span>(JWSAlgorithm.RS512);</span><br><span class="line">    <span class="comment">// 2. 为签名算法配置参数，加签是私钥</span></span><br><span class="line">    <span class="type">JWSSigner</span> <span class="variable">signer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSASSASigner</span>(privateKey);</span><br><span class="line">    <span class="comment">// 3. 配置payload</span></span><br><span class="line">    <span class="type">JWTClaimsSet</span> <span class="variable">claimsSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JWTClaimsSet</span>.Builder()</span><br><span class="line">        .jwtID(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .subject(<span class="string">&quot;sub&quot;</span>)</span><br><span class="line">        .expirationTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">1000</span>))</span><br><span class="line">        .issuer(<span class="string">&quot;issuer&quot;</span>)</span><br><span class="line">        .issueTime(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        .notBeforeTime(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">100</span>))</span><br><span class="line">        .audience(<span class="string">&quot;audience&quot;</span>)</span><br><span class="line">        .claim(<span class="string">&quot;CLAIM&quot;</span>, <span class="string">&quot;CLAIM&quot;</span>)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="comment">// 4. 构建Token对象</span></span><br><span class="line">    <span class="type">SignedJWT</span> <span class="variable">jwt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SignedJWT</span>(header, claimsSet);</span><br><span class="line">    jwt.sign(signer);</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwt.serialize();</span><br><span class="line">    System.out.println(<span class="string">&quot;token = &quot;</span> + token);</span><br><span class="line">    <span class="comment">// 验签</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">SignedJWT</span> <span class="variable">parseJWT</span> <span class="operator">=</span> SignedJWT.parse(token);</span><br><span class="line"><span class="comment">// 验签是公钥</span></span><br><span class="line">    <span class="type">JWSVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RSASSAVerifier</span>(publicKey);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">verify</span> <span class="operator">=</span> parseJWT.verify(verifier);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">JWTClaimsSet</span> <span class="variable">jwtClaimsSet</span> <span class="operator">=</span> parseJWT.getJWTClaimsSet();</span><br><span class="line">    System.out.println(<span class="string">&quot;jwtClaimsSet = &quot;</span> + jwtClaimsSet);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-jjwt"><a href="#4-jjwt" class="headerlink" title="4. jjwt"></a>4. jjwt</h3><ul><li><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者 jjwt-api 基于jjwt 旨在最简单的时候jwt--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-jackson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果希望使用算法: RSASSA-PSS (PS256, PS384, PS512) algorithms: 添加该依赖</span></span><br><span class="line"><span class="comment">&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    &lt;groupId&gt;org.bouncycastle&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    &lt;artifactId&gt;bcprov-jdk15on&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    &lt;version&gt;1.60&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;scope&gt;runtime&lt;/scope&gt;</span></span><br><span class="line"><span class="comment">&lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用案例：jjwt小巧够用，API注意点较多：①JwtBuilder的payload属性与其他JwtBuilder属性不可以同时设置②加签的秘钥需要封装一次Keys.hmacShaKeyFor()②JwtParser的getBody()只能获取到payload属性或claims属性中的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">secretKey</span> <span class="operator">=</span> <span class="string">&quot;ICAgIHByaXZhdGUgc3RhdGljIFN0cmluZyBzZWNyZXRLZXkgPSAiZEdocGN5QnBjeUIyWlhKNUlHeHZibWNnYzJWamNtVjAiOwo=&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCreate</span><span class="params">()</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Map&lt;String, Object&gt; claims = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    claims.put(<span class="string">&quot;payload&quot;</span>,<span class="string">&quot;Payload&quot;</span>);</span><br><span class="line">    <span class="type">Key</span> <span class="variable">key</span> <span class="operator">=</span> Keys.hmacShaKeyFor(Base64Decoder.decode(secretKey));</span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">        <span class="comment">//.setPayload(&quot;PayLoadPayLoadPayLoadPayLoad&quot;)</span></span><br><span class="line">        .setId(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .setIssuer(<span class="string">&quot;提交人&quot;</span>)</span><br><span class="line">        .setIssuedAt(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">60</span> * <span class="number">1000</span>))</span><br><span class="line">        .setNotBefore(<span class="keyword">new</span> <span class="title class_">Date</span>())</span><br><span class="line">        .setAudience(<span class="string">&quot;接收人&quot;</span>)</span><br><span class="line">        .setSubject(<span class="string">&quot;主题&quot;</span>)</span><br><span class="line">        .setClaims(claims)</span><br><span class="line">        .signWith(key,SignatureAlgorithm.HS512)</span><br><span class="line">        .compact();</span><br><span class="line">    System.out.println(<span class="string">&quot;token = &quot;</span> + token);</span><br><span class="line">    <span class="type">Jwt</span> <span class="variable">jws</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">        .setSigningKey(Base64Decoder.decode(secretKey))</span><br><span class="line">        .parse(token);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秘钥必须符合2048长度规则, 签约TOKEN需要使用私钥,API没做规范</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBefore</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pub</span> <span class="operator">=</span> <span class="string">&quot;Base64公钥2048 字符串&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">pri</span> <span class="operator">=</span> <span class="string">&quot;Base64私钥2048 字符串&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">PublicKey</span> <span class="variable">ab</span>  <span class="operator">=</span> SecureUtil.generatePublicKey(<span class="string">&quot;RSA&quot;</span>, Base64Decoder.decode(pub));</span><br><span class="line">    <span class="type">PrivateKey</span> <span class="variable">ai</span> <span class="operator">=</span> SecureUtil.generatePrivateKey(<span class="string">&quot;RSA&quot;</span>,Base64Decoder.decode(pri));</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">rsa</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">        .setPayload(<span class="string">&quot;Publisc&quot;</span>)</span><br><span class="line">        .signWith(ai)</span><br><span class="line">        .compact();</span><br><span class="line">    System.out.println(<span class="string">&quot;rsa = &quot;</span> + rsa);</span><br><span class="line"></span><br><span class="line">    <span class="type">Jwt</span> <span class="variable">parse</span> <span class="operator">=</span> Jwts.parser()</span><br><span class="line">        .setSigningKey(ab)</span><br><span class="line">        .parse(rsa);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>异常详情</p><table><thead><tr><th>异常</th><th>说明</th></tr></thead><tbody><tr><td>SignatureException</td><td>密钥错误</td></tr><tr><td>MalformedJwtException</td><td>密钥算法或者密钥转换错误</td></tr><tr><td>MissingClaimException</td><td>密钥缺少校验数据</td></tr><tr><td>ExpiredJwtException</td><td>密钥已过期</td></tr><tr><td>JwtException</td><td>密钥解析错误</td></tr></tbody></table></li></ul><h3 id="5-fusionauth-jwt"><a href="#5-fusionauth-jwt" class="headerlink" title="5. fusionauth-jwt"></a>5. fusionauth-jwt</h3><ul><li><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.fusionauth<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fusionauth-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>有些地方不符合JAVA语言规范，支持对称算法(HMAC) 与非对称算法(RSA)，也算容易理解</p></li></ul><h3 id="6-vertx-auth-jwt"><a href="#6-vertx-auth-jwt" class="headerlink" title="6. vertx-auth-jwt"></a>6. vertx-auth-jwt</h3><ul><li><p>Maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-auth-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>算是最不容易理解的一个库了， 不容易上手，生成与校验token时都需要公钥与私钥；</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-密码学基础&quot;&gt;&lt;a href=&quot;#第一章-密码学基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 密码学基础&quot;&gt;&lt;/a&gt;第一章 密码学基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-密码学的发展历史简介&quot;&gt;&lt;a href=&quot;#1-1-密码学的发展历
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java高级" scheme="http://yoursite.com/tags/Java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>0503-设计模式</title>
    <link href="http://yoursite.com/2005/03/01/0503-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2005/03/01/0503-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2005-02-28T16:01:00.000Z</published>
    <updated>2022-05-29T03:09:55.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="一、类结构关系"><a href="#一、类结构关系" class="headerlink" title="一、类结构关系"></a>一、类结构关系</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>类（对象）之间通常分为两种结构关系：①一般&lt;—-&gt;特殊关系、②整体&lt;—-&gt;部分关系；从这两种类的结构关系中又可以细分出来很多种具体的类（对象）关系。</p><ul><li><p><strong>一般&lt;—-&gt;特殊关系</strong></p><ol><li><strong>继承关系（extends）</strong>：在 Java 中通过关键字 extends 来表示继承关系；继承关系在UML图中用<code>实线+实心箭头</code>表示；子类是一种特殊的父类，父类比子类有更大的广泛性也即父类指代的是更泛、更一般的概念，而子类则代表的是一种更特殊、更具体的特指；<strong>小结：继承关系封装了这样一种逻辑：「XX（子类）是一种XX（父类）」，只要这种关系能说得通，就可以考虑用继承关系来封装它</strong>。</li><li><strong>实现关系（implements）</strong>：在 Java 中通过关键字 implements 来表示实现关系，一个类实现一个接口，其实接口也是一种特殊的类；在这里，接口也即父类。在 UML 类图中用<code>虚线 + 空心箭头</code> 表示。</li></ol></li><li><p><strong>整体&lt;—-&gt;部分关系</strong></p><ol><li><p><strong>依赖 （Dependency）</strong>：通常指的是一种单向的关系，指的是调用关系。在 UML 中用<code>虚线 + 箭头</code>来表示。</p><blockquote><p>比如：具体到代码中往往表现为一个类的方法里面的参数是另一个类的某个具体的对象。换句话说，如果 A 依赖于 B，那么代码中 B 表现为 A 的方法参数、局部变量或静态方法调用等。</p></blockquote></li><li><p><strong>关联 （Association）</strong>：在Java中指两个类直接的对应关系，在ORM框架中这种关系总结为三种：一对一、一对多、多对多；UML 中用<code>实线 + 箭头</code>来表示。</p></li><li><p><strong>聚合 （Aggregation）</strong>：聚合关系更加强调整体和部分的关系，通常，我们会说 xx 是 xx 的一部分，只要说得通，那么他们之间就是聚合关系。但是，有一点需要注意的是，聚合关系中的部分是相互独立的，并不是说部分离开了整体不能独立存在。在 UML 中用<code>空心菱形+实线</code>表示。</p><blockquote><p>比如：主板是电脑的一部分，显卡是电脑的一部分，电池是电脑的一部分，很显然这都是说得通的。</p></blockquote></li><li><p><strong>组合 （Composition）</strong>：组合关系与聚合关系其实大同小异，最大的不同在于，组合关系中的整体和部分密不可分，在 UML 中用<code>实心菱形和实线</code>表示。</p><blockquote><p>比如：人体是由头、手、脚等组成的，一个人的脑袋不可能说既属于自己又属于别人，手和脚也是一样的道理。你的头和手、脚等离开了你的身体也没有什么存在的意义。</p></blockquote></li></ol></li></ul><h1 id="第一章-设计模式概述"><a href="#第一章-设计模式概述" class="headerlink" title="第一章 设计模式概述"></a>第一章 设计模式概述</h1><h2 id="1-1-设计模式的理念"><a href="#1-1-设计模式的理念" class="headerlink" title="1.1 设计模式的理念"></a>1.1 设计模式的理念</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>设计模式：这个术语最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》（Design Patterns: Elements of Reusable Object-Oriented Software）一书，在本教程中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）匿名著称。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>直到今天，<strong>狭义的设计模式还是所介绍的 23 种经典设计模式</strong>。</p><h2 id="1-2-设计模式的作用"><a href="#1-2-设计模式的作用" class="headerlink" title="1.2 设计模式的作用"></a>1.2 设计模式的作用</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在软件开发中，设计模式是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。<strong>它描述了在软件设计过程中的一些不断重复发生的问题</strong>，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。其目的是为了提高代码的可重用性、代码的可读性和代码的可靠性。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强</li></ul><h2 id="1-3-软件开发设计原则"><a href="#1-3-软件开发设计原则" class="headerlink" title="1.3 软件开发设计原则"></a>1.3 软件开发设计原则</h2><ol><li><p><strong>单一职责原则</strong>：不要存在多于一个导致类变更的原因，也就是说每个类应该实现单一的职责，如若不然，就应该把类拆分。</p></li><li><p><strong>里氏替换原则（Liskov Substitution Principle）</strong></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>里氏代换原则面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。 LSP是继承复用的基石，只有当衍生类可以替换掉基类，软件单位的功能不受到影响时，基类才能真正被复用，而衍生类也能够在基类的基础上增加新的行为。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>里氏代换原则是对“开-闭”原则的补充。实现“开-闭”原则的关键步骤就是抽象化。而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。—— From Baidu 百科</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>里氏代换原则中，子类对父类的方法尽量不要重写和重载。因为父类代表了定义好的结构，通过这个规范的接口与外界交互，子类不应该随便破坏它。</p></li><li><p><strong>依赖倒转原则（Dependence Inversion Principle）</strong>：这个是开闭原则的基础，具体内容：面向接口编程，依赖于抽象而不依赖于具体。写代码时用到具体类时，不与具体类交互，而与具体类的上层接口交互。</p></li><li><p><strong>接口隔离原则（Interface Segregation Principle）</strong>：这个原则的意思是：每个接口中不存在子类用不到却必须实现的方法，如果不然，就要将接口拆分。使用多个隔离的接口，比使用单个接口（多个接口方法集合到一个的接口）要好。</p></li><li><p><strong>迪米特法则（最少知道原则）（Demeter Principle）</strong><br><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>就是说：一个类对自己依赖的类知道的越少越好。也就是说无论被依赖的类多么复杂，都应该将逻辑封装在方法的内部，通过public方法提供给外部。这样当被依赖的类变化时，才能最小的影响该类。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>最少知道原则的另一个表达方式是：只与直接的朋友通信。类之间只要有耦合关系，就叫朋友关系。耦合分为依赖、关联、聚合、组合等。我们称出现为成员变量、方法参数、方法返回值中的类为直接朋友。局部变量、临时变量则不是直接的朋友。我们要求陌生的类不要作为局部变量出现在类中。</p></li><li><p><strong>合成复用原则（Composite Reuse Principle）</strong>：原则是尽量首先使用关联/聚合的方式，而不是使用继承。</p></li></ol><h2 id="1-4-设计模型种类"><a href="#1-4-设计模型种类" class="headerlink" title="1.4 设计模型种类"></a>1.4 设计模型种类</h2><img src="https://s1.ax1x.com/2020/03/20/82asII.png" alt="82asII.png" border="0" /><h1 id="第二章-创建型模式"><a href="#第二章-创建型模式" class="headerlink" title="第二章 创建型模式"></a>第二章 创建型模式</h1><blockquote><p>创建型模式的主要功能的软件开发中对象的创建工作，主要作用是将对象的创建和对象的使用向分离；</p></blockquote><h2 id="2-1-简单工厂模式"><a href="#2-1-简单工厂模式" class="headerlink" title="2.1 简单工厂模式"></a>2.1 简单工厂模式</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>工厂模式的作用就是创建产品；在Java中就是new一个对象：Java是面向对象的开发语言，在业务开发中需要定义各种类型的对象；如果在业务代码中仅仅为了使用特定功能而负责这个对象的创建，这个对象的创建工作对于业务功能来说是多余的操作，而且代码耦合严重；工厂模式的解决了对象的创建和使用分离，只需要在业务功能中引入工厂角色就能获取到所需要的对象，而无需关系对象的创建过程</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>简单工厂模式是通过方法设计实现对象的创建，所以根据方法的签名（修饰符、方法名称、方法参数）不同，简单工厂模式分为<strong>静态工厂</strong>（工厂类中提供静态方法创建对象，生产对象要直接使用工厂类调用）和<strong>实例工厂</strong>（工厂类中定义实例方法创建对象，生成对象需要用工厂对象调用）；在Java中的方法设计灵活，对应的简单工厂的方式也有很多种；</p><h3 id="2-代码演示-参数式工厂"><a href="#2-代码演示-参数式工厂" class="headerlink" title="2. 代码演示-参数式工厂"></a>2. 代码演示-参数式工厂</h3><ul><li><p><strong>静态工厂</strong>：业务场景描述：工厂类要创建Car类型的对象，该类型有两款产品实现宝马<code>BMCar</code>和<code>QQCar</code>，需要使用简单工厂模式创建该类型的对象；简单工厂的设计思路：在工厂类中定义创建Car类型的静态方法，根据不同的参数创建不同的Car对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory01</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SimpleFactory01</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;BM&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMCar</span>(type);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;QQ&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QQCar</span>(type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实例工厂</strong>：与静态工厂的区别是创建对象的方法是实例方法，所以在使用实例工厂创建对象之前首先需要实例化工厂对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;BM&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BMCar</span>(type);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;QQ&quot;</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QQCar</span>(type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-代码演示-方法式工厂"><a href="#3-代码演示-方法式工厂" class="headerlink" title="3. 代码演示-方法式工厂"></a>3. 代码演示-方法式工厂</h3><blockquote><p>该方式的工厂模式是对上一种参数类型的工厂的改进，在上一种创建方式中类型标识需要调用者传递，有参数异常的风险，改进方法是在类中定义不同的方法名称，根据方法名称返回指定的对象；</p></blockquote><ul><li><p><strong>静态工厂</strong>：是因为工厂类中创建对象的方法是静态方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory03</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SimpleFactory03</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createQQCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QQCar</span>(<span class="string">&quot;QQ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createBMCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QQCar</span>(<span class="string">&quot;BM&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实例工厂</strong>：工厂中的实例方法完成对象的创建；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createQQCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QQCar</span>(<span class="string">&quot;QQ&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createBMCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QQCar</span>(<span class="string">&quot;BM&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-代码演示-反射"><a href="#4-代码演示-反射" class="headerlink" title="4. 代码演示-反射"></a>4. 代码演示-反射</h3><blockquote><p>以上两种的工厂模式对创建对象的类型和数量都有限制，如果使用类的全限定名称作为对象的表示，使用反射创建对象，理论上可以解决指定类型的扩展问题；</p></blockquote><ul><li><p><strong>静态工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory05</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SimpleFactory05</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(String productBeanName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Car) Class.forName(productBeanName).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title function_">createCar</span><span class="params">(Class&lt;?&gt; clz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Car) clz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实例工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">(String productBeanName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Car) Class.forName(productBeanName).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Car <span class="title function_">createCar</span><span class="params">(Class&lt;?&gt; clz)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Car) clz.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="5-代码演示-泛型加反射"><a href="#5-代码演示-泛型加反射" class="headerlink" title="5. 代码演示-泛型加反射"></a>5. 代码演示-泛型加反射</h3><blockquote><p>仅仅使用反射创建对象时候，对创建对象的类型仍然是无法扩展的，可以是引用泛型对创建的对象的类型进行扩展</p></blockquote><ul><li><p><strong>静态工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SimpleFactory07</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> t.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实例工厂</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleFactory08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">create</span><span class="params">(Class&lt;T&gt; t)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) t.newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-2-工厂方法模式"><a href="#2-2-工厂方法模式" class="headerlink" title="2.2 工厂方法模式"></a>2.2 工厂方法模式</h2><h3 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>简单工厂模式出现的问题是：在没用反射和泛型的前提下，如过需要添加新的产品，则需要修改原来的代码，对扩展和修改不友好；为解决简单工厂模式出现的问题，可以使用工厂方法模式：借鉴模板方法模式的思路，定义创建对象的抽象方法，在工厂类中具体对象的创建延迟到工厂的子类实现，即由子类来决定应该实例化（创建）哪一个类。</p><ul><li><p>工厂方法中相关对象说明 </p><table><thead><tr><th>名称</th><th>作用说明</th></tr></thead><tbody><tr><td>抽象工厂</td><td>对创建对象的方式进行抽象，并不负责具体对象的创建</td></tr><tr><td>工厂方法</td><td>是对抽象方法的实现，主要作用的是创建该工厂对应的对象</td></tr><tr><td>抽象产品</td><td>规定工厂创建对象的产品类型</td></tr><tr><td>具体产品</td><td>是抽象产品的一个实现类，是工厂方法创建出的具体对象</td></tr></tbody></table></li></ul><h3 id="2-案例演示"><a href="#2-案例演示" class="headerlink" title="2. 案例演示"></a>2. 案例演示</h3><ul><li><p>抽象产品：假设工厂类要创建的产品的类型是IProduct产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IProduct</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体产品：IProduct类型的产品有多中不同的实现，比如ProductA、ProductB。。。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductA</span> <span class="keyword">implements</span> <span class="title class_">IProduct</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 创建产品A成功 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductB</span> <span class="keyword">implements</span> <span class="title class_">IProduct</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 创建产品B成功 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductC</span> <span class="keyword">implements</span> <span class="title class_">IProduct</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 创建产品C成功 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>抽象工厂</strong>：需要定义个工厂，对IProduct对象的创建进行抽象，但是不会创建具体的产品</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    IProduct <span class="title function_">create</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在工厂类的子类中实现抽象方法，在子类工厂中实现对具体产品的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductAFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IProduct <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductA</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductBFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IProduct <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductCFactory</span> <span class="keyword">implements</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> IProduct <span class="title function_">create</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ProductC</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用工厂类创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建ProductA类型的对象</span></span><br><span class="line"><span class="type">Factory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductAFactory</span>();</span><br><span class="line">IProduct productA. = factory.create();</span><br><span class="line">productA.show();</span><br></pre></td></tr></table></figure></li></ul><h2 id="2-3-抽象工厂模式"><a href="#2-3-抽象工厂模式" class="headerlink" title="2.3 抽象工厂模式"></a>2.3 抽象工厂模式</h2><h3 id="1-概述-2"><a href="#1-概述-2" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在工厂方法模式中，我们使用一个工厂创建一种类型的产品。但是有时候我们需要一个工厂能够提供多个类型的产品（产品族），而且每一种类型的产品可以有多个具体产品（产品等级），可以使用抽象工厂模式：抽象工厂模式我理解的是对工厂方法的扩展，抽象工厂用于创建多种类型的多种产品的一中对象创建方式；</p><ul><li><p>在讲解抽象工厂模式之前，我们需要理清两个概念：</p><ul><li><p><strong>产品等级结构</strong>。产品的等级结构也就是产品的继承结构。例如一个为空调的抽象类，它有海尔空调、格力空调、美的空调等一系列的子类，那么这个抽象类空调和他的子类就构成了一个产品等级结构。</p></li><li><p><strong>产品族</strong>。产品族是在抽象工厂模式中的。在抽象工厂模式中，产品族是指由同一个工厂生产的，位于不同产品等级结构中的一组产品。比如，海尔工厂生产海尔空调。海尔冰箱，那么海尔空调则位于空调产品族中。</p></li></ul></li><li><p>抽象工厂中相关对象说明 </p></li></ul><table><thead><tr><th>名称</th><th>作用说明</th></tr></thead><tbody><tr><td>产品族</td><td>定义工厂类需要创建的产品类型：比如手机类型和电脑类型</td></tr><tr><td>产品等级</td><td>定义每种类型的具体产品：比如手机又小米手机和华为手机，电脑有小米电脑和华为电脑</td></tr><tr><td>工厂</td><td>在工厂类中抽象出创建多中类型的产品的方法：比如要创建手机类型的产品和电脑类型的产品</td></tr><tr><td>抽象工厂</td><td>抽象工厂是对工厂的进一步抽象：<br />  - 比如可以抽象为小米工厂（生产小米手机和小米电脑）和华为工厂（生产华为手机和华为电脑）<br />  - 或者抽象为高端工厂（生产华为手机和小米电脑）和低端工厂（生产小米手机和华为电脑）</td></tr><tr><td>工厂类</td><td>类似于工厂方法中创建对象的具体工厂的实现，没一个工厂类只能创建特定类型的产品</td></tr></tbody></table><h3 id="2-案例演示-1"><a href="#2-案例演示-1" class="headerlink" title="2. 案例演示"></a>2. 案例演示</h3><ul><li><p>需要创建两种类型的产品：比如有两个产品族：手机和电脑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NetBook</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">NetPhone</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>电脑类型的产品有两个产品等级：小米笔记本电脑和华为笔记本电脑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HWNetBook</span> <span class="keyword">implements</span> <span class="title class_">NetBook</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMNetBook</span> <span class="keyword">implements</span> <span class="title class_">NetBook</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>手机类型的产品有两个产品等级：小米手机和华为手机</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HWNetPhone</span> <span class="keyword">implements</span> <span class="title class_">NetPhone</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMNetPhone</span> <span class="keyword">implements</span> <span class="title class_">NetPhone</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>此时我们需要使用到抽象工厂创建上面的四个产品：而四个产品属于两个产品族，在抽象工厂中定义的不是具体的产品族的创建方式；如首先定义一个工厂规定创建手机和电脑的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">    NetBook <span class="title function_">creatBook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    NetPhone <span class="title function_">createPhone</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据产品族和产品等级对工厂进一步抽象：说明这些工厂是为了创建什么样的产品</p><ul><li><p>抽象方案一：根据产品类型不同抽象为小米工厂（生产小米手机和小米电脑）和华为工厂（生产华为手机和华为电脑）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HWAbsFactory</span> <span class="keyword">extends</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XMAbsFactory</span> <span class="keyword">extends</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象方案二：根据产品价格不同抽象为高端工厂（小米电脑和华为手机）和低端工厂（小米手机和华为电脑）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HightAbsFactory</span> <span class="keyword">extends</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LowAbsFactory</span> <span class="keyword">extends</span> <span class="title class_">Factory</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建具体的工厂实现抽象出来的工厂用于创建具体的产品对象</p><ul><li><p>根据方案一：实现抽象工厂创建华为工厂的实现创建华为手机和华为电脑，创建小米工厂的实现创建小米手机和小米电脑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 华为工厂的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HWAbsFactoryImpl</span> <span class="keyword">implements</span> <span class="title class_">HWAbsFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetBook <span class="title function_">creatBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HWNetBook</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetPhone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HWNetPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小米工厂的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XMAbsFactoryImpl</span> <span class="keyword">implements</span> <span class="title class_">XMAbsFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetBook <span class="title function_">creatBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMNetBook</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetPhone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMNetPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据方案二：实现抽象工厂创建高端工厂的实现创建华为手机和小米电脑，创建低端工厂的实现创建小米手机和华为电脑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 高端工厂的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HightAbsFactoryImpl</span> <span class="keyword">implements</span> <span class="title class_">HightAbsFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetBook <span class="title function_">creatBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HWNetBook</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetPhone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMNetPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 低端工厂的实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LowAbsFactoryImpl</span> <span class="keyword">implements</span> <span class="title class_">LowAbsFactory</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetBook <span class="title function_">creatBook</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HWNetBook</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> NetPhone <span class="title function_">createPhone</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMNetPhone</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="2-4-单例模式"><a href="#2-4-单例模式" class="headerlink" title="2.4 单例模式"></a>2.4 单例模式</h2><h3 id="1、单例模式学习要求"><a href="#1、单例模式学习要求" class="headerlink" title="1、单例模式学习要求"></a>1、单例模式学习要求</h3><ul><li><p>使用CountDownLatch和Semaphore模拟并发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingle</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">TOTAL_COUNT</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;Integer&gt; hash = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并发模拟测试单例效率与安全性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">service</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">// 定义信号量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(THREAD_COUNT);</span><br><span class="line">        <span class="comment">//定义计数器闭锁</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(TOTAL_COUNT);</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; TOTAL_COUNT; i++) &#123;</span><br><span class="line">            <span class="comment">//将需要测试的业务全部放入线程池</span></span><br><span class="line">            service.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//当线程允许被执行时才执行</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                hash.add(LazySyncBlock.getInstance().hashCode());</span><br><span class="line">                <span class="comment">//线程执行完后释放</span></span><br><span class="line">                semaphore.release();</span><br><span class="line">                <span class="comment">//每次线程执行完之后，countdown一次</span></span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//该方法可以保证clientTotal减为0.既可以保证所有的线程都执行完毕了</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//所有的线程执行完了后，关闭线程池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;创建实例数=&quot;</span> + hash.size());</span><br><span class="line">        System.out.println(<span class="string">&quot;创建实例耗时=&quot;</span> + (System.currentTimeMillis() - start));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用反射创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingle</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">staticFinal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Class&lt;StaticFinal&gt; finalClass = StaticFinal.class;</span><br><span class="line">        Constructor&lt;StaticFinal&gt; ct = finalClass.getDeclaredConstructor();</span><br><span class="line">        ct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">StaticFinal</span> <span class="variable">single1</span> <span class="operator">=</span> ct.newInstance();</span><br><span class="line">        <span class="type">StaticFinal</span> <span class="variable">single2</span> <span class="operator">=</span> ct.newInstance();</span><br><span class="line">        Assert.assertEquals(single1, single2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>序列化创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSingle</span> &#123;    </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testXuliehua</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;StaticFinal&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileOutputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">                <span class="type">ObjectOutputStream</span> <span class="variable">outputObjStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(objStream);</span><br><span class="line">                <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path));</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">StaticFinal</span> <span class="variable">instance1</span> <span class="operator">=</span> StaticFinal.getInstance();</span><br><span class="line">            <span class="type">StaticFinal</span> <span class="variable">instance2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            outputObjStream.writeObject(instance1);</span><br><span class="line">            outputObjStream.flush();</span><br><span class="line"></span><br><span class="line">            instance2 = (StaticFinal) objectInputStream.readObject();</span><br><span class="line">            Assert.assertEquals(instance1, instance2);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>synchronized关键字</p></li><li><p>volatile关键字</p></li></ul><h3 id="2、单例的九种创建方式"><a href="#2、单例的九种创建方式" class="headerlink" title="2、单例的九种创建方式"></a>2、单例的九种创建方式</h3><p><strong>① 静态常量单例</strong>：在加载类的时候完成实例的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFinal</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticFinal</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticFinal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticFinal</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticFinal <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>② <strong>静态代码块</strong>：在加载类的时候完成实例的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticBlock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticBlock</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticBlock INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> <span class="title class_">StaticBlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticBlock <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>③ <strong>静态内部类</strong>：在加载类的时候完成实例的创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyInnerClass</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyInnerClass</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">LazyInnerClass</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LazyInnerClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyInnerClass <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Inner.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>④ 懒加载单例-饿汉式</strong>：在单线程环境中是安全的，在并发环境下存在严重的风险</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyGenerator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyGenerator instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyGenerator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyGenerator <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazyGenerator</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑤ 懒加载单例-同步方法</strong>：上述单例在并发环境下有严重分析，所以在创建实例的方法上添加同步锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySyncMethod</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySyncMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySyncMethod instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySyncMethod <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">LazySyncMethod</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑥ 懒加载单例-同步代码块</strong>：由于同步锁在并发环境消耗比较大，所以改为同步方法，只在创建对象时候添加同步锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazySyncBlock</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazySyncBlock</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySyncBlock instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazySyncBlock <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">null</span> == instance) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazySyncBlock.class) &#123;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">LazySyncBlock</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑦ 懒加载单例-双重检查</strong>：单例对象是成员变量，由于指令重拍的原因，还是会导致创建出多个单例对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyDoubleCheck</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">TestSingle</span> <span class="variable">l</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestSingle</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazyDoubleCheck instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyDoubleCheck</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyDoubleCheck <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//先判断是否存在，不存在再加锁处理</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//在同一个时刻加了锁的那部分程序只有一个线程可以进入</span></span><br><span class="line">            <span class="keyword">synchronized</span> (l) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazyDoubleCheck</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>⑧ 懒加载单例-volatile</strong>：使用volatile关键字配合同步锁保证消除指令重排的影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LazyVolitile</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> LazyVolitile instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">LazyVolitile</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LazyVolitile <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (LazyVolitile.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">LazyVolitile</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关键字 <code>volatile</code> : 保证此变量对所有的线程的可见性，当一个线程修改了这个变量的值，volatile 保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。但普通变量做不到这点，普通变量的值在线程间传递均需要通过主内存</p></blockquote><p>⑨ 单例- 枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumSingle</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> EnumSingle <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、破坏单例"><a href="#3、破坏单例" class="headerlink" title="3、破坏单例"></a>3、破坏单例</h3><ul><li><p><strong>反射破坏单例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">staticFinal</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Class&lt;StaticFinal&gt; finalClass = StaticFinal.class;</span><br><span class="line">    Constructor&lt;StaticFinal&gt; ct = finalClass.getDeclaredConstructor();</span><br><span class="line">    ct.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">StaticFinal</span> <span class="variable">single1</span> <span class="operator">=</span> ct.newInstance();</span><br><span class="line">    <span class="type">StaticFinal</span> <span class="variable">single2</span> <span class="operator">=</span> ct.newInstance();</span><br><span class="line">    Assert.assertEquals(single1, single2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>解决方案：反射创建对象是会调用对象的构造方法，需要为单例订单构造方法中添加显示：方式构造方法重复调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFinal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticFinal</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticFinal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticFinal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (StaticFinal.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不可以重复创建&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticFinal <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><hr><ul><li><p><strong>序列化破坏单例</strong>：单例对象序列化然后写入到磁盘,再从磁盘中读取到对象，反序列化转化为内存对象。反序列化后的对象会重新分配内存,重新创建破坏了单例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testXuliehua</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;single&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span> (</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">objStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(path);</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">outputObjStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(objStream);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(path));</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="type">StaticFinal</span> <span class="variable">instance1</span> <span class="operator">=</span> StaticFinal.getInstance();</span><br><span class="line">        <span class="type">StaticFinal</span> <span class="variable">instance2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        outputObjStream.writeObject(instance1);</span><br><span class="line">        outputObjStream.flush();</span><br><span class="line"></span><br><span class="line">        instance2 = (StaticFinal) objectInputStream.readObject();</span><br><span class="line">        Assert.assertEquals(instance1, instance2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>序列化创建对象源码</strong></p><ul><li><p>readObject()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> readObject0(<span class="literal">false</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>readObject0(false)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * new Object.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">static</span> <span class="type">byte</span> <span class="variable">TC_OBJECT</span> <span class="operator">=</span>       (<span class="type">byte</span>)<span class="number">0x73</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定位到这里:序列化创建对象</span></span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));</span><br></pre></td></tr></table></figure></li><li><p>readOrdinaryObject(unshared)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">readOrdinaryObject</span><span class="params">(<span class="type">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// new了一个对象</span></span><br><span class="line">        obj = desc.isInstantiable() ? desc.newInstance() : <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="comment">// 如果序列化对象中有hasReadResolveMethod()方法</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        handles.lookupException(passHandle) == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">        desc.hasReadResolveMethod())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 重点1:获取这个方法返回的对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">rep</span> <span class="operator">=</span> desc.invokeReadResolve(obj);</span><br><span class="line">        <span class="keyword">if</span> (unshared &amp;&amp; rep.getClass().isArray()) &#123;</span><br><span class="line">            rep = cloneArray(rep);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rep != obj) &#123;</span><br><span class="line">            <span class="comment">// Filter the replacement object</span></span><br><span class="line">            <span class="keyword">if</span> (rep != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (rep.getClass().isArray()) &#123;</span><br><span class="line">                    filterCheck(rep.getClass(), Array.getLength(rep));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    filterCheck(rep.getClass(), -<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 把方法返回的对象的引用赋值给序列化的对象</span></span><br><span class="line">            handles.setObject(passHandle, obj = rep);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>序列化破坏单例解决方案：在readOrdinaryObject()源码中，如果类实现了readResolveMethod()方法，那就invoke，同时之前newInstance的obj引用readOrdinaryObject()返回的对象，在源码中找到这个方法的名称是readResolve()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** class-defined readResolve method, or null if none */</span></span><br><span class="line"><span class="keyword">private</span> Method readResolveMethod;</span><br></pre></td></tr></table></figure><ul><li><p>需要被序列化的类实现了Serializable接口，在Serializable接口的文档注释中也有说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This writeReplace method is invoked by serialization if the method</span></span><br><span class="line"><span class="comment"> * exists and it would be accessible from a method defined within the</span></span><br><span class="line"><span class="comment"> * class of the object being serialized. Thus, the method can have private,</span></span><br><span class="line"><span class="comment"> * protected and package-private access. Subclass access to this method</span></span><br><span class="line"><span class="comment"> * follows java accessibility rules. &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Classes that need to designate a replacement when an instance of it</span></span><br><span class="line"><span class="comment"> * is read from the stream should implement this special method with the</span></span><br><span class="line"><span class="comment"> * exact signature.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;PRE&gt;</span></span><br><span class="line"><span class="comment"> * ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;</span></span><br><span class="line"><span class="comment"> * &lt;/PRE&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><hr><ul><li><p><strong>标准单例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticFinal</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">StaticFinal</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StaticFinal</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StaticFinal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (StaticFinal.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;单例对象不可以重复创建&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StaticFinal <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止单例被序列化破坏单例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 序列化对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="4、单例的应用"><a href="#4、单例的应用" class="headerlink" title="4、单例的应用"></a>4、单例的应用</h3><ul><li>在Spring中的应用</li><li>在JDK中的应用</li></ul><h3 id="5、单例模式的知识点"><a href="#5、单例模式的知识点" class="headerlink" title="5、单例模式的知识点"></a>5、单例模式的知识点</h3><ol><li><p>多线程的的使用 : 用于验证单例的线程安全</p></li><li><p><kbd>synchronized</kbd>, <kbd>volatile</kbd> 关键字的理解 : java基础</p></li><li><p>反射的基本使用 : 创建实例与方法调用</p></li><li><p>反序列化的原理的;理解 : readResolve()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(InputStream in);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> ObjectInputStream.readObject();</span><br></pre></td></tr></table></figure></li><li><p>TreadLoca线程单例 : 不能保证其创建的对象是全局唯一，但是能保证在单个线程中是唯一的，天生的线程安全</p></li><li><p>反射破坏单例的解决方案</p></li><li><p>序列化破坏单例的解决方案</p></li><li><p>ThreadLocal线程单例</p></li></ol><h2 id="2-5-建造者模式"><a href="#2-5-建造者模式" class="headerlink" title="2.5 建造者模式"></a>2.5 建造者模式</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>当一个类的内部数据过于复杂的时候（通常是负责持有数据的类，比如Config、VO、PO、Entity…），要创建的话可能就需要了解这个类的内部结构，还有这些东西是怎么组织装配等一大坨乱七八糟的东西，这个时候就会增加学习成本而且会很混乱，这就是Builder模式的应用场景，Builder模式可以将一个类的构建和表示进行分离。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>创建者模式又叫建造者模式，是将一个复杂的对象的<strong>构建</strong>与它的<strong>表示</strong>分离，使<br>得同样的构建过程可以创建不同的表示。创建者模式隐藏了复杂对象的创建过程，它把复杂对象的创建过程加以抽象，通过子类继承或者重载的方式，动态的创建具有复合属性的对象。建造者有两种实现方式，根据使用 案例描述：</p><ol><li>需要建造笔记本这种产品（笔记本中有各种CPU、主板、硬盘等等），但是这种类型的特点的没中品牌的笔记本其每部属性都是固定的，所以这种类型的对象的创建可以定义在建造者对象中，创建对象时候只需要说明需要的创建者；</li><li>第二种产品比如煎饼果子（内部属性有鸡蛋、火腿肠等等），每个对象的内部属性是不一定的，需要在创建时候单独制定，此时的建造者对象所创建的对象属性需要在创建的时候就指定；</li></ol><h3 id="2、代码演示"><a href="#2、代码演示" class="headerlink" title="2、代码演示"></a>2、代码演示</h3><ol><li><p><strong>具体完整功能的创建者模式</strong></p><ul><li><p>需要建造一个自行车对象，自信车对象有三个对象组成（框架、座椅、轮胎）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bike</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IFrame frame; </span><br><span class="line">    <span class="keyword">private</span> ISeat seat; </span><br><span class="line">    <span class="keyword">private</span> ITire tire; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter setter</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>因为需要不同的建造者对象建造不同的自行车，所以需要对建造者对象进行抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buildTire</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Bike <span class="title function_">createBike</span><span class="params">()</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>此时定义两个自行车建造者：摩拜自行车和ofo自行车</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体 builder 类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobikeBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Bike</span> <span class="variable">mBike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;AlloyFrame&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;DermisSeat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildTire</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setTire(<span class="string">&quot;SolidTire&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OfoBuilder</span> <span class="keyword">implements</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Bike</span> <span class="variable">mBike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;CarbonFrame&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;RubberSeat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildTire</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setTire(<span class="string">&quot;InflateTire&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure></li><li><p>封装用建造者创建对象的指挥者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Builder</span> <span class="variable">mBuilder</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        mBuilder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        mBuilder.buildFrame();</span><br><span class="line">        mBuilder.buildSeat();</span><br><span class="line">        mBuilder.buildTire();</span><br><span class="line">        <span class="keyword">return</span> mBuilder.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试创建自行车对象：创建对象的时候只需要告诉指挥者需要用哪个建造者创建对象；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        showBike(<span class="keyword">new</span> <span class="title class_">OfoBuilder</span>());</span><br><span class="line">        showBike(<span class="keyword">new</span> <span class="title class_">MobikeBuilder</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBike</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line">        <span class="type">Bike</span> <span class="variable">bike</span> <span class="operator">=</span> director.construct();</span><br><span class="line">        System.out.println(<span class="string">&quot;bike = &quot;</span> + bike);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>根据对象使用者的特殊要求创建对象</strong>：是当一个类构造参数有多个，而且参数都是可选的时候</p><ul><li><p>举例需要创建一个电脑对象，电脑有很多属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> String ram;<span class="comment">//必须</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Computer</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = builder.getCpu();</span><br><span class="line">        <span class="built_in">this</span>.ram = builder.getRam();</span><br><span class="line">        <span class="built_in">this</span>.usbCount = builder.getUsbCount();</span><br><span class="line">        <span class="built_in">this</span>.keyboard = builder.getKeyboard();</span><br><span class="line">        <span class="built_in">this</span>.display = builder.getDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义一个建造者对象：建造者对象也拥有和对象相同的属性，不然无法给对象传递参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String ram;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> usbCount;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String keyboard;<span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">private</span> String display;<span class="comment">//可选</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title function_">builder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Builder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Builder <span class="title function_">ram</span><span class="params">(String ram)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ram = ram;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Builder <span class="title function_">cup</span><span class="params">(String cup)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cup;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Builder <span class="title function_">usbCount</span><span class="params">(<span class="type">int</span> usbCount)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usbCount = usbCount;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Builder <span class="title function_">keyboard</span><span class="params">(String keyboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.keyboard = keyboard;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Builder <span class="title function_">display</span><span class="params">(String display)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.display = display;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Computer <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Computer</span>(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// getter setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">build</span> <span class="operator">=</span> Builder.builder()</span><br><span class="line">                .cup(<span class="string">&quot;cup&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(build);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h2 id="2-6-原型设计模式"><a href="#2-6-原型设计模式" class="headerlink" title="2.6 原型设计模式"></a>2.6 原型设计模式</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>原型模式的思路：Java中Object是所有类的根类，Object提供了一个clone方法，该方法可以将Java对象复制一份，但是需要实现克隆方法的Java类<strong>必须实现一个接口Cloneable</strong>：该接口表示实现类能够复制且具有复制的能力，这种复制方式也称为原型模式。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;原型（Prototype）模式的定义如下：用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型相同或相似的新对象。在这里，原型实例指定了要创建的对象的种类。用这种方式创建对象非常高效，根本无须知道对象创建的细节。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在Spring中指定scope=prototype（多例）的Bean的创建，就是使用的原型模式</p><h3 id="2、代码演示-1"><a href="#2、代码演示-1" class="headerlink" title="2、代码演示"></a>2、代码演示</h3><ul><li><p>浅克隆：如果字段是值类型的，则对该字段执行逐位复制，如果字段是引用类型，则复制引用但不复制引用的对象；因此，原始对象及其复本引用同一对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Resume</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line">    <span class="keyword">private</span> String timeArea;</span><br><span class="line">    <span class="keyword">private</span> String company;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; lists;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>lists是引用类型，克隆后修改原修改引用类型的值，会影响到原对象</p></blockquote></li><li><p>深克隆：复制对象的所有基本数据类型的成员变量值；为所有引用数据类型的成员变量申请存储空间，并复制每个引用类型成员变量所引用的对象，直到该对象的所有成员；（<strong>总结一句话：深拷贝是对整个对象进行拷贝</strong>）</p><ol><li><p><strong>深拷贝方式一</strong>：重新clone方法来实现深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> Resume <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="type">Resume</span> <span class="variable">clone</span> <span class="operator">=</span> (Resume) <span class="built_in">super</span>.clone();</span><br><span class="line">    List&lt;String&gt; target = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    target.addAll(<span class="built_in">this</span>.lists);</span><br><span class="line">    clone.lists = target;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>深拷贝方式二</strong>：通过对象序列化实现深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">     </span><br></pre></td></tr></table></figure></li></ol></li></ul><h1 id="第三章-结构型模式"><a href="#第三章-结构型模式" class="headerlink" title="第三章 结构型模式"></a>第三章 结构型模式</h1><h2 id="3-1-适配器模式"><a href="#3-1-适配器模式" class="headerlink" title="3.1 适配器模式"></a>3.1 适配器模式</h2><h3 id="1-概述-3"><a href="#1-概述-3" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li><strong>适配器模式的定义</strong>：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li><li><strong>适配器实现类型</strong>：①类适配器模式、②对象适配器模式、③接口适配器模式。</li><li><strong>适配器模式的优缺点</strong><ul><li><strong>优点</strong>：①客户端通过适配器可以透明地调用目标接口。②复用了现存的类，程序员不需要修改原有代码而重用现有的适配者类。③将目标类和适配者类解耦，解决了目标类和适配者类接口不一致的问题。</li><li><strong>缺点</strong>：对类适配器来说，更换适配器的实现过程比较复杂。</li></ul></li></ul><h3 id="2-结构"><a href="#2-结构" class="headerlink" title="2. 结构"></a>2. 结构</h3><ul><li><strong>目标（Target）接口</strong>：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li><strong>适配器（Adapter）类</strong>：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="3-类适配器"><a href="#3-类适配器" class="headerlink" title="3. 类适配器"></a>3. 类适配器</h3><ul><li><p>类适配器通过继承适配者类，然后实现目标接口，当执行接口中目标方法方法时在配置器类中调用父类的实现</p></li><li><p>案例说明：目前接口的功能是播放美剧，适配者类中有个播放韩剧的方法，要求调用目标接口播放美剧的时候可以通过适配器实现播放韩剧的效果；</p></li><li><p>定义播放韩剧的目标接口：接口的实现不重要了，使用适配器就是为了替换接口原有的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 美剧电影目标接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AmericanMovieTarget</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放美剧</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playAmericanMovie</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>是配置者类是一个播放美剧的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 韩剧适配者接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">KoreanDramasAdaptee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 播放韩剧</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playKoreanDramas</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 面向接口编程</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KoreanDramasAdapteeImpl</span> <span class="keyword">implements</span> <span class="title class_">KoreanDramasAdaptee</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playKoreanDramas</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 播放韩剧 &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义适配器类：实现调用播放美剧的接口播放韩剧的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassAdatper</span> <span class="keyword">extends</span> <span class="title class_">KoreanDramasAdapteeImpl</span> <span class="keyword">implements</span> <span class="title class_">AmericanMovieTarget</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playAmericanMovie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.playKoreanDramas();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试适配器的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AmericanMovieTarget</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassAdatper</span>();</span><br><span class="line">        target.playAmericanMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  播放韩剧 </span></span><br></pre></td></tr></table></figure></li></ul><h3 id="4-对象适配器"><a href="#4-对象适配器" class="headerlink" title="4. 对象适配器"></a>4. 对象适配器</h3><ul><li><p>对象适配器：是适配器类包含了对适配者的引用，对目标接口的实现是通过适配者完成</p></li><li><p>创建对象是适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectAdapter</span> <span class="keyword">implements</span> <span class="title class_">AmericanMovieTarget</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KoreanDramasAdaptee koreanDramasAdaptee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectAdapter</span><span class="params">(KoreanDramasAdaptee koreanDramasAdaptee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.koreanDramasAdaptee = koreanDramasAdaptee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">playAmericanMovie</span><span class="params">()</span> &#123;</span><br><span class="line">        koreanDramasAdaptee.playKoreanDramas();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试对象适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AmericanMovieTarget</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectAdapter</span>(<span class="keyword">new</span> <span class="title class_">KoreanDramasAdapteeImpl</span>());</span><br><span class="line">        target.playAmericanMovie();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  播放韩剧 </span></span><br></pre></td></tr></table></figure></li></ul><h3 id="5-接口适配器"><a href="#5-接口适配器" class="headerlink" title="5. 接口适配器"></a>5. 接口适配器</h3><ul><li><p>也称为缺省适配器模式，主要作用是：当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现，那么该抽象类的子类可有选择的覆盖父类的某些方法来实现需求</p></li><li><p>适用于一个接口不想使用其所有的方法的情况</p></li><li><p>案例说明：目标接口定义了很多方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterfaceTarget</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m5</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是当前要用到接口的m3方法，但是不想实现其他方法，可以定义一个适配器类将接口的方法进行空实现，当前是配置可以实现多个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">InterfaceAdatper</span> <span class="keyword">implements</span> <span class="title class_">InterfaceTarget</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> &#123;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m4</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m5</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>希望是接口的实现类，但是不想实现全部方法，此时只需要继承适配器抽象类，覆盖父类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterfaceAdatperImpl</span> <span class="keyword">extends</span> <span class="title class_">InterfaceAdatper</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;只是实现了m3方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试接口适配器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">InterfaceTarget</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InterfaceAdatperImpl</span>();</span><br><span class="line">        target.m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-装饰器模式"><a href="#3-2-装饰器模式" class="headerlink" title="3.2 装饰器模式"></a>3.2 装饰器模式</h2><h3 id="1-概述-4"><a href="#1-概述-4" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>按照单一职责原则，某一个对象只专注于干一件事，而如果要扩展其职能的话，不如想办法分离出一个类来“包装”这个对象，而这个扩展出的类则专注于实现扩展功能。装饰器模式就可以将新功能动态地附加于现有对象而不改变现有对象的功能；<strong>装饰器模式(Decorator Pattern)，动态地给一个对象添加一些额外的职责，就增加功能来说，装饰器模式比生成子类更灵活。</strong></p><h3 id="2-案例演示-2"><a href="#2-案例演示-2" class="headerlink" title="2. 案例演示"></a>2. 案例演示</h3><ul><li><p>场景演示：假设我去买咖啡，首先服务员给我冲了一杯原味咖啡，我希望服务员给我加些牛奶和白糖混合入原味咖啡中。使用装饰器模式就可以解决这个问题。</p></li><li><p>咖啡接口，定义了获取花费和配料的接口。以及默认的原味咖啡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line">    <span class="comment">/** 获取价格 */</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">/** 获取配料 */</span></span><br><span class="line">    String <span class="title function_">getIngredients</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 原味咖啡</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleCoffee</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIngredients</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Coffee&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义咖啡的装饰器类：添加牛奶的装饰器，添加糖的装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此装饰类混合&quot;牛奶&quot;到咖啡中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WithMilk</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Coffee coffee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WithMilk</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getCost() + <span class="number">0.5</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIngredients</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getIngredients() + <span class="string">&quot;,milk&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 此装饰类混合&quot;r糖&quot;到咖啡中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WithSugar</span> <span class="keyword">implements</span> <span class="title class_">Coffee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Coffee coffee;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WithSugar</span><span class="params">(Coffee coffee)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.coffee = coffee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getCost() + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getIngredients</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> coffee.getIngredients() + <span class="string">&quot;, Sugar&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCoffee</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;c = &quot;</span> + c.getCost() +  c.getIngredients());</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">m</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WithMilk</span>(c);</span><br><span class="line">        System.out.println(<span class="string">&quot;m = &quot;</span> + m.getCost() +  m.getIngredients());</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WithSugar</span>(m);</span><br><span class="line">        System.out.println(<span class="string">&quot;s = &quot;</span> + s.getCost()  + s.getIngredients());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// c = 1.0Coffee</span></span><br><span class="line"><span class="comment">// m = 1.5Coffee,milk</span></span><br><span class="line"><span class="comment">// s = 2.5Coffee,milk, Sugar</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-代理模式"><a href="#3-3-代理模式" class="headerlink" title="3.3 代理模式"></a>3.3 代理模式</h2><h3 id="1-概述-5"><a href="#1-概述-5" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>按照代理创建的时期来进行分类的话， 可以分为两种：静态代理、动态代理。静态代理是由程序员创建或特定工具自动生成源代码，在对其编译。在程序员运行之前，代理类.class文件就已经被创建了。动态代理是在程序运行时通过反射机制动态创建的。</p><h3 id="2-代码演示-静态代理"><a href="#2-代码演示-静态代理" class="headerlink" title="2. 代码演示-静态代理"></a>2. 代码演示-静态代理</h3><ul><li><p>抽象一组服务：被代理对象需要买个房子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BuyHouse</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">buyHosue</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>被代理对象实现了买房的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyHouseImpl</span> <span class="keyword">implements</span> <span class="title class_">BuyHouse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyHosue</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我要买房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>但是买房要准备很对东西，只能交给代理对象完成准备工作，买房的具体实际动作还得代理对象完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyHouseProxy</span> <span class="keyword">implements</span> <span class="title class_">BuyHouse</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BuyHouse buyHouse;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BuyHouseProxy</span><span class="params">(<span class="keyword">final</span> BuyHouse buyHouse)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buyHouse = buyHouse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buyHosue</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line">        buyHouse.buyHosue();</span><br><span class="line">        System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试静态代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyHouse</span> <span class="variable">buyHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyHouseImpl</span>();</span><br><span class="line">        buyHouse.buyHosue();</span><br><span class="line">        <span class="type">BuyHouseProxy</span> <span class="variable">buyHouseProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyHouseProxy</span>(buyHouse);</span><br><span class="line">        buyHouseProxy.buyHosue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-动态代理-jdk"><a href="#3-动态代理-jdk" class="headerlink" title="3. 动态代理-jdk"></a>3. 动态代理-jdk</h3><ul><li><p>jdk动态代理处理器需要实现<code>InvocationHandler</code>接口：实现原理是通过Proxy.newProxyInstance()方法通过反射创建出被代理对象的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object object;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DynamicProxyHandler</span><span class="params">(<span class="keyword">final</span> Object object)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.object = object;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(object, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>根据代理处理器创建出指定对象的代理对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">BuyHouse</span> <span class="variable">buyHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyHouseImpl</span>();</span><br><span class="line">        <span class="type">BuyHouse</span> <span class="variable">proxyBuyHouse</span> <span class="operator">=</span> (BuyHouse) Proxy.newProxyInstance(</span><br><span class="line">            BuyHouse.class.getClassLoader(), </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;BuyHouse.class&#125;, </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">DynamicProxyHandler</span>(buyHouse));</span><br><span class="line">        proxyBuyHouse.buyHosue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><em>Proxy.newProxyInstance()</em>方法接受三个参数：</p><ul><li><em><code>ClassLoader loader</code>:</em>指定当前目标对象使用的类加载器,获取加载器的方法是固定的</li><li><em><code>Class&lt;?&gt;[] interfaces</code>:</em>指定目标对象实现的接口的类型,使用泛型方式确认类型</li><li><em><code>InvocationHandler:</code></em>指定动态处理器，执行目标对象的方法时,会触发事件处理器的方法</li></ul></blockquote></li></ul><h3 id="3-代码演示-CGLIB"><a href="#3-代码演示-CGLIB" class="headerlink" title="3. 代码演示-CGLIB"></a>3. 代码演示-CGLIB</h3><ul><li><p>是Spring中使用的一种代理方式，原理是通过动态的创建被代理对象的子类完成对真实对象的代理工作；CGLIB创建的动态代理对象比JDK创建的动态代理对象的性能更高，但是CGLIB创建代理对象时所花费的时间却比JDK多得多。所以对于单例的对象，因为无需频繁创建对象，用CGLIB合适，反之使用JDK方式要更为合适一些。同时由于CGLib由于是采用动态创建子类的方法，对于final修饰的方法无法进行代理。</p></li><li><p>添加CGLIB环境</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第一步：创建CGLIB代理类：Enhancer是cglib中使用频率很高的一个类，它是一个字节码增强器，可以用来为无接口的类创建代理。它的功能与java自带的Proxy类挺相似的。它会根据某个给定的类创建子类，并且所有非final的方法都带有回调钩子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getInstance</span><span class="params">(<span class="keyword">final</span> Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        enhancer.setSuperclass(<span class="built_in">this</span>.target.getClass());</span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">return</span> enhancer.create();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object object, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买房前准备&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> methodProxy.invoke(object, args);</span><br><span class="line">        System.out.println(<span class="string">&quot;买房后装修&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二步：创建测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CglibProxyTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">BuyHouse</span> <span class="variable">buyHouse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyHouseImpl</span>();</span><br><span class="line">        <span class="type">CglibProxy</span> <span class="variable">cglibProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CglibProxy</span>();</span><br><span class="line">        <span class="type">BuyHouseImpl</span> <span class="variable">buyHouseCglibProxy</span> <span class="operator">=</span> (BuyHouseImpl) cglibProxy.getInstance(buyHouse);</span><br><span class="line">        buyHouseCglibProxy.buyHosue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-4-外观模式"><a href="#3-4-外观模式" class="headerlink" title="3.4 外观模式"></a>3.4 外观模式</h2><h3 id="1-概述-6"><a href="#1-概述-6" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>外观模式的标准定义是：要求一个子系统的外部与其内部的通信必须通过统一的对象进行，统一的对象称为外观：提供一个搞成次的接口，是的子系统更容易使用；简单描述就是：有个功能需要由一系列子一起执行，如果没有外观对象，需要一个个调用子系统，定义了外观对象，用一个接口封装了各个子系统的功能，只对外提供一个接口实现子系统的全部功能；再简单的一句话就是：外观模式就是封装；</p><h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><ul><li><p>有多个子系统：每个系统有各自的功能实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystem01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统01的method1()被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystem02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统02的method2()被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubSystem03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子系统03的method3()被调用！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义外观对象：封装子系统的功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Facade</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystem01</span> <span class="variable">obj1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystem01</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystem02</span> <span class="variable">obj2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystem02</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="type">SubSystem03</span> <span class="variable">obj3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubSystem03</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span> &#123;</span><br><span class="line">        obj1.method1();</span><br><span class="line">        obj2.method2();</span><br><span class="line">        obj3.method3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试外观模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Facade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Facade</span>();</span><br><span class="line">        facade.method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-5-桥接模式"><a href="#3-5-桥接模式" class="headerlink" title="3.5 桥接模式"></a>3.5 桥接模式</h2><h3 id="1-概述-7"><a href="#1-概述-7" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li><strong>抽象化：</strong>其概念是将复杂物体的一个或几个特性抽出去而只注意其他特性的行动或过程。在面向对象就是将对象共同的性质抽取出去而形成类的过程。</li><li><strong>实现化：</strong>针对抽象化给出的具体实现。它和抽象化是一个互逆的过程，实现化是对抽象化事物的进一步具体化。</li><li><strong>脱耦：</strong>脱耦就是将抽象化和实现化之间的耦合解脱开，或者说是将它们之间的强关联改换成弱关联，将两个角色之间的继承关系改为关联关系</li><li>桥接模式即将抽象部分与它的实现部分分离开来（并不是将抽象类与他的派生类分离，而是抽象类和它的派生类用来实现自己的对象），使他们都可以独立变化。桥接模式将继承关系转化成关联关系，它降低了类与类之间的耦合度，减少了系统中类的数量，也减少了代码量。</li></ul><h3 id="2-案例演示-3"><a href="#2-案例演示-3" class="headerlink" title="2. 案例演示"></a>2. 案例演示</h3><ul><li><p>案例场景：有一个画笔画一个形状，可以画正方形、长方形、圆形。但是现在我们需要给这些形状进行上色，这里有三种颜色：白色、灰色、黑色。所以要抽象出两类产品：形状和颜色，画笔的实现有三种，颜色的实现有三种</p><ul><li>抽象方案一：为形状提供颜色的实现</li><li>抽象方案二：为颜色提供形状的选择</li></ul></li><li><p>案例演示抽象方案一：为形状提供颜色，首先抽象出形状父类，可以设置颜色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    Color color;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setColor</span><span class="params">(Color color)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>实现三个形状</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        color.bepaint(<span class="string">&quot;正方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        color.bepaint(<span class="string">&quot;长方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        color.bepaint(<span class="string">&quot;正方形&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象的颜色也有三种</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String shape)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">White</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String shape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;白色的&quot;</span> + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Gray</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String shape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;灰色的&quot;</span> + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Black</span> <span class="keyword">implements</span> <span class="title class_">Color</span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bepaint</span><span class="params">(String shape)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;黑色的&quot;</span> + shape);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试桥接模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//白色</span></span><br><span class="line">        <span class="type">Color</span> <span class="variable">white</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">White</span>();</span><br><span class="line">        <span class="comment">//正方形</span></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">square</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        <span class="comment">//白色的正方形</span></span><br><span class="line">        square.setColor(white);</span><br><span class="line">        square.draw();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//长方形</span></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">rectange</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        rectange.setColor(white);</span><br><span class="line">        rectange.draw();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-6-组合模式"><a href="#3-6-组合模式" class="headerlink" title="3.6 组合模式"></a>3.6 组合模式</h2><h3 id="1-概述-8"><a href="#1-概述-8" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><ul><li><strong>意图：</strong>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li><li><strong>主要解决：</strong>它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</li><li><strong>何时使用：</strong> 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li></ul><h3 id="2-案例演示-4"><a href="#2-案例演示-4" class="headerlink" title="2. 案例演示"></a>2. 案例演示</h3><ul><li><p>员工对象作为一个个体，并且个体中又包含所有员工作为整体，并且管理者组的操作方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String dept;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> salary;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Employee&gt; subordinates;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(String name,String dept, <span class="type">int</span> sal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.dept = dept;</span><br><span class="line">        <span class="built_in">this</span>.salary = sal;</span><br><span class="line">        subordinates = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Employee&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 新增</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        subordinates.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Employee e)</span> &#123;</span><br><span class="line">        subordinates.remove(e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">getSubordinates</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> subordinates;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="string">&quot;Employee :[ Name : &quot;</span>+ name </span><br><span class="line">                +<span class="string">&quot;, dept : &quot;</span>+ dept + <span class="string">&quot;, salary :&quot;</span></span><br><span class="line">                + salary+<span class="string">&quot; ]&quot;</span>);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-7-享元模式"><a href="#3-7-享元模式" class="headerlink" title="3.7 享元模式"></a>3.7 享元模式</h2><h3 id="1-概述-9"><a href="#1-概述-9" class="headerlink" title="1.概述"></a>1.概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><h1 id="第四章-行为型模式"><a href="#第四章-行为型模式" class="headerlink" title="第四章 行为型模式"></a>第四章 行为型模式</h1><h2 id="4-1-策略模式"><a href="#4-1-策略模式" class="headerlink" title="4.1 策略模式"></a>4.1 策略模式</h2><h3 id="1-概述-10"><a href="#1-概述-10" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li><strong>策略模式的使用场景</strong>：先理解策略模式的使用场景：Java是面向对象的，如果要为对象添加某项功能通常会在类中定义一个方法，如果完成改功能的实现方式有多种选择的话就可以使用到策略设计模式了：即将不同的实现方式封装在不同的对象中，需要那种方式实现就让改对象去完成；比如我们希望实现一个出门旅游的功能，出行方式有坐飞机、坐火车、开私家车，将不同出行方式定义为不同的对象，在出行的时候指定所需要的出现方式即可；注意和状态模式的区别：①策略模式的选择是客户端进行选择的②策略模式专注于特定的算法或功能（比如使用状态模式：坐过车不舒服了可以自己转换为开私家车）</li><li><strong>使用策略模式的目的</strong>：程序调用者为程序指定执行环境（即程序执行的策略），根据策略的不同程序执行相同的函数会有不同的执行结果；</li><li><strong>策略模式的定义</strong>：该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</li><li><strong>策略模式的优点</strong><ul><li>多重条件语句不易维护，而使用策略模式可以避免使用多重条件语句，如 if…else 语句、switch…case 语句。</li><li>策略模式提供了一系列的可供重用的算法族，恰当使用继承可以把算法族的公共代码转移到父类里面，从而避免重复的代码。</li><li>策略模式可以提供相同行为的不同实现，客户可以根据不同时间或空间要求选择不同的。</li><li>策略模式提供了对开闭原则的完美支持，可以在不修改原代码的情况下，灵活增加新算法。</li><li>策略模式把算法的使用放到环境类中，而算法的实现移到具体策略类中，实现了二者的分离。</li></ul></li><li><strong>策略模式的缺点</strong><ul><li>客户端必须理解所有策略算法的区别，以便适时选择恰当的算法类。</li><li>策略模式造成很多的策略类，增加维护难度。</li></ul></li></ul><h3 id="2-结构-1"><a href="#2-结构-1" class="headerlink" title="2. 结构"></a>2. 结构</h3><ul><li><strong>抽象策略（Strategy）类</strong>：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li><strong>具体策略（Concrete Strategy）类</strong>：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li><li><strong>环境（Context）类</strong>：持有一个策略类的引用，最终给客户端调用。</li></ul><h3 id="3-代码演示"><a href="#3-代码演示" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><ul><li><p>抽象一种算法：封装算法方案</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Algorithm</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 算法方案</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">scheme</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这个算法有不同的算法实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlgorithmJwt</span> <span class="keyword">implements</span> <span class="title class_">Algorithm</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheme</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Jwt验证的算法方案&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlgorithmSession</span> <span class="keyword">implements</span> <span class="title class_">Algorithm</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">scheme</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;获取Session的算法方案&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后将算法进行封装：用户只需要提供算法。算法的执行统一交给算法执行器执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlgorithmContext</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Algorithm algorithm;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AlgorithmContext</span><span class="params">(Algorithm algorithm)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.algorithm = algorithm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        algorithm.scheme();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试策略模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AlgorithmContext</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlgorithmContext</span>(<span class="keyword">new</span> <span class="title class_">AlgorithmJwt</span>());</span><br><span class="line">        c1.execute();</span><br><span class="line">        <span class="type">AlgorithmContext</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlgorithmContext</span>(<span class="keyword">new</span> <span class="title class_">AlgorithmSession</span>());</span><br><span class="line">        c2.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-模板方法模式"><a href="#4-2-模板方法模式" class="headerlink" title="4.2 模板方法模式"></a>4.2 模板方法模式</h2><h3 id="1-概述-11"><a href="#1-概述-11" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li><strong>模板方法定义</strong>：在父类中定义了某种操作，操作中定义好了算法的整体步骤和框架，而将一些特殊步骤没有实现，需要延迟到子类进行个性化的实现；模板方法的作用：使得子类可以不改变一个算法的结构，即可重新定义该算法的某个特定的步骤；</li><li><strong>模板方法优点</strong>：<ul><li>它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。</li><li>它在父类中提取了公共的部分代码，便于代码复用。</li><li>部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</li></ul></li><li><strong>模板方法缺点</strong>：<ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li><li>由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。</li></ul></li></ul><h3 id="2-结构-2"><a href="#2-结构-2" class="headerlink" title="2. 结构"></a>2. 结构</h3><ul><li><p><strong>抽象类（Abstract Class）</strong>：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p><ul><li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p></li><li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p><ul><li><p>抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p></li><li><p>具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p></li><li><p>钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p><p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为boolean类型。</p></li></ul></li></ul></li><li><p><strong>具体子类（Concrete Class）</strong>：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p></li></ul><h3 id="3-代码演示-1"><a href="#3-代码演示-1" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><ul><li><p>抽象出一种算法框架，其中一部分的步骤是没有实现的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractTemplate</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;公共是算法:开始&quot;</span>);</span><br><span class="line">        template();</span><br><span class="line">        System.out.println(<span class="string">&quot;公共是算法:结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 改方法没有实现,需要子类个性化定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">template</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义子类：个性化定义算法中的特点步骤</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateAImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">template</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类个性化的算法A步骤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateBImpl</span> <span class="keyword">extends</span> <span class="title class_">AbstractTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">template</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;子类个性化的算法B步骤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试模板方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">AbstractTemplate</span> <span class="variable">templateA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateAImpl</span>();</span><br><span class="line">        templateA.execute();</span><br><span class="line">        <span class="type">AbstractTemplate</span> <span class="variable">templateB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplateBImpl</span>();</span><br><span class="line">        templateB.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-观察者模式"><a href="#4-3-观察者模式" class="headerlink" title="4.3 观察者模式"></a>4.3 观察者模式</h2><h3 id="1-概述-12"><a href="#1-概述-12" class="headerlink" title="1. 概述"></a>1. 概述</h3><ul><li><p><strong>观察者模式定义</strong>：又叫<strong>发布-订阅模式（Publish/Subscribe）</strong>：简单描述就是使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新；根据描述可以分析得出：被观察的对象和观察者之间是一对多的依赖关系；对描述进行抽象：</p><ul><li>有一个状态会改变的对象我们定义为Subject：这个对象知道其依赖的所有对象，表示这个对象里面有个集合包含着这些对象，所有还有有个方法，可以让其他对象进行依赖这个对象；</li><li>这个对象状态改变时候会通知所依赖的对象：从这句话可以抽象出两个关键点，①Subject有个状态改变的方法，②依赖的对象有个接受通知的方法</li><li>根据抽象结果，面向接口编程</li></ul></li><li><p><strong>观察者模式优点</strong></p><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li></ul></li><li><p><strong>观察者模式缺点</strong></p><ul><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul></li></ul><h3 id="2-结构-3"><a href="#2-结构-3" class="headerlink" title="2. 结构"></a>2. 结构</h3><ul><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ul><h3 id="3-代码演示-2"><a href="#3-代码演示-2" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><ul><li><p>观察者对象（Observer）：这个比较简单先定义这个，这个对象只有一个接受通知的方法，也可以返回一个接受到通知的响应</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被观察者对象接收通知</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 表示接收到通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateNotify</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>被观察者抽象为Subject（主题）：有两个方法①其他对象依赖这个对象的方法②状态改变的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 表示被依赖了</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 被依赖的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">depended</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被更新的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>先定义一个被观察者对象一个公司的大Boss：①管理者所依赖的对象②更新时候通知所有依赖的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubjectBoss</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Observer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被依赖后将依赖的对象管理起来</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> observer 被依赖的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">depended</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        list.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新后通知被依赖着对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span> &#123;</span><br><span class="line">        list.forEach(Observer::updateNotify);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再定义一批观察者对象：员工小王和员工小刘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverEmpXL</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateNotify</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;员工小刘收到通知&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserverEmpXW</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateNotify</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;员工小王收到通知&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试观察者模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SubjectBoss</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Observer</span> <span class="variable">sl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverEmpXL</span>();</span><br><span class="line">        <span class="type">Observer</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObserverEmpXW</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 小王和小刘观察了大boss</span></span><br><span class="line">        subject.depended(sl);</span><br><span class="line">        subject.depended(sw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大boss被更新了</span></span><br><span class="line">        subject.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-JDK内置观察者"><a href="#4-JDK内置观察者" class="headerlink" title="4. JDK内置观察者"></a>4. JDK内置观察者</h3><blockquote><p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p></blockquote><ul><li><p><strong>Observable类</strong>：是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。</p><ul><li>void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。</li><li>void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的 update方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</li><li>void setChange() 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变化。当它为true时，notifyObservers() 才会通知观察者。</li></ul></li><li><p><strong>Observer 接口</strong>：Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。</p></li><li><p>【案例代码】警察抓小偷：警察是观察者，小偷是被观察者</p><ul><li><p>小偷是一个被观察者，所以需要继承Observable类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thief</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thief</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">steal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小偷：我偷东西了，有没有人来抓我！！！&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setChanged(); <span class="comment">//changed  = true</span></span><br><span class="line">        <span class="built_in">super</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>警察是一个观察者，所以需要让其实现Observer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Policemen</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Policemen</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;警察：&quot;</span> + ((Thief) o).getName() + <span class="string">&quot;，我已经盯你很久了，你可以保持沉默，但你所说的将成为呈堂证供！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建小偷对象</span></span><br><span class="line">        <span class="type">Thief</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thief</span>(<span class="string">&quot;隔壁老王&quot;</span>);</span><br><span class="line">        <span class="comment">//创建警察对象</span></span><br><span class="line">        <span class="type">Policemen</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Policemen</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        <span class="comment">//让警察盯着小偷</span></span><br><span class="line">        t.addObserver(p);</span><br><span class="line">        <span class="comment">//小偷偷东西</span></span><br><span class="line">        t.steal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-4-迭代子模式"><a href="#4-4-迭代子模式" class="headerlink" title="4.4 迭代子模式"></a>4.4 迭代子模式</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。 </p><h3 id="2-结构-4"><a href="#2-结构-4" class="headerlink" title="2. 结构"></a>2. 结构</h3><ul><li>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</li><li>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</li><li>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</li><li>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</li></ul><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h3><ul><li><p>定义迭代器接口，声明hasNext、next方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentIterator</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    Student <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义具体的迭代器类，重写所有的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentIteratorImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentIterator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentIteratorImpl</span><span class="params">(List&lt;Student&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">currentStudent</span> <span class="operator">=</span> list.get(position);</span><br><span class="line">        position ++;</span><br><span class="line">        <span class="keyword">return</span> currentStudent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentAggregate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    StudentIterator <span class="title function_">getStudentIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义具体的容器类，重写所有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAggregateImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentAggregate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  <span class="comment">// 学生列表</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.remove(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StudentIterator <span class="title function_">getStudentIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentIteratorImpl</span>(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-优缺点"><a href="#4-优缺点" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h3><ul><li><strong>优点：</strong><ul><li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li><li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足 “开闭原则” 的要求。</li></ul></li><li><strong>缺点：</strong><ul><li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li></ul></li></ul><h2 id="4-5-责任链模式"><a href="#4-5-责任链模式" class="headerlink" title="4.5 责任链模式"></a>4.5 责任链模式</h2><h2 id="4-6-命令模式"><a href="#4-6-命令模式" class="headerlink" title="4.6 命令模式"></a>4.6 命令模式</h2><h2 id="4-7-备忘录模式"><a href="#4-7-备忘录模式" class="headerlink" title="4.7 备忘录模式"></a>4.7 备忘录模式</h2><h2 id="4-8-状态模式"><a href="#4-8-状态模式" class="headerlink" title="4.8 状态模式"></a>4.8 状态模式</h2><h3 id="1-概述-13"><a href="#1-概述-13" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类；状态模式主要解决的是当控制一个对象状态的条件表达式过于复杂时的情况。把状态的判断逻辑转移到表示不同状态的一系列类中，可以把复杂的判断逻辑简化。</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>状态模式最主要的好处就是把状态的判断与控制放到了其服务端的内部，使得客户端不需要去写很多代码判断，来控制自己的节点跳转，而且这样实现的话，我们可以把每个节点都分开来处理，当流程流转到某个节点的时候，可以去写自己的节点流转方法。当然状态模式的缺点也很多，比如类的耦合度比较高，基本上三个类要同时去写，而且会创建很多的节点类。</p><h3 id="2-代码演示-1"><a href="#2-代码演示-1" class="headerlink" title="2. 代码演示"></a>2. 代码演示</h3><ul><li><p>抽象一个状态的行为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Status</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>该状态有多种实现：如果状态需要传递，则当前状态只需要判断传递过来的状态结果而执行自己的状态行为，并传递给下一个状态即可，不必关系之后状态的行为；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatusA</span> <span class="keyword">implements</span> <span class="title class_">Status</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态A的行为&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StatusB</span> <span class="keyword">implements</span> <span class="title class_">Status</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;状态B的行为&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时外部会使用到状态，并且还需要修改状态，所以需要一个状态的上下文对象封装状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Status status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Context</span><span class="params">(Status status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        status.handle();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Status <span class="title function_">getStatus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> status;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStatus</span><span class="params">(Status status)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.status = status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试状态行为，修改状态并获对象的执行结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>(<span class="keyword">new</span> <span class="title class_">StatusA</span>());</span><br><span class="line">        context.doWork();</span><br><span class="line">        context.setStatus(<span class="keyword">new</span> <span class="title class_">StatusB</span>());</span><br><span class="line">        context.doWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-优缺点"><a href="#3-优缺点" class="headerlink" title="3. 优缺点"></a>3. 优缺点</h3><ul><li>优点：<ul><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li></ul></li><li>缺点：<ul><li>状态模式的使用必然会增加系统类和对象的个数。 </li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li><li>状态模式对”开闭原则”的支持并不太好。</li></ul></li></ul><h2 id="4-9-访问者模式"><a href="#4-9-访问者模式" class="headerlink" title="4.9 访问者模式"></a>4.9 访问者模式</h2><p><font size='5px'>访问</font>者模式的定义：封装一下用于对某种数据结构中的各元素的操作（在不改变数据结构的前提下定义与这些元素的新的操作）；案例代码看完后再回头看看下面场景对访问者模式定义的解释：</p><p><font size='5px'>学校</font>里有教师和学生，访问者最终的目的是希望获取到教师和学生的一些信息，那么数据结构就是固定的（教师和学生），将教师和学生抽象为User，并且提供一个供访问者可以访问的方法，如下的抽象方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span>;</span><br></pre></td></tr></table></figure><p>那么访问者（Visitor）呢！可以是学生家长（关心的是学生成绩）或者是学校校长（关心的是学校教师）或者其他访问者，你是任何一个访问者只能固定访问<code>学生</code>和<code>老师</code>，在进行访问核心信息的时候需要拿到这些数据的，那么将访问者进行抽象就是如下代码（因为数据结构固定只有学生和老师）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">    <span class="comment">// 访问学生信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span>;</span><br><span class="line">    <span class="comment">// 访问老师信息</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Teacher teacher)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样不同访问者有不同的访问逻辑，增加了扩展性，这样的代码涉及是为了将这两部分的业务解耦的一种设计模式。</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p><font size='5px'>访问</font>者模式的类结构相对其他设计模式来说比较复杂，但这样的设计模式在我看来更加<code>烧气有魅力</code>，它能阔开你对代码结构的新认知，用这样思维不断的建设出更好的代码架构。</p><p><font size='5px'>访问</font>者模式的角色划分：</p><ul><li>抽象元素角色（Element）：该角色声明一个接受操作，接受一个访问者对象,，其意义是指，每一个元素都要可以被访问者访问。。</li><li>具体元素角色（Concrete Element）：提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li>抽象访问者（Visitor）角色：定义了对每一个元素<code>（Element）</code>访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li><li>具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。</li><li>对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（<code>Element</code>），并且可以迭代这些元素，供访问者访问。</li></ul><p><font size='5px'>场景</font>说明：</p><ul><li>抽象元素角色（Element）：User</li><li>具体元素角色（Concrete Element）：Teacher、Student</li><li>抽象访问者（Visitor）角色：Visitor</li><li>具体访问者（ConcreteVisitor）角色：Principal、Parent</li></ul><p><font size='5px'>代码</font>实现：</p><ol><li><p>定义抽象元素角色：用户抽象类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="comment">// 基础信息包括: 姓名、身份、班级，也可以是一个业务用户属性类。</span></span><br><span class="line">  <span class="keyword">public</span> String name;      <span class="comment">// 姓名</span></span><br><span class="line">  <span class="keyword">public</span> String identity;  <span class="comment">// 身份；重点班、普通班 | 特级教师、普通教师、实习教师</span></span><br><span class="line">  <span class="keyword">public</span> String clazz;     <span class="comment">// 班级</span></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, String identity, String clazz)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.identity = identity;</span><br><span class="line">    <span class="built_in">this</span>.clazz = clazz;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 核心访问方法: 这个方法是为了让后续的用户具体实现者都能提供出一个访问方法，共外部使用。</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体元素角色（Concrete Element）：①这里实现了老师和学生类，都提供了父类的构造函数。②在<code>accept</code>方法中，提供了本地对象的访问；<code>visitor.visit(this)</code>，这块需要加深理解。③老师和学生类又都单独提供了各自的特性方法；升本率(<code>entranceRatio</code>)、排名(<code>ranking</code>)，类似这样的方法可以按照业务需求进行扩展。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 教师类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Teacher</span><span class="params">(String name, String identity, String clazz)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, identity, clazz);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">    visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 升本率</span></span><br><span class="line">  <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">entranceRatio</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> BigDecimal.valueOf(Math.random() * <span class="number">100</span>).setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP).doubleValue();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String identity, String clazz)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(name, identity, clazz);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">    visitor.visit(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">ranking</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>) (Math.random() * <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义抽象访问者（Visitor）角色：相同的方法名称，不同的入参用户类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line">  <span class="comment">// 访问学生信息</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 访问老师信息</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Teacher teacher)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体访问者（ConcreteVisitor）角色：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问者：校长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Principal</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Principal.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;学生信息 姓名：&#123;&#125; 班级：&#123;&#125;&quot;</span>, student.name, student.clazz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;学生信息 姓名：&#123;&#125; 班级：&#123;&#125; 升学率：&#123;&#125;&quot;</span>, teacher.name, teacher.clazz, teacher.entranceRatio());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问者：家长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">implements</span> <span class="title class_">Visitor</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(Parent.class);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;学生信息：姓名：&#123;&#125; 班级：&#123;&#125; 排名：&#123;&#125;&quot;</span>, student.name, student.clazz, student.ranking());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Teacher teacher)</span> &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;老师信息 姓名：&#123;&#125; 班级：&#123;&#125; 级别：&#123;&#125;&quot;</span>, teacher.name, teacher.clazz, teacher.identity);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数据准备：初始化了基本的数据，学生和老师的信息，通过传入不同的<code>观察者(校长、家长)</code>而差异化的打印信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataView</span> &#123;</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">DataView</span><span class="params">()</span> &#123;</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;谢飞机&quot;</span>, <span class="string">&quot;重点班&quot;</span>, <span class="string">&quot;一年一班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;windy&quot;</span>, <span class="string">&quot;重点班&quot;</span>, <span class="string">&quot;一年一班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;大毛&quot;</span>, <span class="string">&quot;普通班&quot;</span>, <span class="string">&quot;二年三班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;Shing&quot;</span>, <span class="string">&quot;普通班&quot;</span>, <span class="string">&quot;三年四班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;BK&quot;</span>, <span class="string">&quot;特级教师&quot;</span>, <span class="string">&quot;一年一班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;娜娜Goddess&quot;</span>, <span class="string">&quot;特级教师&quot;</span>, <span class="string">&quot;一年一班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;dangdang&quot;</span>, <span class="string">&quot;普通教师&quot;</span>, <span class="string">&quot;二年三班&quot;</span>));</span><br><span class="line">    userList.add(<span class="keyword">new</span> <span class="title class_">Teacher</span>(<span class="string">&quot;泽东&quot;</span>, <span class="string">&quot;实习教师&quot;</span>, <span class="string">&quot;三年四班&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 展示</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">(Visitor visitor)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">      user.accept(visitor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试验证</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DataView</span> <span class="variable">dataView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataView</span>();      </span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;\r\n家长视角访问：&quot;</span>);</span><br><span class="line">    dataView.show(<span class="keyword">new</span> <span class="title class_">Parent</span>());     <span class="comment">// 家长</span></span><br><span class="line"></span><br><span class="line">    logger.info(<span class="string">&quot;\r\n校长视角访问：&quot;</span>);</span><br><span class="line">    dataView.show(<span class="keyword">new</span> <span class="title class_">Principal</span>());  <span class="comment">// 校长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>测试结果：通过测试结果可以看到，家长和校长的访问视角同步，数据也是差异化的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">23:00:39.726 [main] INFO  org.itstack.demo.design.test.ApiTest - </span><br><span class="line">家长视角访问：</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 学生信息 姓名：谢飞机 班级：一年一班 排名：62</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 学生信息 姓名：windy 班级：一年一班 排名：51</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 学生信息 姓名：大毛 班级：二年三班 排名：16</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 学生信息 姓名：Shing 班级：三年四班 排名：98</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 老师信息 姓名：BK 班级：一年一班 级别：特级教师</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 老师信息 姓名：娜娜Goddess 班级：一年一班 级别：特级教师</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 老师信息 姓名：dangdang 班级：二年三班 级别：普通教师</span><br><span class="line">23:00:39.730 [main] INFO  o.i.demo.design.visitor.impl.Parent - 老师信息 姓名：泽东 班级：三年四班 级别：实习教师</span><br><span class="line">23:00:39.730 [main] INFO  org.itstack.demo.design.test.ApiTest - </span><br><span class="line">校长视角访问：</span><br><span class="line">23:00:39.731 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：谢飞机 班级：一年一班</span><br><span class="line">23:00:39.731 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：windy 班级：一年一班</span><br><span class="line">23:00:39.731 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：大毛 班级：二年三班</span><br><span class="line">23:00:39.731 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：Shing 班级：三年四班</span><br><span class="line">23:00:39.733 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：BK 班级：一年一班 升学率：70.62</span><br><span class="line">23:00:39.733 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：娜娜Goddess 班级：一年一班 升学率：23.15</span><br><span class="line">23:00:39.734 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：dangdang 班级：二年三班 升学率：70.98</span><br><span class="line">23:00:39.734 [main] INFO  o.i.d.design.visitor.impl.Principal - 学生信息 姓名：泽东 班级：三年四班 升学率：90.14</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></blockquote></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><font size='5px'>特点</font>：</p><ol><li>访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。</li><li>访问者模式适用于数据结构相对稳定算法又易变化的系统。因为访问者模式使得算法操作增加变得容易。若系统数据结构对象易于变化，经常有新的数据对象增加进来，则不适合使用访问者模式。</li><li>访问者模式的优点是增加操作很容易，因为增加操作意味着增加新的访问者。访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。其缺点就是增加新的数据结构很困难。</li></ol><p><font size='5px'>优点</font>：</p><ol><li>添加新的操作或者说访问者会非常容易。</li><li>使得类层次结构不改变的情况下，可以针对各个层次做出不同的操作，而不影响类层次结构的完整性。</li><li>使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化。</li><li>使得给结构稳定的对象增加新算法变得容易，提搞了代码的可维护性，可扩展性。</li><li>将对各个元素的一组操作集中在一个访问者类当中。</li><li>可以跨越类层次结构，访问不同层次的元素类，做出相应的操作。</li></ol><p><font size='5px'>缺点</font>：</p><ol><li>增加新的元素会非常困难。</li><li>实现起来比较复杂，会增加系统的复杂性。</li><li>破坏封装，如果将访问行为放在各个元素中，则可以不暴露元素的内部结构和状态，但使用访问者模式的时候，为了让访问者能获取到所关心的信息，元素类不得不暴露出一些内部的状态和结构，就像收入和支出类必须提供访问金额和单子的项目的方法一样。</li></ol><h3 id="开源代码"><a href="#开源代码" class="headerlink" title="开源代码"></a>开源代码</h3><h2 id="4-10-中介模式"><a href="#4-10-中介模式" class="headerlink" title="4.10 中介模式"></a>4.10 中介模式</h2><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><h3 id="开源代码-1"><a href="#开源代码-1" class="headerlink" title="开源代码"></a>开源代码</h3><h3 id="1-概述-14"><a href="#1-概述-14" class="headerlink" title="1. 概述"></a>1. 概述</h3><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</p><h3 id="2-结构-5"><a href="#2-结构-5" class="headerlink" title="2. 结构"></a>2. 结构</h3><ul><li>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</li><li>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</li><li>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</li><li>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</li></ul><h3 id="3-代码演示-3"><a href="#3-代码演示-3" class="headerlink" title="3. 代码演示"></a>3. 代码演示</h3><ul><li><p>现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房屋中介充当租房者与房屋所有者之间的中介者。</p></li><li><p>抽象中介者：申明一个联络方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message,Person person)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象同事类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,Mediator mediator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体同事类-房屋拥有者：属于中介要管理的Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseOwner</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseOwner</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.constact(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房主&quot;</span> + name +<span class="string">&quot;获取到的信息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>具体同事类-承租人：也属于中介要管理的Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenant</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tenant</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.constact(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租房者&quot;</span> + name +<span class="string">&quot;获取到的信息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>中介机构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorStructure</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">  <span class="comment">//首先中介结构必须知道所有房主和租房者的信息</span></span><br><span class="line">  <span class="keyword">private</span> HouseOwner houseOwner;</span><br><span class="line">  <span class="keyword">private</span> Tenant tenant;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> HouseOwner <span class="title function_">getHouseOwner</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> houseOwner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouseOwner</span><span class="params">(HouseOwner houseOwner)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.houseOwner = houseOwner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Tenant <span class="title function_">getTenant</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> tenant;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTenant</span><span class="params">(Tenant tenant)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.tenant = tenant;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message, Person person)</span> &#123;</span><br><span class="line">    <span class="comment">//如果是房主，则租房者获得信息</span></span><br><span class="line">    <span class="keyword">if</span> (person == houseOwner) &#123;          </span><br><span class="line">      tenant.getMessage(message);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;       </span><br><span class="line">      <span class="comment">//反之则是房主获得信息</span></span><br><span class="line">      houseOwner.getMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个房主、一个租房者、一个中介机构</span></span><br><span class="line">        <span class="type">MediatorStructure</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MediatorStructure</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//房主和租房者只需要知道中介机构即可</span></span><br><span class="line">        <span class="type">HouseOwner</span> <span class="variable">houseOwner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HouseOwner</span>(<span class="string">&quot;张三&quot;</span>, mediator);</span><br><span class="line">        <span class="type">Tenant</span> <span class="variable">tenant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tenant</span>(<span class="string">&quot;李四&quot;</span>, mediator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中介结构要知道房主和租房者</span></span><br><span class="line">        mediator.setHouseOwner(houseOwner);</span><br><span class="line">        mediator.setTenant(tenant);</span><br><span class="line"></span><br><span class="line">        tenant.constact(<span class="string">&quot;需要租三室的房子&quot;</span>);</span><br><span class="line">        houseOwner.constact(<span class="string">&quot;我这有三室的房子，你需要租吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-优缺点-1"><a href="#4-优缺点-1" class="headerlink" title="4. 优缺点"></a>4. 优缺点</h3><ul><li><p><strong>优点：</strong></p><ul><li><p>松散耦合：中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一处而动全身”了。</p></li><li><p>集中控制交互：多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。</p></li><li><p>一对多关联转变为一对一的关联：没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。</p></li></ul></li><li><p><strong>缺点：</strong></p><ul><li>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li></ul></li></ul><h2 id="4-11-解释器模式"><a href="#4-11-解释器模式" class="headerlink" title="4.11 解释器模式"></a>4.11 解释器模式</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h2 id=&quot;一、类结构关系&quot;&gt;&lt;a href=&quot;#一、类结构关系&quot; class=&quot;headerlink&quot; title=&quot;一、类结构关系&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java高级" scheme="http://yoursite.com/tags/Java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>0502-JavaIO</title>
    <link href="http://yoursite.com/2005/02/01/0502-JavaIO/"/>
    <id>http://yoursite.com/2005/02/01/0502-JavaIO/</id>
    <published>2005-01-31T16:05:00.000Z</published>
    <updated>2022-04-09T00:10:10.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-File"><a href="#第一章-File" class="headerlink" title="第一章 File"></a>第一章 File</h1><h2 id="1-1-File概述"><a href="#1-1-File概述" class="headerlink" title="1.1 File概述"></a>1.1 File概述</h2><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>File是对系统中的文件的<strong>抽象</strong>：将电脑中的文件（file）、文件夹（directory）、路径（path）封装为一个File类，用于对电脑中的文件和文件夹进行操作：①创建文件或文件夹②删除文件或文件夹③判断文件夹或文件夹状态④获取文件信息；</p><h2 id="1-2-系统路径"><a href="#1-2-系统路径" class="headerlink" title="1.2 系统路径"></a>1.2 系统路径</h2><ul><li>相对路径 : 查看路径是参照当前文件的路径为参照</li><li>绝对路径 : 查看路径是参照当系统根路径为参照</li></ul><h2 id="1-3-File类API"><a href="#1-3-File类API" class="headerlink" title="1.3 File类API"></a>1.3 File类API</h2><h3 id="1-静态常量"><a href="#1-静态常量" class="headerlink" title="1. 静态常量"></a>1. 静态常量</h3><table><thead><tr><th>静态成员变量</th><th>描述</th></tr></thead><tbody><tr><td>String <code>pathSeparator</code></td><td>与系统有关的<strong>字符串</strong>的路径分隔符</td></tr><tr><td>char <code>pathSeparatorChar</code></td><td>与系统有关的<strong>字符</strong>的路径分隔符 <strong>分隔符</strong></td></tr><tr><td>String <code>separator</code></td><td>与系统有关的默认<strong>字符串</strong>的名称分隔符</td></tr><tr><td>char<code>separatorChar</code></td><td>与系统有关的默认<strong>字符</strong>的名称分隔符</td></tr></tbody></table><h3 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2. 构造方法"></a>2. 构造方法</h3><ul><li>File(File parent, String child)：</li><li>File(String pathname)：</li><li>File(String parent, String child)：</li></ul><h3 id="3-获取文件信息"><a href="#3-获取文件信息" class="headerlink" title="3. 获取文件信息"></a>3. 获取文件信息</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>File getAbsoluteFile()</td><td>返回此路径名的绝对路径名形式</td></tr><tr><td>String getAbsolutePath()</td><td>返回此路径名的绝对路径名字符串</td></tr><tr><td>File getCanonicalFile()</td><td>返回此路径名的规范形式</td></tr><tr><td>String getCanonicalPath()</td><td>返回此路径名的规范路径名字符串</td></tr><tr><td>String getName()</td><td>返回由此路径名表示的文件或目录的名称</td></tr><tr><td>String getParent()</td><td>返回此路径名父目录的路径名字符串或null。</td></tr><tr><td>File getParentFile()</td><td>返回此路径名父目录的路径名或null</td></tr><tr><td>String getPath()</td><td>将此路径名转换为一个路径名字符串</td></tr><tr><td>long lastModified()</td><td>返回此路径名表示的文件最后一次被修改的时间</td></tr><tr><td>long length()</td><td>返回由此路径名表示的文件的长度</td></tr><tr><td>String[] list()</td><td>返回此路径名表示的目录中的文件和目录的字符串数组</td></tr><tr><td>File[] listFiles()</td><td>返回此路径名表示的目录中的文件和目录的文件数组</td></tr><tr><td>String[] list(FilenameFilter filter)</td><td>满足指定过滤器的文件和目录的字符串数组</td></tr><tr><td>File[] listFiles(FileFilter filter)</td><td>满足指定过滤器的文件和目录的文件数组</td></tr><tr><td>File[] listFiles(FilenameFilter filter)</td><td>满足指定过滤器的文件和目录的文件数组</td></tr><tr><td>long getTotalSpace()</td><td>返回此抽象路径名指定的分区大小</td></tr><tr><td>ong getFreeSpace()</td><td>返回此路径指定的分区中未分配的字节数</td></tr></tbody></table><h3 id="4-文件判断"><a href="#4-文件判断" class="headerlink" title="4. 文件判断"></a>4. 文件判断</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean canExecute()</td><td>测试应用程序是否可以执行此路径表示的文件</td></tr><tr><td>boolean canRead()</td><td>测试是否可以读取此路径表示的文件</td></tr><tr><td>boolean canWrite()</td><td>测试是否可以修改此路径表示的文件。</td></tr><tr><td>boolean exists()</td><td>测试此路径表示的文件或目录是否存在。</td></tr><tr><td>boolean isAbsolute()</td><td>测试此路径是否为绝对路径名</td></tr><tr><td>boolean isDirectory()</td><td>测试此路径表示的文件是否是一个目录</td></tr><tr><td>boolean isFile()</td><td>测试此路径表示的文件是否是一个标准文件</td></tr><tr><td>boolean isHidden()</td><td>测试此路径名指定的文件是否是一个隐藏文件。</td></tr></tbody></table><h3 id="5-文件的创建"><a href="#5-文件的创建" class="headerlink" title="5. 文件的创建"></a>5. 文件的创建</h3><ul><li>static File <code>createTempFile(String prefix, String suffix)</code><ul><li>创建一个空文件，使用给定前缀和后缀生成其名称</li></ul></li><li>static File <code>createTempFile(String prefix, String suffix, File directory)</code><ul><li>创建一个新的空文件，使用给定的前缀和后缀字符串生成其名称</li></ul></li></ul><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean createNewFile()</td><td>当且仅当不存在具有此路径名指定名称的文件时创建一个新的空文件</td></tr><tr><td>boolean mkdir()</td><td>创建此路径名指定的目录</td></tr><tr><td>boolean mkdirs()</td><td>创建此抽象路径名指定的目录，包括所有必需但不存在的父目录</td></tr></tbody></table><h3 id="4-文件的修改"><a href="#4-文件的修改" class="headerlink" title="4. 文件的修改"></a>4. 文件的修改</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean delete()</td><td>删除此路径名表示的文件或目录</td></tr><tr><td>void deleteOnExit()</td><td>在虚拟机终止时，请求删除此路径名表示的文件或目录</td></tr><tr><td>boolean renameTo(File dest)</td><td>重新命名此路径名表示的文件</td></tr><tr><td>boolean setExecutable(boolean executable)</td><td>设置此路径名所有者执行权限</td></tr><tr><td>boolean setExecutable(boolean e, boolean o)</td><td>设置此路径的所有者或所有用户的执行权限</td></tr><tr><td>boolean setLastModified(long time)</td><td>设置此路径名指定的文件或目录的最后一次修改时间</td></tr><tr><td>boolean setReadable(boolean readable)</td><td>设置此路径名所有者读权限</td></tr><tr><td>boolean setReadable(boolean r, boolean o)</td><td>设置此路径名的所有者或所有用户的读权限</td></tr><tr><td>boolean setReadOnly()</td><td>标记此路径指定的文件或目录只能对其进行读操作</td></tr><tr><td>boolean setWritable(boolean writable)</td><td>设置此路径名所有者写权限</td></tr><tr><td>boolean setWritable(boolean w, boolean o)</td><td>设置此路径名的所有者或所有用户的写权限</td></tr></tbody></table><h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>int compareTo(File pathname)</td><td>按字母顺序比较两个抽象路径名</td></tr><tr><td>boolean equals(Object obj)</td><td>测试此抽象路径名与给定对象是否相等</td></tr><tr><td>long getUsableSpace()</td><td>返回此抽象路径名指定的分区上可用于此虚拟机的字节数</td></tr><tr><td>int hashCode()</td><td>计算此抽象路径名的哈希码</td></tr><tr><td>String toString()</td><td>返回此抽象路径名的路径名字符串</td></tr><tr><td>URI toURI()</td><td>构造一个表示此抽象路径名的 file: URI</td></tr></tbody></table><h1 id="第二章-I-O流"><a href="#第二章-I-O流" class="headerlink" title="第二章 I/O流"></a>第二章 I/O流</h1><h2 id="2-1-IO流概述"><a href="#2-1-IO流概述" class="headerlink" title="2.1 IO流概述"></a>2.1 IO流概述</h2><ol><li><p><strong>什么是IO</strong></p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在电脑操作系统内，所有文件都是以二进制的形式存储在磁盘中，所以在操作系统中数据传输始终是二进制的数据流在磁盘或网络中通过应用程序进行传输；</p><p><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>在Java程序中操作文件中数据流过程是：通过程序将磁盘中文件加载到内存中，程序操作内存中数据然后在写回到磁盘中；在这个过程中把数据加载到内存的过程称为输入流（InputStream），把内存中数据写入到磁盘称为输出流（OutputStream）；</p></li><li><p><strong>IO流分类</strong></p><ul><li><p>以程序为中心按<strong>流的方向</strong>：分为输入流和输出流</p></li><li><p>根据程序操作的<strong>流的内容</strong>：分为字节流和字符流：一切皆字节</p><table><thead><tr><th></th><th>输入流：Input</th><th>输出流：Output</th></tr></thead><tbody><tr><td><strong>字节流：Stream</strong></td><td>字节输入流 <strong>InputStream</strong></td><td>字节输出流 <strong>OutPutStream</strong></td></tr><tr><td><strong>字符流：read和write</strong></td><td>字符输入流 <strong>Reader</strong></td><td>字符输出流 <strong>Writer</strong></td></tr></tbody></table><img src="https://z3.ax1x.com/2021/06/26/R37Rat.png" alt="R37Rat.png" border="0" /><img src="https://z3.ax1x.com/2021/06/26/R372VI.png" alt="R372VI.png" border="0" /></li></ul></li></ol><ol start="3"><li><p><strong>IO设计模式-装饰器</strong></p><ul><li><p>IO流的装饰作用是为了提高IO流的操作性能</p></li><li><p>装饰器模式相关对象</p><ul><li>抽象组件：定义需要装饰的<strong>抽象类</strong></li><li>具体组件：是抽象组件的具体实现，是需要被装饰的<strong>类</strong></li><li>抽象装饰类：包含了具体组件，是对抽象类的实现是由被装饰组件实现，并对原有实现进行的增强</li><li>具体装饰类：被装饰的对象</li></ul></li><li><p>核心代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> class 装饰器类 implements 抽象组件&#123;</span><br><span class="line">    <span class="keyword">private</span> 被装饰器类 decorator;</span><br><span class="line">    <span class="keyword">public</span> 装饰器类(被装饰器类 decorator)&#123;</span><br><span class="line">    <span class="built_in">this</span>.decorator = decorator</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@OverRide</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 增强方法()&#123;</span><br><span class="line">        decorator.增强方法() + 方法的增强;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>try新语法with -resource</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 流无需手动关闭</span></span><br><span class="line"><span class="keyword">try</span>(</span><br><span class="line">    流的声明</span><br><span class="line">)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;cache()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>Java IO流体系</strong></p><img src="https://z3.ax1x.com/2021/06/20/RFJe0O.jpg" alt="RFJe0O.jpg" border="0" /></li></ol><h2 id="2-2-文件字节流"><a href="#2-2-文件字节流" class="headerlink" title="2.2 文件字节流"></a>2.2 文件字节流</h2><ol><li><p><strong>文件字节流概述</strong>：包括文件字节输入流（FileInputStream）：作用是从本地磁盘的文件中读取数据；文件字节输出流（FileOutputStream）：作用是将流中的字节写入到磁盘的文件中；</p></li><li><p><strong>常用API说明</strong></p><table><thead><tr><th>FileInputStream</th><th>描述</th></tr></thead><tbody><tr><td>read()</td><td>从输入流中读取一个字节的数据，返回读取到的字节如果是文件末尾返回-1</td></tr><tr><td>read(byte b[])</td><td>从输入流中读取的字节保存到字节数组b中，返回读取到的长度；</td></tr><tr><td>skip(long n)</td><td>跳过并丢弃输入流中的n个数据，返回实际跳过的字节数</td></tr><tr><td>available()</td><td>可以从此输入流中读取的剩余字节数</td></tr><tr><td>getChannel()</td><td>返回与此文件输入流关联的通道</td></tr><tr><td>close()</td><td>关闭流</td></tr><tr><td><strong>FileOutputStream</strong></td><td><strong>描述</strong></td></tr><tr><td>write(int b)</td><td>将单个字节写入到输出流中</td></tr><tr><td>write(byte b[])</td><td>将字节数组中字节写入到输出流中</td></tr><tr><td>write(byte b[], int off, int len)</td><td>将字节数组中字节写入到输出流中；指定起始偏移量，和写入长度</td></tr><tr><td>close()</td><td>关闭流</td></tr></tbody></table></li><li><p><strong>案例演示</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01FileStreamTest</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Demo01FileStreamTest.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileOutputStream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">fileMsg</span> <span class="operator">=</span> <span class="string">&quot;Hello Java IO&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file)</span><br><span class="line">        ) &#123;</span><br><span class="line">            os.write(fileMsg.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileInputStream01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> is.read();</span><br><span class="line">            log.info(<span class="string">&quot;read()读取到一个字节=&#123;&#125;&quot;</span>, (<span class="type">char</span>) c);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileInputStream02</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> c;</span><br><span class="line">            <span class="keyword">while</span> ((c = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;read()读取到一个字节=&#123;&#125;&quot;</span>, (<span class="type">char</span>) c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileInputStream03</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">4</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                log.info(<span class="string">&quot;read()读取到长度 = &#123;&#125;, buf = &#123;&#125;&quot;</span>, len, <span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-3-缓存字节流"><a href="#2-3-缓存字节流" class="headerlink" title="2.3 缓存字节流"></a>2.3 缓存字节流</h2><ol><li><p>缓冲流概述：<code>BufferedInputStream</code>和<code>BufferedOutputStream</code>这两个类分别是<code>FilterInputStream</code>和<code>FilterOutputStream</code>的子类，作为装饰器子类，使用它们可以防止每次读取/发送数据时进行实际的写操作：带缓冲的流，可以一次读很多字节，但不向磁盘中写入，只是先放到内存里。等凑够了缓冲区大小的时候一次性写入磁盘，这种方式可以减少磁盘操作次数，速度就会提高很多！</p></li><li><p>缓存流API</p><table><thead><tr><th>BufferedInputStream</th><th>描述</th></tr></thead><tbody><tr><td>close()</td><td>关闭流</td></tr><tr><td><strong>BufferedOutputStream</strong></td><td><strong>描述</strong></td></tr><tr><td>flush()</td><td>强行将缓冲区中的数据写出，否则可能无法写出数据</td></tr><tr><td>close()</td><td>强行将缓冲区中的数据写出，并关闭流</td></tr></tbody></table></li><li><p>案例演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02BufferStreamTest</span> &#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;Demo01FileStreamTest.txt&quot;</span>);</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBufferInputStream</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">                <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(is)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">int</span> len;</span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">3</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = bis.read(buf)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;len=&#123;&#125;,buf=&#123;&#125;&quot;</span>, len, <span class="keyword">new</span> <span class="title class_">String</span>(buf));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-4-数据字节流"><a href="#2-4-数据字节流" class="headerlink" title="2.4 数据字节流"></a>2.4 数据字节流</h2><ol><li><p><strong>数据字节流概述</strong>：DataInputStream 和 DataOutputStream 是数据字节流，分别继承自 FilterInputStream 和 FilterOutputStream 和 实现了 DataInput 和 DataOutput。用来装饰其他的字节流。</p><ul><li>DataInputStream：数据字节输入流，用来装饰其他的输入流，<strong>允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型。</strong>应用程序可以使用 DataOutputStream (数据字节输出流)写入由 DataInputStream (数据字节输入流)读取的数据。</li><li>DataOutputStream ：数据字节输出流，用来装饰其他输出流，将 DataOutputStream 和 DataInputStream 输入流配合使用，<strong>允许应用程序以与机器无关方式从底层输入流中读写基本 Java 数据类型</strong>。</li></ul></li><li><p>数据字节流API</p><table><thead><tr><th>DataInputStream</th><th>描述</th></tr></thead><tbody><tr><td>read()</td><td>读取一个字节并返回读取到的字节，如果读取不到返回-1</td></tr><tr><td>read(byte[] b)</td><td>读取输入字节到数据b中，并返回读取到的长度；</td></tr><tr><td>read(byte b[], int off, int len)</td><td>读取输入字节到数组b中，最多读取长度为len</td></tr><tr><td>readBoolean()</td><td>读取一个输入字节：返回true该字节不为0，返回false该字节为0</td></tr><tr><td>readByte()</td><td>读取一个输入字节并返回一个byte值</td></tr><tr><td>readChar()</td><td>读取两个字节并返回一个char值</td></tr><tr><td>readShort()</td><td>读取两个输入字节并返回一个short值</td></tr><tr><td>readInt()</td><td>读取四个输入字节并返回一个int值</td></tr><tr><td>readFloat()</td><td>读取四个输入字节并返回一个float值</td></tr><tr><td>readLong()</td><td>读取八个输入字节并返回一个long值</td></tr><tr><td>readDouble()</td><td>读取八个输入字节并返回一个double值</td></tr><tr><td>readUTF()</td><td>读取已经使用UTF-8格式编码的字符串</td></tr><tr><td><strong>DataOutputStream</strong></td><td><strong>描述</strong></td></tr><tr><td>wrte(int b)</td><td>写入一个字节</td></tr><tr><td>write(byte b[], int off, int len)</td><td>写入长度为len的字节数组</td></tr><tr><td>writeBoolean(boolean v)</td><td></td></tr><tr><td>writeByte(int v)</td><td></td></tr><tr><td>writeShort(int v)</td><td></td></tr><tr><td>writeChar(int v)</td><td></td></tr><tr><td>writeChars(String s)</td><td></td></tr><tr><td>writeInt(int v)</td><td></td></tr><tr><td>writeLong(long v)</td><td></td></tr><tr><td>writeFloat(float v)</td><td></td></tr><tr><td>writeDouble(double v)</td><td></td></tr></tbody></table></li><li><p><strong>案例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></table></figure></li></ol><h2 id="2-5-对象字节流"><a href="#2-5-对象字节流" class="headerlink" title="2.5 对象字节流"></a>2.5 对象字节流</h2><ol><li><p><strong>对象字节流概述</strong>：也称序列化和反序列化，前体是类必须实现 Seriaizable；</p></li><li><p><strong>对象字节流API</strong></p><table><thead><tr><th>ObjectInputStream</th><th>描述</th></tr></thead><tbody><tr><td>readObject()</td><td></td></tr><tr><td><strong>ObjectOutputStream</strong></td><td><strong>描述</strong></td></tr><tr><td>writeObject(Object o)</td><td></td></tr></tbody></table></li></ol><h2 id="2-6-管道字节流"><a href="#2-6-管道字节流" class="headerlink" title="2.6 管道字节流"></a>2.6 管道字节流</h2><h2 id="2-7-数组字节流"><a href="#2-7-数组字节流" class="headerlink" title="2.7 数组字节流"></a>2.7 数组字节流</h2><h2 id="2-8-文件字符流"><a href="#2-8-文件字符流" class="headerlink" title="2.8 文件字符流"></a>2.8 文件字符流</h2><ol><li><p><strong>文件字符流概述</strong>：读取磁盘中本文文件并转为字符流；FileReader和FileWriter</p></li><li><p><strong>文件字符流API</strong></p><table><thead><tr><th>FileReader</th><th>描述</th></tr></thead><tbody><tr><td>read()</td><td>读取一个字符</td></tr><tr><td><strong>FileWriter</strong></td><td><strong>描述</strong></td></tr><tr><td>write()</td><td></td></tr></tbody></table></li><li><p><strong>案例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06BufferedReaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE</span> <span class="operator">=</span> <span class="string">&quot;Demo06BufferedReaderTest.txt&quot;</span>;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFileReader</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(FILE);</span><br><span class="line">        ) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;read=&#123;&#125;&quot;</span>, (<span class="type">char</span>) fr.read());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-9-缓存字符流"><a href="#2-9-缓存字符流" class="headerlink" title="2.9 缓存字符流"></a>2.9 缓存字符流</h2><ol><li><p><strong>缓存字符流概述</strong>：带缓冲区的字符流，是FileReader或FileWriter的处理流，主要作用是新增文本操作相关的API，方便处理文本文件；BufferedReader和BufferedWriter</p></li><li><p><strong>缓存字符流API</strong></p><table><thead><tr><th>BufferedReader</th><th>描述</th></tr></thead><tbody><tr><td>lines()</td><td>将文件中所有的行封装为一个Stream流</td></tr><tr><td>readLine()</td><td>读取文件中一行数据（换行符标识），读不到返回null</td></tr><tr><td><strong>BufferedWriter</strong></td><td><strong>描述</strong></td></tr><tr><td>newLine()</td><td>表示是一个换行符</td></tr></tbody></table></li><li><p><strong>案例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo06BufferedReaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FILE</span> <span class="operator">=</span> <span class="string">&quot;Demo06BufferedReaderTest.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(FILE);</span><br><span class="line">                <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw)</span><br><span class="line">        ) &#123;</span><br><span class="line">            bw.write(<span class="string">&quot;写的第一行文本&quot;</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">            bw.write(<span class="string">&quot;写的第二行文本&quot;</span>);</span><br><span class="line">            bw.newLine();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRead</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">FileReader</span> <span class="variable">fr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileReader</span>(FILE);</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(fr)</span><br><span class="line">        ) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;第一行=&#123;&#125;&quot;</span>, br.readLine());</span><br><span class="line">            log.info(<span class="string">&quot;第二行=&#123;&#125;&quot;</span>, br.readLine());</span><br><span class="line">            log.info(<span class="string">&quot;第三行=&#123;&#125;&quot;</span>, br.readLine());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-10-字符转换流"><a href="#2-10-字符转换流" class="headerlink" title="2.10 字符转换流"></a>2.10 字符转换流</h2><ol><li><p><strong>转换流概述</strong>：提供字节流与字符流之间的转换；InputStreamReader :将一个字节的输入流转换为字符的输入流；InputStreamWriter:将一个字符的输出流转换为字节的输出流；</p></li><li><p><strong>转换流API</strong>：重点是构造方法中可以指定转换的字符集</p><table><thead><tr><th>InputStreamReader</th><th>描述</th></tr></thead><tbody><tr><td>InputStreamReader(InputStream i)</td><td>封装InputStream为转换流，使用系统默认字符集</td></tr><tr><td>InputStreamReader(InputStream i, Charset c)</td><td>封装InputStream为转换流，并指定字符集</td></tr><tr><td><strong>InputStreamWriter</strong></td><td><strong>描述</strong></td></tr><tr><td>OutputStreamWriter(OutputStream o, Charset c)</td><td>将输出流以指定字符集进行输出</td></tr></tbody></table></li><li><p><strong>案例代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo05StreamReaderTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">FILE</span> <span class="operator">=</span> <span class="string">&quot;Demo05StreamReaderTest.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Charset</span> <span class="variable">GBK</span> <span class="operator">=</span> Charset.forName(<span class="string">&quot;GBK&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Charset</span> <span class="variable">UTF</span> <span class="operator">=</span> StandardCharsets.UTF_8;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用OutputStreamWriter将一段字符串写入到以GBK编码格式的文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testWriter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(FILE);</span><br><span class="line">                <span class="type">OutputStreamWriter</span> <span class="variable">osw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(os, GBK)</span><br><span class="line">        ) &#123;</span><br><span class="line">            osw.write(<span class="string">&quot;English and 中文测试输出&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用InputStreamReader读取GBK编码文件并用UTF8格式编码 会乱码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadUtf8</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE);</span><br><span class="line">                <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is, UTF);</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            log.info(<span class="string">&quot;读取文件utf格式,结果=&#123;&#125;&quot;</span>, line);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用InputStreamReader读取GBK编码文件并用GBK格式编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadGbk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">                <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(FILE);</span><br><span class="line">                <span class="type">InputStreamReader</span> <span class="variable">isr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(is, GBK);</span><br><span class="line">                <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(isr)</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">            log.info(<span class="string">&quot;读取文件gbk格式,结果=&#123;&#125;&quot;</span>, line);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;e=&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="第三章-IO工具包"><a href="#第三章-IO工具包" class="headerlink" title="第三章 IO工具包"></a>第三章 IO工具包</h1><h2 id="3-1-commons-io"><a href="#3-1-commons-io" class="headerlink" title="3.1 commons-io"></a>3.1 commons-io</h2><h2 id="3-2-HuTool"><a href="#3-2-HuTool" class="headerlink" title="3.2 HuTool"></a>3.2 HuTool</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-File&quot;&gt;&lt;a href=&quot;#第一章-File&quot; class=&quot;headerlink&quot; title=&quot;第一章 File&quot;&gt;&lt;/a&gt;第一章 File&lt;/h1&gt;&lt;h2 id=&quot;1-1-File概述&quot;&gt;&lt;a href=&quot;#1-1-File概述&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="JAVA全栈" scheme="http://yoursite.com/categories/JAVA%E5%85%A8%E6%A0%88/"/>
    
    
      <category term="Java高级" scheme="http://yoursite.com/tags/Java%E9%AB%98%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>0203-hexo博客</title>
    <link href="http://yoursite.com/2002/01/01/0203-hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2002/01/01/0203-hexo%E5%8D%9A%E5%AE%A2/</id>
    <published>2001-12-31T16:03:00.000Z</published>
    <updated>2022-04-09T00:10:10.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-Hexo基础"><a href="#第一章-Hexo基础" class="headerlink" title="第一章 Hexo基础"></a>第一章 Hexo基础</h1><h2 id="1-1-Hexo介绍"><a href="#1-1-Hexo介绍" class="headerlink" title="1.1 Hexo介绍"></a>1.1 Hexo介绍</h2><ul><li><strong>快速、简洁且高效的博客框架</strong></li></ul><blockquote><p>Hexo 使用 <a href="https://typora.io/" title="最好用的Markdown编辑工具：官网下载">Markdown </a>解析文章</p><p>使用用靓丽的<a href="https://hexo.bootcss.com/themes/" title="hexo 主题列表页">主题</a>生成静态网页</p></blockquote><h2 id="1-2-Hexo安装环境"><a href="#1-2-Hexo安装环境" class="headerlink" title="1.2 Hexo安装环境"></a>1.2 Hexo安装环境</h2><ul><li>核心依赖<ol><li>Hexo的安装依赖npm环境，所以必须安装node：<a href="https://nodejs.org/en">下载地址</a></li><li>Hexo的初始化需要借助Git下载相关初始化文件，必须安装Git：<a href="https://git-scm.com/download">下载地址</a></li></ol></li><li>辅助工具<ol><li>Hexo使用Markdow.文件作为文章载体，将文章内容显示为静态网页，推荐Markdow的编辑工具：Typora</li></ol></li></ul><h2 id="1-3-Hexo的初始化"><a href="#1-3-Hexo的初始化" class="headerlink" title="1.3 Hexo的初始化"></a>1.3 Hexo的初始化</h2><ol><li><p>下载hexo包：使用npm命令行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli<span class="comment"># 全局安装hexo-cli</span></span><br><span class="line">npm install hexo<span class="comment"># 对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包</span></span><br></pre></td></tr></table></figure></li><li><p>执行hexo命令：下载hexo包后便有了hexo命令工具</p><ul><li><p>方式一：hexo命令在环境变量中，全局安装默认就在环境变量中</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo &lt;命令参数&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式二：找到命令所在目录，在指定目录执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx hexo &lt;命令参数&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>建立Hexo博客站点</p><ul><li><p>新建站点所在位置的目录；</p></li><li><p>在站点目录内执行hexo建站指令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;站点目录&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>命令参数：<code>&lt;站点目录&gt;</code> 是可选项，如果定义了目录名称，会在当前目录中新建一个站点目录</p></li><li><p>建站完成的目录结构</p><ul><li>scaffolds（模板文件夹）：当使用hexo命令新增文章时，根据布局（layout）生成对应模板的文章到对应的目录；①draft.md是指草稿的模板、②page.md、③post.md会被hexo博客解析为文章的的模板<ul><li>draft布局：source/_drafts（通过 <code>publish</code> 命令将草稿移动到 <code>source/_posts</code> 文件夹）</li><li>page布局：source/</li><li>post布局：source/_posts（自定义的其他布局和 <code>post</code> 相同，都将储存到 <code>source/_posts</code> 文件夹）</li></ul></li><li>source（资源文件夹）：存放文章；除 <code>_posts</code> 文件夹之外，开头命名为 <code>_</code> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略</li><li>themes（主题）：Hexo 会根据主题来生成静态页面；</li><li>_config.yml：网站的配置信息</li><li>package.json：应用程序的信息</li></ul></li></ul></blockquote></li></ul></li><li><p>初体验：使用一个命令在本地浏览器查看初始化的hexo的博客站点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br><span class="line"><span class="comment"># 简写为</span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></li></ol><h1 id="第二章-Hexo配置"><a href="#第二章-Hexo配置" class="headerlink" title="第二章 Hexo配置"></a>第二章 Hexo配置</h1><h2 id="2-1-Site网站的个性化描述"><a href="#2-1-Site网站的个性化描述" class="headerlink" title="2.1 Site网站的个性化描述"></a>2.1 Site网站的个性化描述</h2><table><thead><tr><th>Site</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td>网站标题</td></tr><tr><td>subtitle</td><td>网站副标题</td></tr><tr><td>description</td><td>网站描述，用于SEO，告诉搜索引擎一个关于您站点的简单描述</td></tr><tr><td>keywords</td><td>网站的关键词。支持多个关键词</td></tr><tr><td>author</td><td>网站作者</td></tr><tr><td>language</td><td>网站使用的语言。请参考你的主题的文档自行设置，常见的有 <code>zh-Hans</code>和 <code>zh-CN</code>。</td></tr><tr><td>timezone</td><td>网站使用的时区，默认为 <code>计算机的预设置</code>，中国大陆地区可以使用 <code>Asia/Shanghai</code>。</td></tr></tbody></table><h2 id="2-2-URL"><a href="#2-2-URL" class="headerlink" title="2.2 URL"></a>2.2 URL</h2><table><thead><tr><th>URL</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>网站的网址：必须<code>http://</code> or <code>https://</code>开头</td></tr><tr><td>root</td><td>网站的根目录， 也是存放文章的目录</td></tr><tr><td>permalink</td><td>文章的链接格式 ，默认为 <code>:year/:month/:day/:title/</code></td></tr><tr><td>permalink_defaults</td><td>永久链接中每个段的默认值</td></tr><tr><td>pretty_urls</td><td>改写 <a href="https://hexo.bootcss.com/docs/variables.html"><code>permalink</code></a> 的值来美化 URL</td></tr><tr><td>pretty_urls.trailing_index</td><td>是否在永久链接中保留尾部的 <code>index.html</code>（默认true）</td></tr></tbody></table><h2 id="2-3-Directory"><a href="#2-3-Directory" class="headerlink" title="2.3 Directory"></a>2.3 Directory</h2><table><thead><tr><th>目录</th><th>描述</th></tr></thead><tbody><tr><td>source_dir</td><td>资源文件夹 ，存放用户的资源文件，默认为 <code>source</code></td></tr><tr><td>public_dir</td><td>公用文件夹 ，存放生成的静态文件，默认为 <code>public</code></td></tr><tr><td>tag_dir</td><td>标签目录 ，默认为 <code>tags</code></td></tr><tr><td>archive_dir</td><td>档案目录 ，默认为 <code>archives</code></td></tr><tr><td>category_dir</td><td>分类目录ß ，默认为 <code>categories</code></td></tr><tr><td>code_dir</td><td>代码目录 ，默认为 <code>downloads/code</code></td></tr><tr><td>i18n_dir</td><td>i18n目录 ，默认为 <code>:lang</code></td></tr><tr><td>skip_render</td><td>储存站长验证文件，跳过指定文件的渲染</td></tr></tbody></table><h2 id="2-4-Writing写作设置"><a href="#2-4-Writing写作设置" class="headerlink" title="2.4 Writing写作设置"></a>2.4 Writing写作设置</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>new_post_name</td><td>文章的文件名格式，默认为 <code>:title.md</code></td></tr><tr><td>default_layout</td><td>预设的布局模板，默认为 <code>post</code></td></tr><tr><td>titlecase</td><td>标题是否使用首字母大写 ，默认为 <code>false</code></td></tr><tr><td>external_link</td><td>链接是否在新标签页中打开，默认为 <code>true</code></td></tr><tr><td>filename_case</td><td>将文件名转换为 <code>1</code> 小写 或 <code>2</code> 大写，默认为 <code>0</code></td></tr><tr><td>render_drafts</td><td>是否显示渲染草稿，默认为 <code>false</code></td></tr><tr><td>post_asset_folder</td><td>是否启用 Asset 文件夹，默认为 <code>false</code></td></tr><tr><td>relative_link</td><td>是否建立相对于根文件夹的链接，默认为 <code>false</code></td></tr><tr><td>future</td><td>是否显示未来文章，默认为 <code>true</code></td></tr><tr><td>highlight</td><td>代码块设置</td></tr><tr><td>enable</td><td>是否使用代码高亮 ，默认为 <code>true</code></td></tr><tr><td>line_number</td><td>是否显示行号 ，默认为 <code>true</code></td></tr><tr><td>auto_detect</td><td>是否自动检测语言 ，默认为 <code>false</code></td></tr><tr><td>tab_replace</td><td>tab 替代设置</td></tr></tbody></table><h2 id="2-5-Home-page-setting首页设置"><a href="#2-5-Home-page-setting首页设置" class="headerlink" title="2.5 Home page setting首页设置"></a>2.5 Home page setting首页设置</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>index_generator</td><td>主页设置</td></tr><tr><td>path</td><td>首页的根目录</td></tr><tr><td>per_page</td><td>每页显示文章的数量，默认为 <code>10</code></td></tr><tr><td>order_by</td><td>显示文章的顺序，默认为 <code>-date</code></td></tr></tbody></table><h2 id="2-6-Category-amp-Tag"><a href="#2-6-Category-amp-Tag" class="headerlink" title="2.6 Category &amp; Tag"></a>2.6 Category &amp; Tag</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>default_category</td><td>预设分类，默认为 <code>uncategorized</code></td></tr><tr><td>category_map</td><td>分类别名</td></tr><tr><td>tag_map</td><td>标签别名</td></tr></tbody></table><h2 id="2-7-Date-Time-format"><a href="#2-7-Date-Time-format" class="headerlink" title="2.7 Date / Time format"></a>2.7 Date / Time format</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>date_format</td><td>日期格式，默认为 <code>YYYY-MM-DD</code></td></tr><tr><td>time_format</td><td>时间格式，默认为 <code>HH:mm:ss</code></td></tr></tbody></table><h2 id="2-8-Pagination分页设置"><a href="#2-8-Pagination分页设置" class="headerlink" title="2.8 Pagination分页设置"></a>2.8 Pagination分页设置</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>per_page</td><td>单个页面上显示的文章数量，默认为 <code>10</code> ，用 <code>0</code> 表示禁用分页</td></tr><tr><td>pagination_dir</td><td>分页目录，默认为 <code>page</code></td></tr></tbody></table><h2 id="2-9-Extensions"><a href="#2-9-Extensions" class="headerlink" title="2.9 Extensions"></a>2.9 Extensions</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>theme</td><td>博客使用的主题，默认为 <code>landscape</code></td></tr></tbody></table><h2 id="2-10-Deployment部署的配置"><a href="#2-10-Deployment部署的配置" class="headerlink" title="2.10 Deployment部署的配置"></a>2.10 Deployment部署的配置</h2><table><thead><tr><th>Setting</th><th>描述</th></tr></thead><tbody><tr><td>deploy</td><td>网站部署配置</td></tr><tr><td>type</td><td>网站部署类型</td></tr><tr><td>repo</td><td>网站部署地址</td></tr></tbody></table><h1 id="第三章-Hexo常用命令"><a href="#第三章-Hexo常用命令" class="headerlink" title="第三章 Hexo常用命令"></a>第三章 Hexo常用命令</h1><h2 id="3-1-hexo-init"><a href="#3-1-hexo-init" class="headerlink" title="3.1 hexo init"></a>3.1 hexo init</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [folder]</span><br></pre></td></tr></table></figure><blockquote><ul><li>命令用于初始化本地文件夹为网站的根目录</li><li>folder 可选参数，用以指定初始化目录的路径，若无指定则默认为当前目录</li></ul></blockquote><h2 id="3-2-hexo-new"><a href="#3-2-hexo-new" class="headerlink" title="3.2 hexo new"></a>3.2 hexo new</h2><ul><li><p>新建正式文章</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>layout</code> 可选参数，用以指定文章类型，若无指定则默认由配置文件中的 default_layout 选项决定</li><li><code>title</code> 必填参数，用以指定文章标题，如果参数值中含有空格，则需要使用双引号包围</li></ul></blockquote></li><li><p>新建草稿文件：会在source/_drafts目录下生成一个new-draft.md文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft <span class="string">&quot;new draft&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如下方式启动server：</span></span><br><span class="line">hexo server --drafts</span><br></pre></td></tr></table></figure></li><li><p>把草稿变成文章，或者页面</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-3-hexo-generate"><a href="#3-3-hexo-generate" class="headerlink" title="3.3 hexo generate"></a>3.3 hexo generate</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><blockquote><ul><li>命令用于生成静态文件，一般可以简写为 <code>hexo g</code></li><li><code>-d</code> 选项，指定生成后部署，与 <code>hexo d -g</code> 等价</li></ul></blockquote><h2 id="3-4-hexo-server"><a href="#3-4-hexo-server" class="headerlink" title="3.4 hexo server"></a>3.4 hexo server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hexo server [选项]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行服务器前需要安装 hexo-server 插件</span></span><br><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><blockquote><ul><li>用于启动本地服务器，一般可以简写为 <code>hexo s</code>,</li><li><code>-p</code> 选项，指定服务器端口，默认为 4000</li><li><code>-i</code> 选项，指定服务器 IP 地址，默认为 0.0.0.0</li><li><code>-s</code> 选项，静态模式 ，仅提供 public 文件夹中的文件并禁用文件监视</li></ul></blockquote><h2 id="3-5-hexo-deploy"><a href="#3-5-hexo-deploy" class="headerlink" title="3.5 hexo deploy"></a>3.5 hexo deploy</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><blockquote><ul><li><p>首先需要安装：npm install hexo-deployer-git –save</p></li><li><p>用于部署网站，一般可以简写为 <code>hexo d</code></p></li><li><p>部署前需要修改 _config.yml 配置文件，下面以 git 为例进行说明</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">branch:</span><span class="string">master</span></span><br><span class="line"><span class="attr">message:</span> <span class="string">自定义提交消息，默认为Site</span> <span class="attr">updated:</span> &#123;&#123; <span class="string">now(&#x27;YYYY-MM-DD</span> <span class="string">HH:mm:ss&#x27;)</span> &#125;&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h2 id="3-6-hexo-clean"><a href="#3-6-hexo-clean" class="headerlink" title="3.6 hexo clean"></a>3.6 hexo clean</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><blockquote><ul><li>用于清理缓存文件，是一个比较常用的命令</li></ul></blockquote><h1 id="第四章-站点配置"><a href="#第四章-站点配置" class="headerlink" title="第四章 站点配置"></a>第四章 站点配置</h1><h2 id="4-1-站长统计"><a href="#4-1-站长统计" class="headerlink" title="4.1 站长统计"></a>4.1 站长统计</h2><ol><li><p>在友盟主页注册账号，并新增应用：网站统计</p></li><li><p>输入网站相关数据，获取JavaScript脚本的内容</p></li><li><p>在主题的配置文件中开启站点统计</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 友盟cnzz统计(url填js代码src链接)</span></span><br><span class="line"><span class="attr">cnzz:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">https://s4.cnzz.com/z_stat.php?id=1279413779&amp;web_id=1279413779</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-2-搜索功能"><a href="#4-2-搜索功能" class="headerlink" title="4.2 搜索功能"></a>4.2 搜索功能</h2><ol><li><p>下载搜索依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成的搜索的索引文件</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-3-RSS订阅"><a href="#4-3-RSS订阅" class="headerlink" title="4.3 RSS订阅"></a>4.3 RSS订阅</h2><ol><li><p>下载依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br></pre></td></tr></table></figure></li><li><p>添加配置_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">    <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">hub:</span></span><br><span class="line">    <span class="attr">content:</span></span><br><span class="line">    <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">    <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="4-4-GitPage"><a href="#4-4-GitPage" class="headerlink" title="4.4 GitPage"></a>4.4 GitPage</h2><ol><li><p>新建Git仓库,本地配置ssh秘钥</p></li><li><p>下载依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure></li><li><p>配置_config.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&quot;git&quot;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xiaoliuxuesheng/xiaoliuxuesheng.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="第五章-我的文章说明"><a href="#第五章-我的文章说明" class="headerlink" title="第五章 我的文章说明"></a>第五章 我的文章说明</h1><h2 id="5-1-分类"><a href="#5-1-分类" class="headerlink" title="5.1 分类"></a>5.1 分类</h2><ul><li>办公软件：2001-01-01</li><li>学习工具：2002-01-01</li><li>软件基础：2003-01-01</li><li>数据库篇：2004-01-01</li><li>JAVA全栈：<ul><li>IT基础：2005-01-01</li><li>Java基础：2005-02-01</li><li>Java高级：2005-03-01</li><li>JavaWEB：2005-04-01</li><li>基础框架：2005-05-01</li><li>微服务栈：2005-06-01</li><li>Java工具集：2005-07-01</li></ul></li><li>前段全栈：<ul><li>基础篇：2006-01-01</li><li>工具篇：2006-02-01</li><li>框架篇：2006-04-01</li></ul></li><li>产品经理：2007-01-01</li><li>大数据：<ul><li>系统基础：2008-01-01</li><li>容器虚拟化：2008-02-01</li><li>大数据框架：2008-03-01</li></ul></li></ul><h2 id="5-2-标签"><a href="#5-2-标签" class="headerlink" title="5.2 标签"></a>5.2 标签</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-Hexo基础&quot;&gt;&lt;a href=&quot;#第一章-Hexo基础&quot; class=&quot;headerlink&quot; title=&quot;第一章 Hexo基础&quot;&gt;&lt;/a&gt;第一章 Hexo基础&lt;/h1&gt;&lt;h2 id=&quot;1-1-Hexo介绍&quot;&gt;&lt;a href=&quot;#1-1-Hexo介绍&quot;
      
    
    </summary>
    
    
      <category term="学习工具" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="UTIL" scheme="http://yoursite.com/tags/UTIL/"/>
    
  </entry>
  
</feed>
